
DECIMAL_HEX_BINARY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fda  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  00002fda  0000304e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000028ec  00000000  00000000  000030b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c1f  00000000  00000000  0000599c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000065bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000066fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000686b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000084b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000939f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000a14c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000a2ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000a539  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ad07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3c       	cpi	r26, 0xC0	; 192
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <main>
      7a:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 b4 17 	jmp	0x2f68	; 0x2f68 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a3 eb       	ldi	r26, 0xB3	; 179
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 d0 17 	jmp	0x2fa0	; 0x2fa0 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 dc 17 	jmp	0x2fb8	; 0x2fb8 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 dc 17 	jmp	0x2fb8	; 0x2fb8 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 b4 17 	jmp	0x2f68	; 0x2f68 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	83 eb       	ldi	r24, 0xB3	; 179
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 d0 17 	jmp	0x2fa0	; 0x2fa0 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 dc 17 	jmp	0x2fb8	; 0x2fb8 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 dc 17 	jmp	0x2fb8	; 0x2fb8 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 dc 17 	jmp	0x2fb8	; 0x2fb8 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 c4 17 	jmp	0x2f88	; 0x2f88 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 e0 17 	jmp	0x2fc0	; 0x2fc0 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <CALC_DecToBin>:
#include "BIT_Math.h"
#include "LCD_Interface.h"


void CALC_DecToBin(u32 z)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <CALC_DecToBin+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <CALC_DecToBin+0x8>
     b3e:	00 d0       	rcall	.+0      	; 0xb40 <CALC_DecToBin+0xa>
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	9e 83       	std	Y+6, r25	; 0x06
     b46:	8d 83       	std	Y+5, r24	; 0x05
	u32 x,i=0;
     b48:	1a 82       	std	Y+2, r1	; 0x02
     b4a:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<8;i++)
     b4c:	1a 82       	std	Y+2, r1	; 0x02
     b4e:	19 82       	std	Y+1, r1	; 0x01
     b50:	21 c0       	rjmp	.+66     	; 0xb94 <CALC_DecToBin+0x5e>
	{
		x=z&128;
     b52:	8d 81       	ldd	r24, Y+5	; 0x05
     b54:	9e 81       	ldd	r25, Y+6	; 0x06
     b56:	80 78       	andi	r24, 0x80	; 128
     b58:	90 70       	andi	r25, 0x00	; 0
     b5a:	9c 83       	std	Y+4, r25	; 0x04
     b5c:	8b 83       	std	Y+3, r24	; 0x03
		if(x==128)
     b5e:	8b 81       	ldd	r24, Y+3	; 0x03
     b60:	9c 81       	ldd	r25, Y+4	; 0x04
     b62:	80 38       	cpi	r24, 0x80	; 128
     b64:	91 05       	cpc	r25, r1
     b66:	21 f4       	brne	.+8      	; 0xb70 <CALC_DecToBin+0x3a>
		{
			LCD_VoidWriteNum(1);
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <LCD_VoidWriteNum>
     b6e:	07 c0       	rjmp	.+14     	; 0xb7e <CALC_DecToBin+0x48>
		}else if(x==0)
     b70:	8b 81       	ldd	r24, Y+3	; 0x03
     b72:	9c 81       	ldd	r25, Y+4	; 0x04
     b74:	00 97       	sbiw	r24, 0x00	; 0
     b76:	19 f4       	brne	.+6      	; 0xb7e <CALC_DecToBin+0x48>
		{
			LCD_VoidWriteData(48);
     b78:	80 e3       	ldi	r24, 0x30	; 48
     b7a:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
		}
		z=z<<1;
     b7e:	8d 81       	ldd	r24, Y+5	; 0x05
     b80:	9e 81       	ldd	r25, Y+6	; 0x06
     b82:	88 0f       	add	r24, r24
     b84:	99 1f       	adc	r25, r25
     b86:	9e 83       	std	Y+6, r25	; 0x06
     b88:	8d 83       	std	Y+5, r24	; 0x05


void CALC_DecToBin(u32 z)
{
	u32 x,i=0;
	for(i=0;i<8;i++)
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	9a 81       	ldd	r25, Y+2	; 0x02
     b8e:	01 96       	adiw	r24, 0x01	; 1
     b90:	9a 83       	std	Y+2, r25	; 0x02
     b92:	89 83       	std	Y+1, r24	; 0x01
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	9a 81       	ldd	r25, Y+2	; 0x02
     b98:	88 30       	cpi	r24, 0x08	; 8
     b9a:	91 05       	cpc	r25, r1
     b9c:	d0 f2       	brcs	.-76     	; 0xb52 <CALC_DecToBin+0x1c>
		{
			LCD_VoidWriteData(48);
		}
		z=z<<1;
	}
}
     b9e:	26 96       	adiw	r28, 0x06	; 6
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	de bf       	out	0x3e, r29	; 62
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	cd bf       	out	0x3d, r28	; 61
     baa:	cf 91       	pop	r28
     bac:	df 91       	pop	r29
     bae:	08 95       	ret

00000bb0 <CALC_BinToDec>:
}
*/


u16 CALC_BinToDec(u8 bin)
{
     bb0:	df 93       	push	r29
     bb2:	cf 93       	push	r28
     bb4:	00 d0       	rcall	.+0      	; 0xbb6 <CALC_BinToDec+0x6>
     bb6:	0f 92       	push	r0
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
     bbc:	8b 83       	std	Y+3, r24	; 0x03
	static u16 count_bit=1;
	static u16 k=1;
	u32 z=0;
     bbe:	1a 82       	std	Y+2, r1	; 0x02
     bc0:	19 82       	std	Y+1, r1	; 0x01
		if(bin==1)
     bc2:	8b 81       	ldd	r24, Y+3	; 0x03
     bc4:	81 30       	cpi	r24, 0x01	; 1
     bc6:	d1 f4       	brne	.+52     	; 0xbfc <CALC_BinToDec+0x4c>
		{
			k=k+1;
     bc8:	80 91 bb 00 	lds	r24, 0x00BB
     bcc:	90 91 bc 00 	lds	r25, 0x00BC
     bd0:	01 96       	adiw	r24, 0x01	; 1
     bd2:	90 93 bc 00 	sts	0x00BC, r25
     bd6:	80 93 bb 00 	sts	0x00BB, r24
			z=count_bit;
     bda:	80 91 bd 00 	lds	r24, 0x00BD
     bde:	90 91 be 00 	lds	r25, 0x00BE
     be2:	9a 83       	std	Y+2, r25	; 0x02
     be4:	89 83       	std	Y+1, r24	; 0x01
			count_bit=count_bit*2;
     be6:	80 91 bd 00 	lds	r24, 0x00BD
     bea:	90 91 be 00 	lds	r25, 0x00BE
     bee:	88 0f       	add	r24, r24
     bf0:	99 1f       	adc	r25, r25
     bf2:	90 93 be 00 	sts	0x00BE, r25
     bf6:	80 93 bd 00 	sts	0x00BD, r24
     bfa:	18 c0       	rjmp	.+48     	; 0xc2c <CALC_BinToDec+0x7c>
		}else if(bin==0)
     bfc:	8b 81       	ldd	r24, Y+3	; 0x03
     bfe:	88 23       	and	r24, r24
     c00:	a9 f4       	brne	.+42     	; 0xc2c <CALC_BinToDec+0x7c>
		{
			k=k+1;
     c02:	80 91 bb 00 	lds	r24, 0x00BB
     c06:	90 91 bc 00 	lds	r25, 0x00BC
     c0a:	01 96       	adiw	r24, 0x01	; 1
     c0c:	90 93 bc 00 	sts	0x00BC, r25
     c10:	80 93 bb 00 	sts	0x00BB, r24
			z=0;
     c14:	1a 82       	std	Y+2, r1	; 0x02
     c16:	19 82       	std	Y+1, r1	; 0x01
			count_bit=count_bit*2;
     c18:	80 91 bd 00 	lds	r24, 0x00BD
     c1c:	90 91 be 00 	lds	r25, 0x00BE
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	90 93 be 00 	sts	0x00BE, r25
     c28:	80 93 bd 00 	sts	0x00BD, r24
		}
		if(k==9)
     c2c:	80 91 bb 00 	lds	r24, 0x00BB
     c30:	90 91 bc 00 	lds	r25, 0x00BC
     c34:	89 30       	cpi	r24, 0x09	; 9
     c36:	91 05       	cpc	r25, r1
     c38:	61 f4       	brne	.+24     	; 0xc52 <CALC_BinToDec+0xa2>
		{
			k=1;
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	90 93 bc 00 	sts	0x00BC, r25
     c42:	80 93 bb 00 	sts	0x00BB, r24
			count_bit=1;
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	90 93 be 00 	sts	0x00BE, r25
     c4e:	80 93 bd 00 	sts	0x00BD, r24
		}
	return z;
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	cf 91       	pop	r28
     c5e:	df 91       	pop	r29
     c60:	08 95       	ret

00000c62 <DIO_VoidSetPinDirection>:
#include "STD_TYPES.h"
#include "BIT_Math.h"
#include "DIO_Private.h"

void DIO_VoidSetPinDirection(u8 Port, u8 Pin, u8 Direction)
{
     c62:	df 93       	push	r29
     c64:	cf 93       	push	r28
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
     c6a:	27 97       	sbiw	r28, 0x07	; 7
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	f8 94       	cli
     c70:	de bf       	out	0x3e, r29	; 62
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	cd bf       	out	0x3d, r28	; 61
     c76:	89 83       	std	Y+1, r24	; 0x01
     c78:	6a 83       	std	Y+2, r22	; 0x02
     c7a:	4b 83       	std	Y+3, r20	; 0x03
	if(1==Direction)
     c7c:	8b 81       	ldd	r24, Y+3	; 0x03
     c7e:	81 30       	cpi	r24, 0x01	; 1
     c80:	09 f0       	breq	.+2      	; 0xc84 <DIO_VoidSetPinDirection+0x22>
     c82:	6f c0       	rjmp	.+222    	; 0xd62 <DIO_VoidSetPinDirection+0x100>
	{
		switch(Port)
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	28 2f       	mov	r18, r24
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	3f 83       	std	Y+7, r19	; 0x07
     c8c:	2e 83       	std	Y+6, r18	; 0x06
     c8e:	8e 81       	ldd	r24, Y+6	; 0x06
     c90:	9f 81       	ldd	r25, Y+7	; 0x07
     c92:	81 30       	cpi	r24, 0x01	; 1
     c94:	91 05       	cpc	r25, r1
     c96:	49 f1       	breq	.+82     	; 0xcea <DIO_VoidSetPinDirection+0x88>
     c98:	2e 81       	ldd	r18, Y+6	; 0x06
     c9a:	3f 81       	ldd	r19, Y+7	; 0x07
     c9c:	22 30       	cpi	r18, 0x02	; 2
     c9e:	31 05       	cpc	r19, r1
     ca0:	2c f4       	brge	.+10     	; 0xcac <DIO_VoidSetPinDirection+0x4a>
     ca2:	8e 81       	ldd	r24, Y+6	; 0x06
     ca4:	9f 81       	ldd	r25, Y+7	; 0x07
     ca6:	00 97       	sbiw	r24, 0x00	; 0
     ca8:	61 f0       	breq	.+24     	; 0xcc2 <DIO_VoidSetPinDirection+0x60>
     caa:	d2 c0       	rjmp	.+420    	; 0xe50 <DIO_VoidSetPinDirection+0x1ee>
     cac:	2e 81       	ldd	r18, Y+6	; 0x06
     cae:	3f 81       	ldd	r19, Y+7	; 0x07
     cb0:	22 30       	cpi	r18, 0x02	; 2
     cb2:	31 05       	cpc	r19, r1
     cb4:	71 f1       	breq	.+92     	; 0xd12 <DIO_VoidSetPinDirection+0xb0>
     cb6:	8e 81       	ldd	r24, Y+6	; 0x06
     cb8:	9f 81       	ldd	r25, Y+7	; 0x07
     cba:	83 30       	cpi	r24, 0x03	; 3
     cbc:	91 05       	cpc	r25, r1
     cbe:	e9 f1       	breq	.+122    	; 0xd3a <DIO_VoidSetPinDirection+0xd8>
     cc0:	c7 c0       	rjmp	.+398    	; 0xe50 <DIO_VoidSetPinDirection+0x1ee>
		{
			case 0: SET_BIT(DDRA,Pin);  break;
     cc2:	aa e3       	ldi	r26, 0x3A	; 58
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	ea e3       	ldi	r30, 0x3A	; 58
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	48 2f       	mov	r20, r24
     cce:	8a 81       	ldd	r24, Y+2	; 0x02
     cd0:	28 2f       	mov	r18, r24
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	02 2e       	mov	r0, r18
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <DIO_VoidSetPinDirection+0x7e>
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	0a 94       	dec	r0
     ce2:	e2 f7       	brpl	.-8      	; 0xcdc <DIO_VoidSetPinDirection+0x7a>
     ce4:	84 2b       	or	r24, r20
     ce6:	8c 93       	st	X, r24
     ce8:	b3 c0       	rjmp	.+358    	; 0xe50 <DIO_VoidSetPinDirection+0x1ee>
			case 1: SET_BIT(DDRB,Pin);  break;
     cea:	a7 e3       	ldi	r26, 0x37	; 55
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e7 e3       	ldi	r30, 0x37	; 55
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	48 2f       	mov	r20, r24
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	28 2f       	mov	r18, r24
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	02 2e       	mov	r0, r18
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <DIO_VoidSetPinDirection+0xa6>
     d04:	88 0f       	add	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	0a 94       	dec	r0
     d0a:	e2 f7       	brpl	.-8      	; 0xd04 <DIO_VoidSetPinDirection+0xa2>
     d0c:	84 2b       	or	r24, r20
     d0e:	8c 93       	st	X, r24
     d10:	9f c0       	rjmp	.+318    	; 0xe50 <DIO_VoidSetPinDirection+0x1ee>
			case 2: SET_BIT(DDRC,Pin);  break;
     d12:	a4 e3       	ldi	r26, 0x34	; 52
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	e4 e3       	ldi	r30, 0x34	; 52
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	48 2f       	mov	r20, r24
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	02 2e       	mov	r0, r18
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <DIO_VoidSetPinDirection+0xce>
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	0a 94       	dec	r0
     d32:	e2 f7       	brpl	.-8      	; 0xd2c <DIO_VoidSetPinDirection+0xca>
     d34:	84 2b       	or	r24, r20
     d36:	8c 93       	st	X, r24
     d38:	8b c0       	rjmp	.+278    	; 0xe50 <DIO_VoidSetPinDirection+0x1ee>
			case 3: SET_BIT(DDRD,Pin);  break;	
     d3a:	a1 e3       	ldi	r26, 0x31	; 49
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e1 e3       	ldi	r30, 0x31	; 49
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	48 2f       	mov	r20, r24
     d46:	8a 81       	ldd	r24, Y+2	; 0x02
     d48:	28 2f       	mov	r18, r24
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	02 2e       	mov	r0, r18
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <DIO_VoidSetPinDirection+0xf6>
     d54:	88 0f       	add	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	0a 94       	dec	r0
     d5a:	e2 f7       	brpl	.-8      	; 0xd54 <DIO_VoidSetPinDirection+0xf2>
     d5c:	84 2b       	or	r24, r20
     d5e:	8c 93       	st	X, r24
     d60:	77 c0       	rjmp	.+238    	; 0xe50 <DIO_VoidSetPinDirection+0x1ee>
		}
	}else if(0==Direction)
     d62:	8b 81       	ldd	r24, Y+3	; 0x03
     d64:	88 23       	and	r24, r24
     d66:	09 f0       	breq	.+2      	; 0xd6a <DIO_VoidSetPinDirection+0x108>
     d68:	73 c0       	rjmp	.+230    	; 0xe50 <DIO_VoidSetPinDirection+0x1ee>
	{
		switch(Port)
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	3d 83       	std	Y+5, r19	; 0x05
     d72:	2c 83       	std	Y+4, r18	; 0x04
     d74:	8c 81       	ldd	r24, Y+4	; 0x04
     d76:	9d 81       	ldd	r25, Y+5	; 0x05
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	91 05       	cpc	r25, r1
     d7c:	59 f1       	breq	.+86     	; 0xdd4 <DIO_VoidSetPinDirection+0x172>
     d7e:	2c 81       	ldd	r18, Y+4	; 0x04
     d80:	3d 81       	ldd	r19, Y+5	; 0x05
     d82:	22 30       	cpi	r18, 0x02	; 2
     d84:	31 05       	cpc	r19, r1
     d86:	2c f4       	brge	.+10     	; 0xd92 <DIO_VoidSetPinDirection+0x130>
     d88:	8c 81       	ldd	r24, Y+4	; 0x04
     d8a:	9d 81       	ldd	r25, Y+5	; 0x05
     d8c:	00 97       	sbiw	r24, 0x00	; 0
     d8e:	69 f0       	breq	.+26     	; 0xdaa <DIO_VoidSetPinDirection+0x148>
     d90:	5f c0       	rjmp	.+190    	; 0xe50 <DIO_VoidSetPinDirection+0x1ee>
     d92:	2c 81       	ldd	r18, Y+4	; 0x04
     d94:	3d 81       	ldd	r19, Y+5	; 0x05
     d96:	22 30       	cpi	r18, 0x02	; 2
     d98:	31 05       	cpc	r19, r1
     d9a:	89 f1       	breq	.+98     	; 0xdfe <DIO_VoidSetPinDirection+0x19c>
     d9c:	8c 81       	ldd	r24, Y+4	; 0x04
     d9e:	9d 81       	ldd	r25, Y+5	; 0x05
     da0:	83 30       	cpi	r24, 0x03	; 3
     da2:	91 05       	cpc	r25, r1
     da4:	09 f4       	brne	.+2      	; 0xda8 <DIO_VoidSetPinDirection+0x146>
     da6:	40 c0       	rjmp	.+128    	; 0xe28 <DIO_VoidSetPinDirection+0x1c6>
     da8:	53 c0       	rjmp	.+166    	; 0xe50 <DIO_VoidSetPinDirection+0x1ee>
		{
			case 0: CLR_BIT(DDRA,Pin);  break;
     daa:	aa e3       	ldi	r26, 0x3A	; 58
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	ea e3       	ldi	r30, 0x3A	; 58
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	48 2f       	mov	r20, r24
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	02 2e       	mov	r0, r18
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <DIO_VoidSetPinDirection+0x166>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	0a 94       	dec	r0
     dca:	e2 f7       	brpl	.-8      	; 0xdc4 <DIO_VoidSetPinDirection+0x162>
     dcc:	80 95       	com	r24
     dce:	84 23       	and	r24, r20
     dd0:	8c 93       	st	X, r24
     dd2:	3e c0       	rjmp	.+124    	; 0xe50 <DIO_VoidSetPinDirection+0x1ee>
			case 1: CLR_BIT(DDRB,Pin);  break;
     dd4:	a7 e3       	ldi	r26, 0x37	; 55
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e7 e3       	ldi	r30, 0x37	; 55
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	48 2f       	mov	r20, r24
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
     de2:	28 2f       	mov	r18, r24
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	02 2e       	mov	r0, r18
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <DIO_VoidSetPinDirection+0x190>
     dee:	88 0f       	add	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	0a 94       	dec	r0
     df4:	e2 f7       	brpl	.-8      	; 0xdee <DIO_VoidSetPinDirection+0x18c>
     df6:	80 95       	com	r24
     df8:	84 23       	and	r24, r20
     dfa:	8c 93       	st	X, r24
     dfc:	29 c0       	rjmp	.+82     	; 0xe50 <DIO_VoidSetPinDirection+0x1ee>
			case 2: CLR_BIT(DDRC,Pin);  break;
     dfe:	a4 e3       	ldi	r26, 0x34	; 52
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	e4 e3       	ldi	r30, 0x34	; 52
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	48 2f       	mov	r20, r24
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	02 2e       	mov	r0, r18
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <DIO_VoidSetPinDirection+0x1ba>
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	0a 94       	dec	r0
     e1e:	e2 f7       	brpl	.-8      	; 0xe18 <DIO_VoidSetPinDirection+0x1b6>
     e20:	80 95       	com	r24
     e22:	84 23       	and	r24, r20
     e24:	8c 93       	st	X, r24
     e26:	14 c0       	rjmp	.+40     	; 0xe50 <DIO_VoidSetPinDirection+0x1ee>
			case 3: CLR_BIT(DDRD,Pin);  break;			
     e28:	a1 e3       	ldi	r26, 0x31	; 49
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e1 e3       	ldi	r30, 0x31	; 49
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	48 2f       	mov	r20, r24
     e34:	8a 81       	ldd	r24, Y+2	; 0x02
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	02 2e       	mov	r0, r18
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <DIO_VoidSetPinDirection+0x1e4>
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	0a 94       	dec	r0
     e48:	e2 f7       	brpl	.-8      	; 0xe42 <DIO_VoidSetPinDirection+0x1e0>
     e4a:	80 95       	com	r24
     e4c:	84 23       	and	r24, r20
     e4e:	8c 93       	st	X, r24
		}
	}
	
}
     e50:	27 96       	adiw	r28, 0x07	; 7
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	08 95       	ret

00000e62 <DIO_VoidSetPinValue>:
void DIO_VoidSetPinValue (u8 Port, u8 Pin, u8 value)
{
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	27 97       	sbiw	r28, 0x07	; 7
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	cd bf       	out	0x3d, r28	; 61
     e76:	89 83       	std	Y+1, r24	; 0x01
     e78:	6a 83       	std	Y+2, r22	; 0x02
     e7a:	4b 83       	std	Y+3, r20	; 0x03
	if(1==value)
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	81 30       	cpi	r24, 0x01	; 1
     e80:	09 f0       	breq	.+2      	; 0xe84 <DIO_VoidSetPinValue+0x22>
     e82:	6f c0       	rjmp	.+222    	; 0xf62 <DIO_VoidSetPinValue+0x100>
	{
		switch(Port)
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	3f 83       	std	Y+7, r19	; 0x07
     e8c:	2e 83       	std	Y+6, r18	; 0x06
     e8e:	8e 81       	ldd	r24, Y+6	; 0x06
     e90:	9f 81       	ldd	r25, Y+7	; 0x07
     e92:	81 30       	cpi	r24, 0x01	; 1
     e94:	91 05       	cpc	r25, r1
     e96:	49 f1       	breq	.+82     	; 0xeea <DIO_VoidSetPinValue+0x88>
     e98:	2e 81       	ldd	r18, Y+6	; 0x06
     e9a:	3f 81       	ldd	r19, Y+7	; 0x07
     e9c:	22 30       	cpi	r18, 0x02	; 2
     e9e:	31 05       	cpc	r19, r1
     ea0:	2c f4       	brge	.+10     	; 0xeac <DIO_VoidSetPinValue+0x4a>
     ea2:	8e 81       	ldd	r24, Y+6	; 0x06
     ea4:	9f 81       	ldd	r25, Y+7	; 0x07
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	61 f0       	breq	.+24     	; 0xec2 <DIO_VoidSetPinValue+0x60>
     eaa:	d2 c0       	rjmp	.+420    	; 0x1050 <DIO_VoidSetPinValue+0x1ee>
     eac:	2e 81       	ldd	r18, Y+6	; 0x06
     eae:	3f 81       	ldd	r19, Y+7	; 0x07
     eb0:	22 30       	cpi	r18, 0x02	; 2
     eb2:	31 05       	cpc	r19, r1
     eb4:	71 f1       	breq	.+92     	; 0xf12 <DIO_VoidSetPinValue+0xb0>
     eb6:	8e 81       	ldd	r24, Y+6	; 0x06
     eb8:	9f 81       	ldd	r25, Y+7	; 0x07
     eba:	83 30       	cpi	r24, 0x03	; 3
     ebc:	91 05       	cpc	r25, r1
     ebe:	e9 f1       	breq	.+122    	; 0xf3a <DIO_VoidSetPinValue+0xd8>
     ec0:	c7 c0       	rjmp	.+398    	; 0x1050 <DIO_VoidSetPinValue+0x1ee>
		{
			case 0: SET_BIT(PORTA,Pin);  break;
     ec2:	ab e3       	ldi	r26, 0x3B	; 59
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	eb e3       	ldi	r30, 0x3B	; 59
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	48 2f       	mov	r20, r24
     ece:	8a 81       	ldd	r24, Y+2	; 0x02
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	02 2e       	mov	r0, r18
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <DIO_VoidSetPinValue+0x7e>
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	0a 94       	dec	r0
     ee2:	e2 f7       	brpl	.-8      	; 0xedc <DIO_VoidSetPinValue+0x7a>
     ee4:	84 2b       	or	r24, r20
     ee6:	8c 93       	st	X, r24
     ee8:	b3 c0       	rjmp	.+358    	; 0x1050 <DIO_VoidSetPinValue+0x1ee>
			case 1: SET_BIT(PORTB,Pin);  break;
     eea:	a8 e3       	ldi	r26, 0x38	; 56
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e8 e3       	ldi	r30, 0x38	; 56
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	48 2f       	mov	r20, r24
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 2e       	mov	r0, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <DIO_VoidSetPinValue+0xa6>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	0a 94       	dec	r0
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <DIO_VoidSetPinValue+0xa2>
     f0c:	84 2b       	or	r24, r20
     f0e:	8c 93       	st	X, r24
     f10:	9f c0       	rjmp	.+318    	; 0x1050 <DIO_VoidSetPinValue+0x1ee>
			case 2: SET_BIT(PORTC,Pin);  break;
     f12:	a5 e3       	ldi	r26, 0x35	; 53
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e5 e3       	ldi	r30, 0x35	; 53
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	48 2f       	mov	r20, r24
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	02 2e       	mov	r0, r18
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <DIO_VoidSetPinValue+0xce>
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	0a 94       	dec	r0
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <DIO_VoidSetPinValue+0xca>
     f34:	84 2b       	or	r24, r20
     f36:	8c 93       	st	X, r24
     f38:	8b c0       	rjmp	.+278    	; 0x1050 <DIO_VoidSetPinValue+0x1ee>
			case 3: SET_BIT(PORTD,Pin);  break;			
     f3a:	a2 e3       	ldi	r26, 0x32	; 50
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e2 e3       	ldi	r30, 0x32	; 50
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	48 2f       	mov	r20, r24
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 2e       	mov	r0, r18
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <DIO_VoidSetPinValue+0xf6>
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	0a 94       	dec	r0
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <DIO_VoidSetPinValue+0xf2>
     f5c:	84 2b       	or	r24, r20
     f5e:	8c 93       	st	X, r24
     f60:	77 c0       	rjmp	.+238    	; 0x1050 <DIO_VoidSetPinValue+0x1ee>
		}
		
	}else if(0==value)
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 23       	and	r24, r24
     f66:	09 f0       	breq	.+2      	; 0xf6a <DIO_VoidSetPinValue+0x108>
     f68:	73 c0       	rjmp	.+230    	; 0x1050 <DIO_VoidSetPinValue+0x1ee>
	{
		switch(Port)
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	3d 83       	std	Y+5, r19	; 0x05
     f72:	2c 83       	std	Y+4, r18	; 0x04
     f74:	8c 81       	ldd	r24, Y+4	; 0x04
     f76:	9d 81       	ldd	r25, Y+5	; 0x05
     f78:	81 30       	cpi	r24, 0x01	; 1
     f7a:	91 05       	cpc	r25, r1
     f7c:	59 f1       	breq	.+86     	; 0xfd4 <DIO_VoidSetPinValue+0x172>
     f7e:	2c 81       	ldd	r18, Y+4	; 0x04
     f80:	3d 81       	ldd	r19, Y+5	; 0x05
     f82:	22 30       	cpi	r18, 0x02	; 2
     f84:	31 05       	cpc	r19, r1
     f86:	2c f4       	brge	.+10     	; 0xf92 <DIO_VoidSetPinValue+0x130>
     f88:	8c 81       	ldd	r24, Y+4	; 0x04
     f8a:	9d 81       	ldd	r25, Y+5	; 0x05
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	69 f0       	breq	.+26     	; 0xfaa <DIO_VoidSetPinValue+0x148>
     f90:	5f c0       	rjmp	.+190    	; 0x1050 <DIO_VoidSetPinValue+0x1ee>
     f92:	2c 81       	ldd	r18, Y+4	; 0x04
     f94:	3d 81       	ldd	r19, Y+5	; 0x05
     f96:	22 30       	cpi	r18, 0x02	; 2
     f98:	31 05       	cpc	r19, r1
     f9a:	89 f1       	breq	.+98     	; 0xffe <DIO_VoidSetPinValue+0x19c>
     f9c:	8c 81       	ldd	r24, Y+4	; 0x04
     f9e:	9d 81       	ldd	r25, Y+5	; 0x05
     fa0:	83 30       	cpi	r24, 0x03	; 3
     fa2:	91 05       	cpc	r25, r1
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <DIO_VoidSetPinValue+0x146>
     fa6:	40 c0       	rjmp	.+128    	; 0x1028 <DIO_VoidSetPinValue+0x1c6>
     fa8:	53 c0       	rjmp	.+166    	; 0x1050 <DIO_VoidSetPinValue+0x1ee>
		{
			case 0: CLR_BIT(PORTA,Pin);  break;
     faa:	ab e3       	ldi	r26, 0x3B	; 59
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	eb e3       	ldi	r30, 0x3B	; 59
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	48 2f       	mov	r20, r24
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	02 2e       	mov	r0, r18
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <DIO_VoidSetPinValue+0x166>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	0a 94       	dec	r0
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <DIO_VoidSetPinValue+0x162>
     fcc:	80 95       	com	r24
     fce:	84 23       	and	r24, r20
     fd0:	8c 93       	st	X, r24
     fd2:	3e c0       	rjmp	.+124    	; 0x1050 <DIO_VoidSetPinValue+0x1ee>
			case 1: CLR_BIT(PORTB,Pin);  break;
     fd4:	a8 e3       	ldi	r26, 0x38	; 56
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e8 e3       	ldi	r30, 0x38	; 56
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	48 2f       	mov	r20, r24
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	02 2e       	mov	r0, r18
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <DIO_VoidSetPinValue+0x190>
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	0a 94       	dec	r0
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <DIO_VoidSetPinValue+0x18c>
     ff6:	80 95       	com	r24
     ff8:	84 23       	and	r24, r20
     ffa:	8c 93       	st	X, r24
     ffc:	29 c0       	rjmp	.+82     	; 0x1050 <DIO_VoidSetPinValue+0x1ee>
			case 2: CLR_BIT(PORTC,Pin);  break;
     ffe:	a5 e3       	ldi	r26, 0x35	; 53
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	e5 e3       	ldi	r30, 0x35	; 53
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	48 2f       	mov	r20, r24
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	02 2e       	mov	r0, r18
    1016:	02 c0       	rjmp	.+4      	; 0x101c <DIO_VoidSetPinValue+0x1ba>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	0a 94       	dec	r0
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <DIO_VoidSetPinValue+0x1b6>
    1020:	80 95       	com	r24
    1022:	84 23       	and	r24, r20
    1024:	8c 93       	st	X, r24
    1026:	14 c0       	rjmp	.+40     	; 0x1050 <DIO_VoidSetPinValue+0x1ee>
			case 3: CLR_BIT(PORTD,Pin);  break;
    1028:	a2 e3       	ldi	r26, 0x32	; 50
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e2 e3       	ldi	r30, 0x32	; 50
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	48 2f       	mov	r20, r24
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	02 2e       	mov	r0, r18
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <DIO_VoidSetPinValue+0x1e4>
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	0a 94       	dec	r0
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <DIO_VoidSetPinValue+0x1e0>
    104a:	80 95       	com	r24
    104c:	84 23       	and	r24, r20
    104e:	8c 93       	st	X, r24
		}

	}
}
    1050:	27 96       	adiw	r28, 0x07	; 7
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	f8 94       	cli
    1056:	de bf       	out	0x3e, r29	; 62
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	cd bf       	out	0x3d, r28	; 61
    105c:	cf 91       	pop	r28
    105e:	df 91       	pop	r29
    1060:	08 95       	ret

00001062 <DIO_U8GetPinValue>:
u8 DIO_U8GetPinValue (u8 Port, u8 Pin)
{
    1062:	df 93       	push	r29
    1064:	cf 93       	push	r28
    1066:	00 d0       	rcall	.+0      	; 0x1068 <DIO_U8GetPinValue+0x6>
    1068:	00 d0       	rcall	.+0      	; 0x106a <DIO_U8GetPinValue+0x8>
    106a:	0f 92       	push	r0
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
    1070:	8a 83       	std	Y+2, r24	; 0x02
    1072:	6b 83       	std	Y+3, r22	; 0x03
	u8 x=0;
    1074:	19 82       	std	Y+1, r1	; 0x01
	switch(Port)
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	3d 83       	std	Y+5, r19	; 0x05
    107e:	2c 83       	std	Y+4, r18	; 0x04
    1080:	4c 81       	ldd	r20, Y+4	; 0x04
    1082:	5d 81       	ldd	r21, Y+5	; 0x05
    1084:	41 30       	cpi	r20, 0x01	; 1
    1086:	51 05       	cpc	r21, r1
    1088:	41 f1       	breq	.+80     	; 0x10da <DIO_U8GetPinValue+0x78>
    108a:	8c 81       	ldd	r24, Y+4	; 0x04
    108c:	9d 81       	ldd	r25, Y+5	; 0x05
    108e:	82 30       	cpi	r24, 0x02	; 2
    1090:	91 05       	cpc	r25, r1
    1092:	34 f4       	brge	.+12     	; 0x10a0 <DIO_U8GetPinValue+0x3e>
    1094:	2c 81       	ldd	r18, Y+4	; 0x04
    1096:	3d 81       	ldd	r19, Y+5	; 0x05
    1098:	21 15       	cp	r18, r1
    109a:	31 05       	cpc	r19, r1
    109c:	61 f0       	breq	.+24     	; 0x10b6 <DIO_U8GetPinValue+0x54>
    109e:	52 c0       	rjmp	.+164    	; 0x1144 <DIO_U8GetPinValue+0xe2>
    10a0:	4c 81       	ldd	r20, Y+4	; 0x04
    10a2:	5d 81       	ldd	r21, Y+5	; 0x05
    10a4:	42 30       	cpi	r20, 0x02	; 2
    10a6:	51 05       	cpc	r21, r1
    10a8:	51 f1       	breq	.+84     	; 0x10fe <DIO_U8GetPinValue+0x9c>
    10aa:	8c 81       	ldd	r24, Y+4	; 0x04
    10ac:	9d 81       	ldd	r25, Y+5	; 0x05
    10ae:	83 30       	cpi	r24, 0x03	; 3
    10b0:	91 05       	cpc	r25, r1
    10b2:	b9 f1       	breq	.+110    	; 0x1122 <DIO_U8GetPinValue+0xc0>
    10b4:	47 c0       	rjmp	.+142    	; 0x1144 <DIO_U8GetPinValue+0xe2>
	{
			case 0: x=GET_BIT(PINA,Pin); break;
    10b6:	e9 e3       	ldi	r30, 0x39	; 57
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	88 2f       	mov	r24, r24
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	a9 01       	movw	r20, r18
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <DIO_U8GetPinValue+0x6c>
    10ca:	55 95       	asr	r21
    10cc:	47 95       	ror	r20
    10ce:	8a 95       	dec	r24
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <DIO_U8GetPinValue+0x68>
    10d2:	ca 01       	movw	r24, r20
    10d4:	81 70       	andi	r24, 0x01	; 1
    10d6:	89 83       	std	Y+1, r24	; 0x01
    10d8:	35 c0       	rjmp	.+106    	; 0x1144 <DIO_U8GetPinValue+0xe2>
			case 1: x=GET_BIT(PINB,Pin); break;
    10da:	e6 e3       	ldi	r30, 0x36	; 54
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	88 2f       	mov	r24, r24
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	a9 01       	movw	r20, r18
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <DIO_U8GetPinValue+0x90>
    10ee:	55 95       	asr	r21
    10f0:	47 95       	ror	r20
    10f2:	8a 95       	dec	r24
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <DIO_U8GetPinValue+0x8c>
    10f6:	ca 01       	movw	r24, r20
    10f8:	81 70       	andi	r24, 0x01	; 1
    10fa:	89 83       	std	Y+1, r24	; 0x01
    10fc:	23 c0       	rjmp	.+70     	; 0x1144 <DIO_U8GetPinValue+0xe2>
			case 2: x=GET_BIT(PINC,Pin); break;
    10fe:	e3 e3       	ldi	r30, 0x33	; 51
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	88 2f       	mov	r24, r24
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	a9 01       	movw	r20, r18
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <DIO_U8GetPinValue+0xb4>
    1112:	55 95       	asr	r21
    1114:	47 95       	ror	r20
    1116:	8a 95       	dec	r24
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <DIO_U8GetPinValue+0xb0>
    111a:	ca 01       	movw	r24, r20
    111c:	81 70       	andi	r24, 0x01	; 1
    111e:	89 83       	std	Y+1, r24	; 0x01
    1120:	11 c0       	rjmp	.+34     	; 0x1144 <DIO_U8GetPinValue+0xe2>
			case 3: x=GET_BIT(PIND,Pin); break;		
    1122:	e0 e3       	ldi	r30, 0x30	; 48
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	88 2f       	mov	r24, r24
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	a9 01       	movw	r20, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <DIO_U8GetPinValue+0xd8>
    1136:	55 95       	asr	r21
    1138:	47 95       	ror	r20
    113a:	8a 95       	dec	r24
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <DIO_U8GetPinValue+0xd4>
    113e:	ca 01       	movw	r24, r20
    1140:	81 70       	andi	r24, 0x01	; 1
    1142:	89 83       	std	Y+1, r24	; 0x01
	}
	return x;
    1144:	89 81       	ldd	r24, Y+1	; 0x01
}
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	08 95       	ret

00001156 <DIO_VoidSetPortDirection>:
void DIO_VoidSetPortDirection(u8 Port, u8 Direction)
{
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	00 d0       	rcall	.+0      	; 0x115c <DIO_VoidSetPortDirection+0x6>
    115c:	00 d0       	rcall	.+0      	; 0x115e <DIO_VoidSetPortDirection+0x8>
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	89 83       	std	Y+1, r24	; 0x01
    1164:	6a 83       	std	Y+2, r22	; 0x02
		switch(Port)
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	3c 83       	std	Y+4, r19	; 0x04
    116e:	2b 83       	std	Y+3, r18	; 0x03
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	9c 81       	ldd	r25, Y+4	; 0x04
    1174:	81 30       	cpi	r24, 0x01	; 1
    1176:	91 05       	cpc	r25, r1
    1178:	d1 f0       	breq	.+52     	; 0x11ae <DIO_VoidSetPortDirection+0x58>
    117a:	2b 81       	ldd	r18, Y+3	; 0x03
    117c:	3c 81       	ldd	r19, Y+4	; 0x04
    117e:	22 30       	cpi	r18, 0x02	; 2
    1180:	31 05       	cpc	r19, r1
    1182:	2c f4       	brge	.+10     	; 0x118e <DIO_VoidSetPortDirection+0x38>
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	9c 81       	ldd	r25, Y+4	; 0x04
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	61 f0       	breq	.+24     	; 0x11a4 <DIO_VoidSetPortDirection+0x4e>
    118c:	1e c0       	rjmp	.+60     	; 0x11ca <DIO_VoidSetPortDirection+0x74>
    118e:	2b 81       	ldd	r18, Y+3	; 0x03
    1190:	3c 81       	ldd	r19, Y+4	; 0x04
    1192:	22 30       	cpi	r18, 0x02	; 2
    1194:	31 05       	cpc	r19, r1
    1196:	81 f0       	breq	.+32     	; 0x11b8 <DIO_VoidSetPortDirection+0x62>
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	9c 81       	ldd	r25, Y+4	; 0x04
    119c:	83 30       	cpi	r24, 0x03	; 3
    119e:	91 05       	cpc	r25, r1
    11a0:	81 f0       	breq	.+32     	; 0x11c2 <DIO_VoidSetPortDirection+0x6c>
    11a2:	13 c0       	rjmp	.+38     	; 0x11ca <DIO_VoidSetPortDirection+0x74>
		{
			case 0: DDRA= Direction; break;
    11a4:	ea e3       	ldi	r30, 0x3A	; 58
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	80 83       	st	Z, r24
    11ac:	0e c0       	rjmp	.+28     	; 0x11ca <DIO_VoidSetPortDirection+0x74>
			case 1: DDRB= Direction; break;
    11ae:	e7 e3       	ldi	r30, 0x37	; 55
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	80 83       	st	Z, r24
    11b6:	09 c0       	rjmp	.+18     	; 0x11ca <DIO_VoidSetPortDirection+0x74>
			case 2: DDRC= Direction; break;
    11b8:	e4 e3       	ldi	r30, 0x34	; 52
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	80 83       	st	Z, r24
    11c0:	04 c0       	rjmp	.+8      	; 0x11ca <DIO_VoidSetPortDirection+0x74>
			case 3: DDRD= Direction; break;
    11c2:	e1 e3       	ldi	r30, 0x31	; 49
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	80 83       	st	Z, r24
		}
}
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <DIO_VoidSetPortValue>:
void DIO_VoidSetPortValue(u8 Port, u8 Value)
{
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	00 d0       	rcall	.+0      	; 0x11de <DIO_VoidSetPortValue+0x6>
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <DIO_VoidSetPortValue+0x8>
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	89 83       	std	Y+1, r24	; 0x01
    11e6:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	3c 83       	std	Y+4, r19	; 0x04
    11f0:	2b 83       	std	Y+3, r18	; 0x03
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	9c 81       	ldd	r25, Y+4	; 0x04
    11f6:	81 30       	cpi	r24, 0x01	; 1
    11f8:	91 05       	cpc	r25, r1
    11fa:	d1 f0       	breq	.+52     	; 0x1230 <DIO_VoidSetPortValue+0x58>
    11fc:	2b 81       	ldd	r18, Y+3	; 0x03
    11fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1200:	22 30       	cpi	r18, 0x02	; 2
    1202:	31 05       	cpc	r19, r1
    1204:	2c f4       	brge	.+10     	; 0x1210 <DIO_VoidSetPortValue+0x38>
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	9c 81       	ldd	r25, Y+4	; 0x04
    120a:	00 97       	sbiw	r24, 0x00	; 0
    120c:	61 f0       	breq	.+24     	; 0x1226 <DIO_VoidSetPortValue+0x4e>
    120e:	1e c0       	rjmp	.+60     	; 0x124c <DIO_VoidSetPortValue+0x74>
    1210:	2b 81       	ldd	r18, Y+3	; 0x03
    1212:	3c 81       	ldd	r19, Y+4	; 0x04
    1214:	22 30       	cpi	r18, 0x02	; 2
    1216:	31 05       	cpc	r19, r1
    1218:	81 f0       	breq	.+32     	; 0x123a <DIO_VoidSetPortValue+0x62>
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	9c 81       	ldd	r25, Y+4	; 0x04
    121e:	83 30       	cpi	r24, 0x03	; 3
    1220:	91 05       	cpc	r25, r1
    1222:	81 f0       	breq	.+32     	; 0x1244 <DIO_VoidSetPortValue+0x6c>
    1224:	13 c0       	rjmp	.+38     	; 0x124c <DIO_VoidSetPortValue+0x74>
	{
		case 0: PORTA= Value; break;
    1226:	eb e3       	ldi	r30, 0x3B	; 59
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	80 83       	st	Z, r24
    122e:	0e c0       	rjmp	.+28     	; 0x124c <DIO_VoidSetPortValue+0x74>
		case 1: PORTB= Value; break;
    1230:	e8 e3       	ldi	r30, 0x38	; 56
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	80 83       	st	Z, r24
    1238:	09 c0       	rjmp	.+18     	; 0x124c <DIO_VoidSetPortValue+0x74>
		case 2: PORTC= Value; break;
    123a:	e5 e3       	ldi	r30, 0x35	; 53
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	80 83       	st	Z, r24
    1242:	04 c0       	rjmp	.+8      	; 0x124c <DIO_VoidSetPortValue+0x74>
		case 3: PORTD= Value; break;
    1244:	e2 e3       	ldi	r30, 0x32	; 50
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	80 83       	st	Z, r24
	}
}
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	cf 91       	pop	r28
    1256:	df 91       	pop	r29
    1258:	08 95       	ret

0000125a <DIO_VoidTogglePin>:
void DIO_VoidTogglePin(u8 Port,u8 Pin)
{
    125a:	df 93       	push	r29
    125c:	cf 93       	push	r28
    125e:	00 d0       	rcall	.+0      	; 0x1260 <DIO_VoidTogglePin+0x6>
    1260:	00 d0       	rcall	.+0      	; 0x1262 <DIO_VoidTogglePin+0x8>
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
    1266:	89 83       	std	Y+1, r24	; 0x01
    1268:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	3c 83       	std	Y+4, r19	; 0x04
    1272:	2b 83       	std	Y+3, r18	; 0x03
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	9c 81       	ldd	r25, Y+4	; 0x04
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	91 05       	cpc	r25, r1
    127c:	49 f1       	breq	.+82     	; 0x12d0 <DIO_VoidTogglePin+0x76>
    127e:	2b 81       	ldd	r18, Y+3	; 0x03
    1280:	3c 81       	ldd	r19, Y+4	; 0x04
    1282:	22 30       	cpi	r18, 0x02	; 2
    1284:	31 05       	cpc	r19, r1
    1286:	2c f4       	brge	.+10     	; 0x1292 <DIO_VoidTogglePin+0x38>
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	9c 81       	ldd	r25, Y+4	; 0x04
    128c:	00 97       	sbiw	r24, 0x00	; 0
    128e:	61 f0       	breq	.+24     	; 0x12a8 <DIO_VoidTogglePin+0x4e>
    1290:	5a c0       	rjmp	.+180    	; 0x1346 <DIO_VoidTogglePin+0xec>
    1292:	2b 81       	ldd	r18, Y+3	; 0x03
    1294:	3c 81       	ldd	r19, Y+4	; 0x04
    1296:	22 30       	cpi	r18, 0x02	; 2
    1298:	31 05       	cpc	r19, r1
    129a:	71 f1       	breq	.+92     	; 0x12f8 <DIO_VoidTogglePin+0x9e>
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	9c 81       	ldd	r25, Y+4	; 0x04
    12a0:	83 30       	cpi	r24, 0x03	; 3
    12a2:	91 05       	cpc	r25, r1
    12a4:	e9 f1       	breq	.+122    	; 0x1320 <DIO_VoidTogglePin+0xc6>
    12a6:	4f c0       	rjmp	.+158    	; 0x1346 <DIO_VoidTogglePin+0xec>
	{
		case 0:TGL_Bit(PORTA,Pin); break;
    12a8:	ab e3       	ldi	r26, 0x3B	; 59
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	eb e3       	ldi	r30, 0x3B	; 59
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	48 2f       	mov	r20, r24
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	02 2e       	mov	r0, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <DIO_VoidTogglePin+0x6c>
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	0a 94       	dec	r0
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <DIO_VoidTogglePin+0x68>
    12ca:	84 27       	eor	r24, r20
    12cc:	8c 93       	st	X, r24
    12ce:	3b c0       	rjmp	.+118    	; 0x1346 <DIO_VoidTogglePin+0xec>
		case 1:TGL_Bit(PORTB,Pin); break;
    12d0:	a8 e3       	ldi	r26, 0x38	; 56
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e8 e3       	ldi	r30, 0x38	; 56
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	48 2f       	mov	r20, r24
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 2e       	mov	r0, r18
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <DIO_VoidTogglePin+0x94>
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	0a 94       	dec	r0
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <DIO_VoidTogglePin+0x90>
    12f2:	84 27       	eor	r24, r20
    12f4:	8c 93       	st	X, r24
    12f6:	27 c0       	rjmp	.+78     	; 0x1346 <DIO_VoidTogglePin+0xec>
		case 2:TGL_Bit(PORTC,Pin); break;
    12f8:	a5 e3       	ldi	r26, 0x35	; 53
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e5 e3       	ldi	r30, 0x35	; 53
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	48 2f       	mov	r20, r24
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	02 2e       	mov	r0, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <DIO_VoidTogglePin+0xbc>
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <DIO_VoidTogglePin+0xb8>
    131a:	84 27       	eor	r24, r20
    131c:	8c 93       	st	X, r24
    131e:	13 c0       	rjmp	.+38     	; 0x1346 <DIO_VoidTogglePin+0xec>
		case 3:TGL_Bit(PORTD,Pin); break;
    1320:	a2 e3       	ldi	r26, 0x32	; 50
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e2 e3       	ldi	r30, 0x32	; 50
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	48 2f       	mov	r20, r24
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 2e       	mov	r0, r18
    1338:	02 c0       	rjmp	.+4      	; 0x133e <DIO_VoidTogglePin+0xe4>
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	0a 94       	dec	r0
    1340:	e2 f7       	brpl	.-8      	; 0x133a <DIO_VoidTogglePin+0xe0>
    1342:	84 27       	eor	r24, r20
    1344:	8c 93       	st	X, r24
	}
}
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	08 95       	ret

00001354 <KEYPAD_VoidInit>:
#include "BIT_Math.h"
#include "DIO_Interface.h"
#include <avr/delay.h>

void KEYPAD_VoidInit(void)
{
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
	DIO_VoidSetPortDirection(3,0b00001111);
    135c:	83 e0       	ldi	r24, 0x03	; 3
    135e:	6f e0       	ldi	r22, 0x0F	; 15
    1360:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_VoidSetPortDirection>
	DIO_VoidSetPortValue(3,0b11111111);
    1364:	83 e0       	ldi	r24, 0x03	; 3
    1366:	6f ef       	ldi	r22, 0xFF	; 255
    1368:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_VoidSetPortValue>
}
    136c:	cf 91       	pop	r28
    136e:	df 91       	pop	r29
    1370:	08 95       	ret

00001372 <KEYPAD_VoidGetNumber>:

u8 KEYPAD_VoidGetNumber(void)
{
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	62 97       	sbiw	r28, 0x12	; 18
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	f8 94       	cli
    1380:	de bf       	out	0x3e, r29	; 62
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	cd bf       	out	0x3d, r28	; 61
	u8 x=0;
    1386:	1a 8a       	std	Y+18, r1	; 0x12
	u8 pressed_key=100;
    1388:	84 e6       	ldi	r24, 0x64	; 100
    138a:	89 8b       	std	Y+17, r24	; 0x11
	for(u8 column=0; column<4;column++)
    138c:	18 8a       	std	Y+16, r1	; 0x10
    138e:	ab c0       	rjmp	.+342    	; 0x14e6 <KEYPAD_VoidGetNumber+0x174>
	{
		DIO_VoidSetPinValue(3,column,0);
    1390:	83 e0       	ldi	r24, 0x03	; 3
    1392:	68 89       	ldd	r22, Y+16	; 0x10
    1394:	40 e0       	ldi	r20, 0x00	; 0
    1396:	0e 94 31 07 	call	0xe62	; 0xe62 <DIO_VoidSetPinValue>
		for(u8 row=0;row<4;row++)
    139a:	1f 86       	std	Y+15, r1	; 0x0f
    139c:	98 c0       	rjmp	.+304    	; 0x14ce <KEYPAD_VoidGetNumber+0x15c>
		{
			x = DIO_U8GetPinValue(3,(row+4));
    139e:	8f 85       	ldd	r24, Y+15	; 0x0f
    13a0:	98 2f       	mov	r25, r24
    13a2:	9c 5f       	subi	r25, 0xFC	; 252
    13a4:	83 e0       	ldi	r24, 0x03	; 3
    13a6:	69 2f       	mov	r22, r25
    13a8:	0e 94 31 08 	call	0x1062	; 0x1062 <DIO_U8GetPinValue>
    13ac:	8a 8b       	std	Y+18, r24	; 0x12
			if(0==x)
    13ae:	8a 89       	ldd	r24, Y+18	; 0x12
    13b0:	88 23       	and	r24, r24
    13b2:	09 f0       	breq	.+2      	; 0x13b6 <KEYPAD_VoidGetNumber+0x44>
    13b4:	89 c0       	rjmp	.+274    	; 0x14c8 <KEYPAD_VoidGetNumber+0x156>
			{
				pressed_key=((row*4)+column);
    13b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    13b8:	88 2f       	mov	r24, r24
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	88 0f       	add	r24, r24
    13c2:	99 1f       	adc	r25, r25
    13c4:	98 2f       	mov	r25, r24
    13c6:	88 89       	ldd	r24, Y+16	; 0x10
    13c8:	89 0f       	add	r24, r25
    13ca:	89 8b       	std	Y+17, r24	; 0x11
    13cc:	08 c0       	rjmp	.+16     	; 0x13de <KEYPAD_VoidGetNumber+0x6c>
				while(0==x)
				{
					x=DIO_U8GetPinValue(3,(row+4));
    13ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    13d0:	98 2f       	mov	r25, r24
    13d2:	9c 5f       	subi	r25, 0xFC	; 252
    13d4:	83 e0       	ldi	r24, 0x03	; 3
    13d6:	69 2f       	mov	r22, r25
    13d8:	0e 94 31 08 	call	0x1062	; 0x1062 <DIO_U8GetPinValue>
    13dc:	8a 8b       	std	Y+18, r24	; 0x12
		{
			x = DIO_U8GetPinValue(3,(row+4));
			if(0==x)
			{
				pressed_key=((row*4)+column);
				while(0==x)
    13de:	8a 89       	ldd	r24, Y+18	; 0x12
    13e0:	88 23       	and	r24, r24
    13e2:	a9 f3       	breq	.-22     	; 0x13ce <KEYPAD_VoidGetNumber+0x5c>
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	a0 e0       	ldi	r26, 0x00	; 0
    13ea:	b0 e4       	ldi	r27, 0x40	; 64
    13ec:	8b 87       	std	Y+11, r24	; 0x0b
    13ee:	9c 87       	std	Y+12, r25	; 0x0c
    13f0:	ad 87       	std	Y+13, r26	; 0x0d
    13f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    13f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    13f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	4a ef       	ldi	r20, 0xFA	; 250
    1402:	54 e4       	ldi	r21, 0x44	; 68
    1404:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	8f 83       	std	Y+7, r24	; 0x07
    140e:	98 87       	std	Y+8, r25	; 0x08
    1410:	a9 87       	std	Y+9, r26	; 0x09
    1412:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1414:	6f 81       	ldd	r22, Y+7	; 0x07
    1416:	78 85       	ldd	r23, Y+8	; 0x08
    1418:	89 85       	ldd	r24, Y+9	; 0x09
    141a:	9a 85       	ldd	r25, Y+10	; 0x0a
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	40 e8       	ldi	r20, 0x80	; 128
    1422:	5f e3       	ldi	r21, 0x3F	; 63
    1424:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1428:	88 23       	and	r24, r24
    142a:	2c f4       	brge	.+10     	; 0x1436 <KEYPAD_VoidGetNumber+0xc4>
		__ticks = 1;
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	9e 83       	std	Y+6, r25	; 0x06
    1432:	8d 83       	std	Y+5, r24	; 0x05
    1434:	3f c0       	rjmp	.+126    	; 0x14b4 <KEYPAD_VoidGetNumber+0x142>
	else if (__tmp > 65535)
    1436:	6f 81       	ldd	r22, Y+7	; 0x07
    1438:	78 85       	ldd	r23, Y+8	; 0x08
    143a:	89 85       	ldd	r24, Y+9	; 0x09
    143c:	9a 85       	ldd	r25, Y+10	; 0x0a
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	3f ef       	ldi	r19, 0xFF	; 255
    1442:	4f e7       	ldi	r20, 0x7F	; 127
    1444:	57 e4       	ldi	r21, 0x47	; 71
    1446:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    144a:	18 16       	cp	r1, r24
    144c:	4c f5       	brge	.+82     	; 0x14a0 <KEYPAD_VoidGetNumber+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    144e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1450:	7c 85       	ldd	r23, Y+12	; 0x0c
    1452:	8d 85       	ldd	r24, Y+13	; 0x0d
    1454:	9e 85       	ldd	r25, Y+14	; 0x0e
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e2       	ldi	r20, 0x20	; 32
    145c:	51 e4       	ldi	r21, 0x41	; 65
    145e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	bc 01       	movw	r22, r24
    1468:	cd 01       	movw	r24, r26
    146a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	9e 83       	std	Y+6, r25	; 0x06
    1474:	8d 83       	std	Y+5, r24	; 0x05
    1476:	0f c0       	rjmp	.+30     	; 0x1496 <KEYPAD_VoidGetNumber+0x124>
    1478:	88 ec       	ldi	r24, 0xC8	; 200
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	9c 83       	std	Y+4, r25	; 0x04
    147e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	9c 81       	ldd	r25, Y+4	; 0x04
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	f1 f7       	brne	.-4      	; 0x1484 <KEYPAD_VoidGetNumber+0x112>
    1488:	9c 83       	std	Y+4, r25	; 0x04
    148a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    148c:	8d 81       	ldd	r24, Y+5	; 0x05
    148e:	9e 81       	ldd	r25, Y+6	; 0x06
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	9e 83       	std	Y+6, r25	; 0x06
    1494:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1496:	8d 81       	ldd	r24, Y+5	; 0x05
    1498:	9e 81       	ldd	r25, Y+6	; 0x06
    149a:	00 97       	sbiw	r24, 0x00	; 0
    149c:	69 f7       	brne	.-38     	; 0x1478 <KEYPAD_VoidGetNumber+0x106>
    149e:	14 c0       	rjmp	.+40     	; 0x14c8 <KEYPAD_VoidGetNumber+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a0:	6f 81       	ldd	r22, Y+7	; 0x07
    14a2:	78 85       	ldd	r23, Y+8	; 0x08
    14a4:	89 85       	ldd	r24, Y+9	; 0x09
    14a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	9e 83       	std	Y+6, r25	; 0x06
    14b2:	8d 83       	std	Y+5, r24	; 0x05
    14b4:	8d 81       	ldd	r24, Y+5	; 0x05
    14b6:	9e 81       	ldd	r25, Y+6	; 0x06
    14b8:	9a 83       	std	Y+2, r25	; 0x02
    14ba:	89 83       	std	Y+1, r24	; 0x01
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	9a 81       	ldd	r25, Y+2	; 0x02
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	f1 f7       	brne	.-4      	; 0x14c0 <KEYPAD_VoidGetNumber+0x14e>
    14c4:	9a 83       	std	Y+2, r25	; 0x02
    14c6:	89 83       	std	Y+1, r24	; 0x01
	u8 x=0;
	u8 pressed_key=100;
	for(u8 column=0; column<4;column++)
	{
		DIO_VoidSetPinValue(3,column,0);
		for(u8 row=0;row<4;row++)
    14c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    14ca:	8f 5f       	subi	r24, 0xFF	; 255
    14cc:	8f 87       	std	Y+15, r24	; 0x0f
    14ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    14d0:	84 30       	cpi	r24, 0x04	; 4
    14d2:	08 f4       	brcc	.+2      	; 0x14d6 <KEYPAD_VoidGetNumber+0x164>
    14d4:	64 cf       	rjmp	.-312    	; 0x139e <KEYPAD_VoidGetNumber+0x2c>
					x=DIO_U8GetPinValue(3,(row+4));
				}
				_delay_ms(2);
			}
		}
		DIO_VoidSetPinValue(3,column,1);
    14d6:	83 e0       	ldi	r24, 0x03	; 3
    14d8:	68 89       	ldd	r22, Y+16	; 0x10
    14da:	41 e0       	ldi	r20, 0x01	; 1
    14dc:	0e 94 31 07 	call	0xe62	; 0xe62 <DIO_VoidSetPinValue>

u8 KEYPAD_VoidGetNumber(void)
{
	u8 x=0;
	u8 pressed_key=100;
	for(u8 column=0; column<4;column++)
    14e0:	88 89       	ldd	r24, Y+16	; 0x10
    14e2:	8f 5f       	subi	r24, 0xFF	; 255
    14e4:	88 8b       	std	Y+16, r24	; 0x10
    14e6:	88 89       	ldd	r24, Y+16	; 0x10
    14e8:	84 30       	cpi	r24, 0x04	; 4
    14ea:	08 f4       	brcc	.+2      	; 0x14ee <KEYPAD_VoidGetNumber+0x17c>
    14ec:	51 cf       	rjmp	.-350    	; 0x1390 <KEYPAD_VoidGetNumber+0x1e>
				_delay_ms(2);
			}
		}
		DIO_VoidSetPinValue(3,column,1);
	}
	return pressed_key;
    14ee:	89 89       	ldd	r24, Y+17	; 0x11
}
    14f0:	62 96       	adiw	r28, 0x12	; 18
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	f8 94       	cli
    14f6:	de bf       	out	0x3e, r29	; 62
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	cd bf       	out	0x3d, r28	; 61
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	08 95       	ret

00001502 <LCD_VoidWriteCommend>:
#include "DIO_Interface.h"



void LCD_VoidWriteCommend (u8 Commend)
{
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	6d 97       	sbiw	r28, 0x1d	; 29
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	cd bf       	out	0x3d, r28	; 61
    1516:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_VoidSetPinValue(0,0,0);//RS to commend
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	60 e0       	ldi	r22, 0x00	; 0
    151c:	40 e0       	ldi	r20, 0x00	; 0
    151e:	0e 94 31 07 	call	0xe62	; 0xe62 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(0,1,0);//Rw to commend
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	61 e0       	ldi	r22, 0x01	; 1
    1526:	40 e0       	ldi	r20, 0x00	; 0
    1528:	0e 94 31 07 	call	0xe62	; 0xe62 <DIO_VoidSetPinValue>
	DIO_VoidSetPortValue(2, Commend);//send data
    152c:	82 e0       	ldi	r24, 0x02	; 2
    152e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1530:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_VoidSetPortValue>
	DIO_VoidSetPinValue(0,2,1);
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	62 e0       	ldi	r22, 0x02	; 2
    1538:	41 e0       	ldi	r20, 0x01	; 1
    153a:	0e 94 31 07 	call	0xe62	; 0xe62 <DIO_VoidSetPinValue>
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	a0 e8       	ldi	r26, 0x80	; 128
    1544:	bf e3       	ldi	r27, 0x3F	; 63
    1546:	89 8f       	std	Y+25, r24	; 0x19
    1548:	9a 8f       	std	Y+26, r25	; 0x1a
    154a:	ab 8f       	std	Y+27, r26	; 0x1b
    154c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    154e:	69 8d       	ldd	r22, Y+25	; 0x19
    1550:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1552:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1554:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	4a ef       	ldi	r20, 0xFA	; 250
    155c:	54 e4       	ldi	r21, 0x44	; 68
    155e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1562:	dc 01       	movw	r26, r24
    1564:	cb 01       	movw	r24, r22
    1566:	8d 8b       	std	Y+21, r24	; 0x15
    1568:	9e 8b       	std	Y+22, r25	; 0x16
    156a:	af 8b       	std	Y+23, r26	; 0x17
    156c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    156e:	6d 89       	ldd	r22, Y+21	; 0x15
    1570:	7e 89       	ldd	r23, Y+22	; 0x16
    1572:	8f 89       	ldd	r24, Y+23	; 0x17
    1574:	98 8d       	ldd	r25, Y+24	; 0x18
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	40 e8       	ldi	r20, 0x80	; 128
    157c:	5f e3       	ldi	r21, 0x3F	; 63
    157e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1582:	88 23       	and	r24, r24
    1584:	2c f4       	brge	.+10     	; 0x1590 <LCD_VoidWriteCommend+0x8e>
		__ticks = 1;
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	9c 8b       	std	Y+20, r25	; 0x14
    158c:	8b 8b       	std	Y+19, r24	; 0x13
    158e:	3f c0       	rjmp	.+126    	; 0x160e <LCD_VoidWriteCommend+0x10c>
	else if (__tmp > 65535)
    1590:	6d 89       	ldd	r22, Y+21	; 0x15
    1592:	7e 89       	ldd	r23, Y+22	; 0x16
    1594:	8f 89       	ldd	r24, Y+23	; 0x17
    1596:	98 8d       	ldd	r25, Y+24	; 0x18
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	3f ef       	ldi	r19, 0xFF	; 255
    159c:	4f e7       	ldi	r20, 0x7F	; 127
    159e:	57 e4       	ldi	r21, 0x47	; 71
    15a0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15a4:	18 16       	cp	r1, r24
    15a6:	4c f5       	brge	.+82     	; 0x15fa <LCD_VoidWriteCommend+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15a8:	69 8d       	ldd	r22, Y+25	; 0x19
    15aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	40 e2       	ldi	r20, 0x20	; 32
    15b6:	51 e4       	ldi	r21, 0x41	; 65
    15b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15bc:	dc 01       	movw	r26, r24
    15be:	cb 01       	movw	r24, r22
    15c0:	bc 01       	movw	r22, r24
    15c2:	cd 01       	movw	r24, r26
    15c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	9c 8b       	std	Y+20, r25	; 0x14
    15ce:	8b 8b       	std	Y+19, r24	; 0x13
    15d0:	0f c0       	rjmp	.+30     	; 0x15f0 <LCD_VoidWriteCommend+0xee>
    15d2:	88 ec       	ldi	r24, 0xC8	; 200
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	9a 8b       	std	Y+18, r25	; 0x12
    15d8:	89 8b       	std	Y+17, r24	; 0x11
    15da:	89 89       	ldd	r24, Y+17	; 0x11
    15dc:	9a 89       	ldd	r25, Y+18	; 0x12
    15de:	01 97       	sbiw	r24, 0x01	; 1
    15e0:	f1 f7       	brne	.-4      	; 0x15de <LCD_VoidWriteCommend+0xdc>
    15e2:	9a 8b       	std	Y+18, r25	; 0x12
    15e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15e6:	8b 89       	ldd	r24, Y+19	; 0x13
    15e8:	9c 89       	ldd	r25, Y+20	; 0x14
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	9c 8b       	std	Y+20, r25	; 0x14
    15ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15f0:	8b 89       	ldd	r24, Y+19	; 0x13
    15f2:	9c 89       	ldd	r25, Y+20	; 0x14
    15f4:	00 97       	sbiw	r24, 0x00	; 0
    15f6:	69 f7       	brne	.-38     	; 0x15d2 <LCD_VoidWriteCommend+0xd0>
    15f8:	14 c0       	rjmp	.+40     	; 0x1622 <LCD_VoidWriteCommend+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15fa:	6d 89       	ldd	r22, Y+21	; 0x15
    15fc:	7e 89       	ldd	r23, Y+22	; 0x16
    15fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1600:	98 8d       	ldd	r25, Y+24	; 0x18
    1602:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	9c 8b       	std	Y+20, r25	; 0x14
    160c:	8b 8b       	std	Y+19, r24	; 0x13
    160e:	8b 89       	ldd	r24, Y+19	; 0x13
    1610:	9c 89       	ldd	r25, Y+20	; 0x14
    1612:	98 8b       	std	Y+16, r25	; 0x10
    1614:	8f 87       	std	Y+15, r24	; 0x0f
    1616:	8f 85       	ldd	r24, Y+15	; 0x0f
    1618:	98 89       	ldd	r25, Y+16	; 0x10
    161a:	01 97       	sbiw	r24, 0x01	; 1
    161c:	f1 f7       	brne	.-4      	; 0x161a <LCD_VoidWriteCommend+0x118>
    161e:	98 8b       	std	Y+16, r25	; 0x10
    1620:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VoidSetPinValue(0,2,0);
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	62 e0       	ldi	r22, 0x02	; 2
    1626:	40 e0       	ldi	r20, 0x00	; 0
    1628:	0e 94 31 07 	call	0xe62	; 0xe62 <DIO_VoidSetPinValue>
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	a0 e0       	ldi	r26, 0x00	; 0
    1632:	b0 e4       	ldi	r27, 0x40	; 64
    1634:	8b 87       	std	Y+11, r24	; 0x0b
    1636:	9c 87       	std	Y+12, r25	; 0x0c
    1638:	ad 87       	std	Y+13, r26	; 0x0d
    163a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    163c:	6b 85       	ldd	r22, Y+11	; 0x0b
    163e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1640:	8d 85       	ldd	r24, Y+13	; 0x0d
    1642:	9e 85       	ldd	r25, Y+14	; 0x0e
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	4a ef       	ldi	r20, 0xFA	; 250
    164a:	54 e4       	ldi	r21, 0x44	; 68
    164c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	8f 83       	std	Y+7, r24	; 0x07
    1656:	98 87       	std	Y+8, r25	; 0x08
    1658:	a9 87       	std	Y+9, r26	; 0x09
    165a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    165c:	6f 81       	ldd	r22, Y+7	; 0x07
    165e:	78 85       	ldd	r23, Y+8	; 0x08
    1660:	89 85       	ldd	r24, Y+9	; 0x09
    1662:	9a 85       	ldd	r25, Y+10	; 0x0a
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	40 e8       	ldi	r20, 0x80	; 128
    166a:	5f e3       	ldi	r21, 0x3F	; 63
    166c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1670:	88 23       	and	r24, r24
    1672:	2c f4       	brge	.+10     	; 0x167e <LCD_VoidWriteCommend+0x17c>
		__ticks = 1;
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	9e 83       	std	Y+6, r25	; 0x06
    167a:	8d 83       	std	Y+5, r24	; 0x05
    167c:	3f c0       	rjmp	.+126    	; 0x16fc <LCD_VoidWriteCommend+0x1fa>
	else if (__tmp > 65535)
    167e:	6f 81       	ldd	r22, Y+7	; 0x07
    1680:	78 85       	ldd	r23, Y+8	; 0x08
    1682:	89 85       	ldd	r24, Y+9	; 0x09
    1684:	9a 85       	ldd	r25, Y+10	; 0x0a
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	3f ef       	ldi	r19, 0xFF	; 255
    168a:	4f e7       	ldi	r20, 0x7F	; 127
    168c:	57 e4       	ldi	r21, 0x47	; 71
    168e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1692:	18 16       	cp	r1, r24
    1694:	4c f5       	brge	.+82     	; 0x16e8 <LCD_VoidWriteCommend+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1696:	6b 85       	ldd	r22, Y+11	; 0x0b
    1698:	7c 85       	ldd	r23, Y+12	; 0x0c
    169a:	8d 85       	ldd	r24, Y+13	; 0x0d
    169c:	9e 85       	ldd	r25, Y+14	; 0x0e
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	40 e2       	ldi	r20, 0x20	; 32
    16a4:	51 e4       	ldi	r21, 0x41	; 65
    16a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	bc 01       	movw	r22, r24
    16b0:	cd 01       	movw	r24, r26
    16b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	9e 83       	std	Y+6, r25	; 0x06
    16bc:	8d 83       	std	Y+5, r24	; 0x05
    16be:	0f c0       	rjmp	.+30     	; 0x16de <LCD_VoidWriteCommend+0x1dc>
    16c0:	88 ec       	ldi	r24, 0xC8	; 200
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	9c 83       	std	Y+4, r25	; 0x04
    16c6:	8b 83       	std	Y+3, r24	; 0x03
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	9c 81       	ldd	r25, Y+4	; 0x04
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	f1 f7       	brne	.-4      	; 0x16cc <LCD_VoidWriteCommend+0x1ca>
    16d0:	9c 83       	std	Y+4, r25	; 0x04
    16d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d4:	8d 81       	ldd	r24, Y+5	; 0x05
    16d6:	9e 81       	ldd	r25, Y+6	; 0x06
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	9e 83       	std	Y+6, r25	; 0x06
    16dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16de:	8d 81       	ldd	r24, Y+5	; 0x05
    16e0:	9e 81       	ldd	r25, Y+6	; 0x06
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	69 f7       	brne	.-38     	; 0x16c0 <LCD_VoidWriteCommend+0x1be>
    16e6:	14 c0       	rjmp	.+40     	; 0x1710 <LCD_VoidWriteCommend+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e8:	6f 81       	ldd	r22, Y+7	; 0x07
    16ea:	78 85       	ldd	r23, Y+8	; 0x08
    16ec:	89 85       	ldd	r24, Y+9	; 0x09
    16ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	9e 83       	std	Y+6, r25	; 0x06
    16fa:	8d 83       	std	Y+5, r24	; 0x05
    16fc:	8d 81       	ldd	r24, Y+5	; 0x05
    16fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1700:	9a 83       	std	Y+2, r25	; 0x02
    1702:	89 83       	std	Y+1, r24	; 0x01
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	9a 81       	ldd	r25, Y+2	; 0x02
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	f1 f7       	brne	.-4      	; 0x1708 <LCD_VoidWriteCommend+0x206>
    170c:	9a 83       	std	Y+2, r25	; 0x02
    170e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	
}
    1710:	6d 96       	adiw	r28, 0x1d	; 29
    1712:	0f b6       	in	r0, 0x3f	; 63
    1714:	f8 94       	cli
    1716:	de bf       	out	0x3e, r29	; 62
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	cd bf       	out	0x3d, r28	; 61
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	08 95       	ret

00001722 <LCD_VoidWriteData>:
void LCD_VoidWriteData (u8 Data)
{
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	6d 97       	sbiw	r28, 0x1d	; 29
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	de bf       	out	0x3e, r29	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	cd bf       	out	0x3d, r28	; 61
    1736:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_VoidSetPinValue(0,0,1);//RS to commend 
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	60 e0       	ldi	r22, 0x00	; 0
    173c:	41 e0       	ldi	r20, 0x01	; 1
    173e:	0e 94 31 07 	call	0xe62	; 0xe62 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(0,1,0);//Rw to commend
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	61 e0       	ldi	r22, 0x01	; 1
    1746:	40 e0       	ldi	r20, 0x00	; 0
    1748:	0e 94 31 07 	call	0xe62	; 0xe62 <DIO_VoidSetPinValue>
	DIO_VoidSetPortValue(2, Data);//send data
    174c:	82 e0       	ldi	r24, 0x02	; 2
    174e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1750:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_VoidSetPortValue>
	DIO_VoidSetPinValue(0,2,1);
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	62 e0       	ldi	r22, 0x02	; 2
    1758:	41 e0       	ldi	r20, 0x01	; 1
    175a:	0e 94 31 07 	call	0xe62	; 0xe62 <DIO_VoidSetPinValue>
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	a0 e8       	ldi	r26, 0x80	; 128
    1764:	bf e3       	ldi	r27, 0x3F	; 63
    1766:	89 8f       	std	Y+25, r24	; 0x19
    1768:	9a 8f       	std	Y+26, r25	; 0x1a
    176a:	ab 8f       	std	Y+27, r26	; 0x1b
    176c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    176e:	69 8d       	ldd	r22, Y+25	; 0x19
    1770:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1772:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1774:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	4a ef       	ldi	r20, 0xFA	; 250
    177c:	54 e4       	ldi	r21, 0x44	; 68
    177e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	8d 8b       	std	Y+21, r24	; 0x15
    1788:	9e 8b       	std	Y+22, r25	; 0x16
    178a:	af 8b       	std	Y+23, r26	; 0x17
    178c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    178e:	6d 89       	ldd	r22, Y+21	; 0x15
    1790:	7e 89       	ldd	r23, Y+22	; 0x16
    1792:	8f 89       	ldd	r24, Y+23	; 0x17
    1794:	98 8d       	ldd	r25, Y+24	; 0x18
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	40 e8       	ldi	r20, 0x80	; 128
    179c:	5f e3       	ldi	r21, 0x3F	; 63
    179e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17a2:	88 23       	and	r24, r24
    17a4:	2c f4       	brge	.+10     	; 0x17b0 <LCD_VoidWriteData+0x8e>
		__ticks = 1;
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	9c 8b       	std	Y+20, r25	; 0x14
    17ac:	8b 8b       	std	Y+19, r24	; 0x13
    17ae:	3f c0       	rjmp	.+126    	; 0x182e <LCD_VoidWriteData+0x10c>
	else if (__tmp > 65535)
    17b0:	6d 89       	ldd	r22, Y+21	; 0x15
    17b2:	7e 89       	ldd	r23, Y+22	; 0x16
    17b4:	8f 89       	ldd	r24, Y+23	; 0x17
    17b6:	98 8d       	ldd	r25, Y+24	; 0x18
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	3f ef       	ldi	r19, 0xFF	; 255
    17bc:	4f e7       	ldi	r20, 0x7F	; 127
    17be:	57 e4       	ldi	r21, 0x47	; 71
    17c0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17c4:	18 16       	cp	r1, r24
    17c6:	4c f5       	brge	.+82     	; 0x181a <LCD_VoidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c8:	69 8d       	ldd	r22, Y+25	; 0x19
    17ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	40 e2       	ldi	r20, 0x20	; 32
    17d6:	51 e4       	ldi	r21, 0x41	; 65
    17d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	bc 01       	movw	r22, r24
    17e2:	cd 01       	movw	r24, r26
    17e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	9c 8b       	std	Y+20, r25	; 0x14
    17ee:	8b 8b       	std	Y+19, r24	; 0x13
    17f0:	0f c0       	rjmp	.+30     	; 0x1810 <LCD_VoidWriteData+0xee>
    17f2:	88 ec       	ldi	r24, 0xC8	; 200
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	9a 8b       	std	Y+18, r25	; 0x12
    17f8:	89 8b       	std	Y+17, r24	; 0x11
    17fa:	89 89       	ldd	r24, Y+17	; 0x11
    17fc:	9a 89       	ldd	r25, Y+18	; 0x12
    17fe:	01 97       	sbiw	r24, 0x01	; 1
    1800:	f1 f7       	brne	.-4      	; 0x17fe <LCD_VoidWriteData+0xdc>
    1802:	9a 8b       	std	Y+18, r25	; 0x12
    1804:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1806:	8b 89       	ldd	r24, Y+19	; 0x13
    1808:	9c 89       	ldd	r25, Y+20	; 0x14
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	9c 8b       	std	Y+20, r25	; 0x14
    180e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1810:	8b 89       	ldd	r24, Y+19	; 0x13
    1812:	9c 89       	ldd	r25, Y+20	; 0x14
    1814:	00 97       	sbiw	r24, 0x00	; 0
    1816:	69 f7       	brne	.-38     	; 0x17f2 <LCD_VoidWriteData+0xd0>
    1818:	14 c0       	rjmp	.+40     	; 0x1842 <LCD_VoidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    181a:	6d 89       	ldd	r22, Y+21	; 0x15
    181c:	7e 89       	ldd	r23, Y+22	; 0x16
    181e:	8f 89       	ldd	r24, Y+23	; 0x17
    1820:	98 8d       	ldd	r25, Y+24	; 0x18
    1822:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	9c 8b       	std	Y+20, r25	; 0x14
    182c:	8b 8b       	std	Y+19, r24	; 0x13
    182e:	8b 89       	ldd	r24, Y+19	; 0x13
    1830:	9c 89       	ldd	r25, Y+20	; 0x14
    1832:	98 8b       	std	Y+16, r25	; 0x10
    1834:	8f 87       	std	Y+15, r24	; 0x0f
    1836:	8f 85       	ldd	r24, Y+15	; 0x0f
    1838:	98 89       	ldd	r25, Y+16	; 0x10
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	f1 f7       	brne	.-4      	; 0x183a <LCD_VoidWriteData+0x118>
    183e:	98 8b       	std	Y+16, r25	; 0x10
    1840:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VoidSetPinValue(0,2,0);
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	62 e0       	ldi	r22, 0x02	; 2
    1846:	40 e0       	ldi	r20, 0x00	; 0
    1848:	0e 94 31 07 	call	0xe62	; 0xe62 <DIO_VoidSetPinValue>
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	a0 e0       	ldi	r26, 0x00	; 0
    1852:	b0 e4       	ldi	r27, 0x40	; 64
    1854:	8b 87       	std	Y+11, r24	; 0x0b
    1856:	9c 87       	std	Y+12, r25	; 0x0c
    1858:	ad 87       	std	Y+13, r26	; 0x0d
    185a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    185c:	6b 85       	ldd	r22, Y+11	; 0x0b
    185e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1860:	8d 85       	ldd	r24, Y+13	; 0x0d
    1862:	9e 85       	ldd	r25, Y+14	; 0x0e
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	4a ef       	ldi	r20, 0xFA	; 250
    186a:	54 e4       	ldi	r21, 0x44	; 68
    186c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	8f 83       	std	Y+7, r24	; 0x07
    1876:	98 87       	std	Y+8, r25	; 0x08
    1878:	a9 87       	std	Y+9, r26	; 0x09
    187a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    187c:	6f 81       	ldd	r22, Y+7	; 0x07
    187e:	78 85       	ldd	r23, Y+8	; 0x08
    1880:	89 85       	ldd	r24, Y+9	; 0x09
    1882:	9a 85       	ldd	r25, Y+10	; 0x0a
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 e8       	ldi	r20, 0x80	; 128
    188a:	5f e3       	ldi	r21, 0x3F	; 63
    188c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1890:	88 23       	and	r24, r24
    1892:	2c f4       	brge	.+10     	; 0x189e <LCD_VoidWriteData+0x17c>
		__ticks = 1;
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	9e 83       	std	Y+6, r25	; 0x06
    189a:	8d 83       	std	Y+5, r24	; 0x05
    189c:	3f c0       	rjmp	.+126    	; 0x191c <LCD_VoidWriteData+0x1fa>
	else if (__tmp > 65535)
    189e:	6f 81       	ldd	r22, Y+7	; 0x07
    18a0:	78 85       	ldd	r23, Y+8	; 0x08
    18a2:	89 85       	ldd	r24, Y+9	; 0x09
    18a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	3f ef       	ldi	r19, 0xFF	; 255
    18aa:	4f e7       	ldi	r20, 0x7F	; 127
    18ac:	57 e4       	ldi	r21, 0x47	; 71
    18ae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18b2:	18 16       	cp	r1, r24
    18b4:	4c f5       	brge	.+82     	; 0x1908 <LCD_VoidWriteData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    18b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    18bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	40 e2       	ldi	r20, 0x20	; 32
    18c4:	51 e4       	ldi	r21, 0x41	; 65
    18c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	bc 01       	movw	r22, r24
    18d0:	cd 01       	movw	r24, r26
    18d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	9e 83       	std	Y+6, r25	; 0x06
    18dc:	8d 83       	std	Y+5, r24	; 0x05
    18de:	0f c0       	rjmp	.+30     	; 0x18fe <LCD_VoidWriteData+0x1dc>
    18e0:	88 ec       	ldi	r24, 0xC8	; 200
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	9c 83       	std	Y+4, r25	; 0x04
    18e6:	8b 83       	std	Y+3, r24	; 0x03
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	9c 81       	ldd	r25, Y+4	; 0x04
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	f1 f7       	brne	.-4      	; 0x18ec <LCD_VoidWriteData+0x1ca>
    18f0:	9c 83       	std	Y+4, r25	; 0x04
    18f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f4:	8d 81       	ldd	r24, Y+5	; 0x05
    18f6:	9e 81       	ldd	r25, Y+6	; 0x06
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	9e 83       	std	Y+6, r25	; 0x06
    18fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1900:	9e 81       	ldd	r25, Y+6	; 0x06
    1902:	00 97       	sbiw	r24, 0x00	; 0
    1904:	69 f7       	brne	.-38     	; 0x18e0 <LCD_VoidWriteData+0x1be>
    1906:	14 c0       	rjmp	.+40     	; 0x1930 <LCD_VoidWriteData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1908:	6f 81       	ldd	r22, Y+7	; 0x07
    190a:	78 85       	ldd	r23, Y+8	; 0x08
    190c:	89 85       	ldd	r24, Y+9	; 0x09
    190e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1910:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	9e 83       	std	Y+6, r25	; 0x06
    191a:	8d 83       	std	Y+5, r24	; 0x05
    191c:	8d 81       	ldd	r24, Y+5	; 0x05
    191e:	9e 81       	ldd	r25, Y+6	; 0x06
    1920:	9a 83       	std	Y+2, r25	; 0x02
    1922:	89 83       	std	Y+1, r24	; 0x01
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	9a 81       	ldd	r25, Y+2	; 0x02
    1928:	01 97       	sbiw	r24, 0x01	; 1
    192a:	f1 f7       	brne	.-4      	; 0x1928 <LCD_VoidWriteData+0x206>
    192c:	9a 83       	std	Y+2, r25	; 0x02
    192e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	
} 
    1930:	6d 96       	adiw	r28, 0x1d	; 29
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	f8 94       	cli
    1936:	de bf       	out	0x3e, r29	; 62
    1938:	0f be       	out	0x3f, r0	; 63
    193a:	cd bf       	out	0x3d, r28	; 61
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	08 95       	ret

00001942 <LCD_VoidInit>:
void LCD_VoidInit(void)
{
    1942:	df 93       	push	r29
    1944:	cf 93       	push	r28
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
    194a:	e8 97       	sbiw	r28, 0x38	; 56
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	f8 94       	cli
    1950:	de bf       	out	0x3e, r29	; 62
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	cd bf       	out	0x3d, r28	; 61
	DIO_VoidSetPinDirection(0,0,1);
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	60 e0       	ldi	r22, 0x00	; 0
    195a:	41 e0       	ldi	r20, 0x01	; 1
    195c:	0e 94 31 06 	call	0xc62	; 0xc62 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(0,1,1);
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	61 e0       	ldi	r22, 0x01	; 1
    1964:	41 e0       	ldi	r20, 0x01	; 1
    1966:	0e 94 31 06 	call	0xc62	; 0xc62 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(0,2,1);
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	62 e0       	ldi	r22, 0x02	; 2
    196e:	41 e0       	ldi	r20, 0x01	; 1
    1970:	0e 94 31 06 	call	0xc62	; 0xc62 <DIO_VoidSetPinDirection>
	DIO_VoidSetPortDirection(2,0b11111111);
    1974:	82 e0       	ldi	r24, 0x02	; 2
    1976:	6f ef       	ldi	r22, 0xFF	; 255
    1978:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_VoidSetPortDirection>
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	a0 e2       	ldi	r26, 0x20	; 32
    1982:	b2 e4       	ldi	r27, 0x42	; 66
    1984:	8d ab       	std	Y+53, r24	; 0x35
    1986:	9e ab       	std	Y+54, r25	; 0x36
    1988:	af ab       	std	Y+55, r26	; 0x37
    198a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198c:	6d a9       	ldd	r22, Y+53	; 0x35
    198e:	7e a9       	ldd	r23, Y+54	; 0x36
    1990:	8f a9       	ldd	r24, Y+55	; 0x37
    1992:	98 ad       	ldd	r25, Y+56	; 0x38
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	4a ef       	ldi	r20, 0xFA	; 250
    199a:	54 e4       	ldi	r21, 0x44	; 68
    199c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	89 ab       	std	Y+49, r24	; 0x31
    19a6:	9a ab       	std	Y+50, r25	; 0x32
    19a8:	ab ab       	std	Y+51, r26	; 0x33
    19aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19ac:	69 a9       	ldd	r22, Y+49	; 0x31
    19ae:	7a a9       	ldd	r23, Y+50	; 0x32
    19b0:	8b a9       	ldd	r24, Y+51	; 0x33
    19b2:	9c a9       	ldd	r25, Y+52	; 0x34
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e8       	ldi	r20, 0x80	; 128
    19ba:	5f e3       	ldi	r21, 0x3F	; 63
    19bc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19c0:	88 23       	and	r24, r24
    19c2:	2c f4       	brge	.+10     	; 0x19ce <LCD_VoidInit+0x8c>
		__ticks = 1;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	98 ab       	std	Y+48, r25	; 0x30
    19ca:	8f a7       	std	Y+47, r24	; 0x2f
    19cc:	3f c0       	rjmp	.+126    	; 0x1a4c <LCD_VoidInit+0x10a>
	else if (__tmp > 65535)
    19ce:	69 a9       	ldd	r22, Y+49	; 0x31
    19d0:	7a a9       	ldd	r23, Y+50	; 0x32
    19d2:	8b a9       	ldd	r24, Y+51	; 0x33
    19d4:	9c a9       	ldd	r25, Y+52	; 0x34
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	3f ef       	ldi	r19, 0xFF	; 255
    19da:	4f e7       	ldi	r20, 0x7F	; 127
    19dc:	57 e4       	ldi	r21, 0x47	; 71
    19de:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19e2:	18 16       	cp	r1, r24
    19e4:	4c f5       	brge	.+82     	; 0x1a38 <LCD_VoidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e6:	6d a9       	ldd	r22, Y+53	; 0x35
    19e8:	7e a9       	ldd	r23, Y+54	; 0x36
    19ea:	8f a9       	ldd	r24, Y+55	; 0x37
    19ec:	98 ad       	ldd	r25, Y+56	; 0x38
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	40 e2       	ldi	r20, 0x20	; 32
    19f4:	51 e4       	ldi	r21, 0x41	; 65
    19f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	bc 01       	movw	r22, r24
    1a00:	cd 01       	movw	r24, r26
    1a02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	98 ab       	std	Y+48, r25	; 0x30
    1a0c:	8f a7       	std	Y+47, r24	; 0x2f
    1a0e:	0f c0       	rjmp	.+30     	; 0x1a2e <LCD_VoidInit+0xec>
    1a10:	88 ec       	ldi	r24, 0xC8	; 200
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	9e a7       	std	Y+46, r25	; 0x2e
    1a16:	8d a7       	std	Y+45, r24	; 0x2d
    1a18:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a1a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	f1 f7       	brne	.-4      	; 0x1a1c <LCD_VoidInit+0xda>
    1a20:	9e a7       	std	Y+46, r25	; 0x2e
    1a22:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a24:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a26:	98 a9       	ldd	r25, Y+48	; 0x30
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	98 ab       	std	Y+48, r25	; 0x30
    1a2c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a30:	98 a9       	ldd	r25, Y+48	; 0x30
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	69 f7       	brne	.-38     	; 0x1a10 <LCD_VoidInit+0xce>
    1a36:	14 c0       	rjmp	.+40     	; 0x1a60 <LCD_VoidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a38:	69 a9       	ldd	r22, Y+49	; 0x31
    1a3a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a3c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a3e:	9c a9       	ldd	r25, Y+52	; 0x34
    1a40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	98 ab       	std	Y+48, r25	; 0x30
    1a4a:	8f a7       	std	Y+47, r24	; 0x2f
    1a4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a4e:	98 a9       	ldd	r25, Y+48	; 0x30
    1a50:	9c a7       	std	Y+44, r25	; 0x2c
    1a52:	8b a7       	std	Y+43, r24	; 0x2b
    1a54:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a56:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	f1 f7       	brne	.-4      	; 0x1a58 <LCD_VoidInit+0x116>
    1a5c:	9c a7       	std	Y+44, r25	; 0x2c
    1a5e:	8b a7       	std	Y+43, r24	; 0x2b
	
	_delay_ms(40);
	LCD_VoidWriteCommend(0b00111100);
    1a60:	8c e3       	ldi	r24, 0x3C	; 60
    1a62:	0e 94 81 0a 	call	0x1502	; 0x1502 <LCD_VoidWriteCommend>
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	a0 e8       	ldi	r26, 0x80	; 128
    1a6c:	bf e3       	ldi	r27, 0x3F	; 63
    1a6e:	8f a3       	std	Y+39, r24	; 0x27
    1a70:	98 a7       	std	Y+40, r25	; 0x28
    1a72:	a9 a7       	std	Y+41, r26	; 0x29
    1a74:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a76:	6f a1       	ldd	r22, Y+39	; 0x27
    1a78:	78 a5       	ldd	r23, Y+40	; 0x28
    1a7a:	89 a5       	ldd	r24, Y+41	; 0x29
    1a7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	4a ef       	ldi	r20, 0xFA	; 250
    1a84:	54 e4       	ldi	r21, 0x44	; 68
    1a86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	8b a3       	std	Y+35, r24	; 0x23
    1a90:	9c a3       	std	Y+36, r25	; 0x24
    1a92:	ad a3       	std	Y+37, r26	; 0x25
    1a94:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a96:	6b a1       	ldd	r22, Y+35	; 0x23
    1a98:	7c a1       	ldd	r23, Y+36	; 0x24
    1a9a:	8d a1       	ldd	r24, Y+37	; 0x25
    1a9c:	9e a1       	ldd	r25, Y+38	; 0x26
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	40 e8       	ldi	r20, 0x80	; 128
    1aa4:	5f e3       	ldi	r21, 0x3F	; 63
    1aa6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1aaa:	88 23       	and	r24, r24
    1aac:	2c f4       	brge	.+10     	; 0x1ab8 <LCD_VoidInit+0x176>
		__ticks = 1;
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	9a a3       	std	Y+34, r25	; 0x22
    1ab4:	89 a3       	std	Y+33, r24	; 0x21
    1ab6:	3f c0       	rjmp	.+126    	; 0x1b36 <LCD_VoidInit+0x1f4>
	else if (__tmp > 65535)
    1ab8:	6b a1       	ldd	r22, Y+35	; 0x23
    1aba:	7c a1       	ldd	r23, Y+36	; 0x24
    1abc:	8d a1       	ldd	r24, Y+37	; 0x25
    1abe:	9e a1       	ldd	r25, Y+38	; 0x26
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	3f ef       	ldi	r19, 0xFF	; 255
    1ac4:	4f e7       	ldi	r20, 0x7F	; 127
    1ac6:	57 e4       	ldi	r21, 0x47	; 71
    1ac8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1acc:	18 16       	cp	r1, r24
    1ace:	4c f5       	brge	.+82     	; 0x1b22 <LCD_VoidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ad2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ad4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ad6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	40 e2       	ldi	r20, 0x20	; 32
    1ade:	51 e4       	ldi	r21, 0x41	; 65
    1ae0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	bc 01       	movw	r22, r24
    1aea:	cd 01       	movw	r24, r26
    1aec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	9a a3       	std	Y+34, r25	; 0x22
    1af6:	89 a3       	std	Y+33, r24	; 0x21
    1af8:	0f c0       	rjmp	.+30     	; 0x1b18 <LCD_VoidInit+0x1d6>
    1afa:	88 ec       	ldi	r24, 0xC8	; 200
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	98 a3       	std	Y+32, r25	; 0x20
    1b00:	8f 8f       	std	Y+31, r24	; 0x1f
    1b02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b04:	98 a1       	ldd	r25, Y+32	; 0x20
    1b06:	01 97       	sbiw	r24, 0x01	; 1
    1b08:	f1 f7       	brne	.-4      	; 0x1b06 <LCD_VoidInit+0x1c4>
    1b0a:	98 a3       	std	Y+32, r25	; 0x20
    1b0c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b10:	9a a1       	ldd	r25, Y+34	; 0x22
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	9a a3       	std	Y+34, r25	; 0x22
    1b16:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b18:	89 a1       	ldd	r24, Y+33	; 0x21
    1b1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b1c:	00 97       	sbiw	r24, 0x00	; 0
    1b1e:	69 f7       	brne	.-38     	; 0x1afa <LCD_VoidInit+0x1b8>
    1b20:	14 c0       	rjmp	.+40     	; 0x1b4a <LCD_VoidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b22:	6b a1       	ldd	r22, Y+35	; 0x23
    1b24:	7c a1       	ldd	r23, Y+36	; 0x24
    1b26:	8d a1       	ldd	r24, Y+37	; 0x25
    1b28:	9e a1       	ldd	r25, Y+38	; 0x26
    1b2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	9a a3       	std	Y+34, r25	; 0x22
    1b34:	89 a3       	std	Y+33, r24	; 0x21
    1b36:	89 a1       	ldd	r24, Y+33	; 0x21
    1b38:	9a a1       	ldd	r25, Y+34	; 0x22
    1b3a:	9e 8f       	std	Y+30, r25	; 0x1e
    1b3c:	8d 8f       	std	Y+29, r24	; 0x1d
    1b3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <LCD_VoidInit+0x200>
    1b46:	9e 8f       	std	Y+30, r25	; 0x1e
    1b48:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_VoidWriteCommend(0b00001111);
    1b4a:	8f e0       	ldi	r24, 0x0F	; 15
    1b4c:	0e 94 81 0a 	call	0x1502	; 0x1502 <LCD_VoidWriteCommend>
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	a0 e8       	ldi	r26, 0x80	; 128
    1b56:	bf e3       	ldi	r27, 0x3F	; 63
    1b58:	89 8f       	std	Y+25, r24	; 0x19
    1b5a:	9a 8f       	std	Y+26, r25	; 0x1a
    1b5c:	ab 8f       	std	Y+27, r26	; 0x1b
    1b5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b60:	69 8d       	ldd	r22, Y+25	; 0x19
    1b62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	4a ef       	ldi	r20, 0xFA	; 250
    1b6e:	54 e4       	ldi	r21, 0x44	; 68
    1b70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	8d 8b       	std	Y+21, r24	; 0x15
    1b7a:	9e 8b       	std	Y+22, r25	; 0x16
    1b7c:	af 8b       	std	Y+23, r26	; 0x17
    1b7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b80:	6d 89       	ldd	r22, Y+21	; 0x15
    1b82:	7e 89       	ldd	r23, Y+22	; 0x16
    1b84:	8f 89       	ldd	r24, Y+23	; 0x17
    1b86:	98 8d       	ldd	r25, Y+24	; 0x18
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e8       	ldi	r20, 0x80	; 128
    1b8e:	5f e3       	ldi	r21, 0x3F	; 63
    1b90:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b94:	88 23       	and	r24, r24
    1b96:	2c f4       	brge	.+10     	; 0x1ba2 <LCD_VoidInit+0x260>
		__ticks = 1;
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	9c 8b       	std	Y+20, r25	; 0x14
    1b9e:	8b 8b       	std	Y+19, r24	; 0x13
    1ba0:	3f c0       	rjmp	.+126    	; 0x1c20 <LCD_VoidInit+0x2de>
	else if (__tmp > 65535)
    1ba2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba8:	98 8d       	ldd	r25, Y+24	; 0x18
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	3f ef       	ldi	r19, 0xFF	; 255
    1bae:	4f e7       	ldi	r20, 0x7F	; 127
    1bb0:	57 e4       	ldi	r21, 0x47	; 71
    1bb2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bb6:	18 16       	cp	r1, r24
    1bb8:	4c f5       	brge	.+82     	; 0x1c0c <LCD_VoidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bba:	69 8d       	ldd	r22, Y+25	; 0x19
    1bbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	40 e2       	ldi	r20, 0x20	; 32
    1bc8:	51 e4       	ldi	r21, 0x41	; 65
    1bca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	bc 01       	movw	r22, r24
    1bd4:	cd 01       	movw	r24, r26
    1bd6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	9c 8b       	std	Y+20, r25	; 0x14
    1be0:	8b 8b       	std	Y+19, r24	; 0x13
    1be2:	0f c0       	rjmp	.+30     	; 0x1c02 <LCD_VoidInit+0x2c0>
    1be4:	88 ec       	ldi	r24, 0xC8	; 200
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	9a 8b       	std	Y+18, r25	; 0x12
    1bea:	89 8b       	std	Y+17, r24	; 0x11
    1bec:	89 89       	ldd	r24, Y+17	; 0x11
    1bee:	9a 89       	ldd	r25, Y+18	; 0x12
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	f1 f7       	brne	.-4      	; 0x1bf0 <LCD_VoidInit+0x2ae>
    1bf4:	9a 8b       	std	Y+18, r25	; 0x12
    1bf6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bfa:	9c 89       	ldd	r25, Y+20	; 0x14
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	9c 8b       	std	Y+20, r25	; 0x14
    1c00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c02:	8b 89       	ldd	r24, Y+19	; 0x13
    1c04:	9c 89       	ldd	r25, Y+20	; 0x14
    1c06:	00 97       	sbiw	r24, 0x00	; 0
    1c08:	69 f7       	brne	.-38     	; 0x1be4 <LCD_VoidInit+0x2a2>
    1c0a:	14 c0       	rjmp	.+40     	; 0x1c34 <LCD_VoidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c10:	8f 89       	ldd	r24, Y+23	; 0x17
    1c12:	98 8d       	ldd	r25, Y+24	; 0x18
    1c14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	9c 8b       	std	Y+20, r25	; 0x14
    1c1e:	8b 8b       	std	Y+19, r24	; 0x13
    1c20:	8b 89       	ldd	r24, Y+19	; 0x13
    1c22:	9c 89       	ldd	r25, Y+20	; 0x14
    1c24:	98 8b       	std	Y+16, r25	; 0x10
    1c26:	8f 87       	std	Y+15, r24	; 0x0f
    1c28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c2a:	98 89       	ldd	r25, Y+16	; 0x10
    1c2c:	01 97       	sbiw	r24, 0x01	; 1
    1c2e:	f1 f7       	brne	.-4      	; 0x1c2c <LCD_VoidInit+0x2ea>
    1c30:	98 8b       	std	Y+16, r25	; 0x10
    1c32:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_VoidWriteCommend(0b00000001);
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	0e 94 81 0a 	call	0x1502	; 0x1502 <LCD_VoidWriteCommend>
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	a0 e0       	ldi	r26, 0x00	; 0
    1c40:	b0 e4       	ldi	r27, 0x40	; 64
    1c42:	8b 87       	std	Y+11, r24	; 0x0b
    1c44:	9c 87       	std	Y+12, r25	; 0x0c
    1c46:	ad 87       	std	Y+13, r26	; 0x0d
    1c48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	4a ef       	ldi	r20, 0xFA	; 250
    1c58:	54 e4       	ldi	r21, 0x44	; 68
    1c5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	8f 83       	std	Y+7, r24	; 0x07
    1c64:	98 87       	std	Y+8, r25	; 0x08
    1c66:	a9 87       	std	Y+9, r26	; 0x09
    1c68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c6c:	78 85       	ldd	r23, Y+8	; 0x08
    1c6e:	89 85       	ldd	r24, Y+9	; 0x09
    1c70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	40 e8       	ldi	r20, 0x80	; 128
    1c78:	5f e3       	ldi	r21, 0x3F	; 63
    1c7a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c7e:	88 23       	and	r24, r24
    1c80:	2c f4       	brge	.+10     	; 0x1c8c <LCD_VoidInit+0x34a>
		__ticks = 1;
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	9e 83       	std	Y+6, r25	; 0x06
    1c88:	8d 83       	std	Y+5, r24	; 0x05
    1c8a:	3f c0       	rjmp	.+126    	; 0x1d0a <LCD_VoidInit+0x3c8>
	else if (__tmp > 65535)
    1c8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c8e:	78 85       	ldd	r23, Y+8	; 0x08
    1c90:	89 85       	ldd	r24, Y+9	; 0x09
    1c92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	3f ef       	ldi	r19, 0xFF	; 255
    1c98:	4f e7       	ldi	r20, 0x7F	; 127
    1c9a:	57 e4       	ldi	r21, 0x47	; 71
    1c9c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ca0:	18 16       	cp	r1, r24
    1ca2:	4c f5       	brge	.+82     	; 0x1cf6 <LCD_VoidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1caa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	40 e2       	ldi	r20, 0x20	; 32
    1cb2:	51 e4       	ldi	r21, 0x41	; 65
    1cb4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	bc 01       	movw	r22, r24
    1cbe:	cd 01       	movw	r24, r26
    1cc0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	9e 83       	std	Y+6, r25	; 0x06
    1cca:	8d 83       	std	Y+5, r24	; 0x05
    1ccc:	0f c0       	rjmp	.+30     	; 0x1cec <LCD_VoidInit+0x3aa>
    1cce:	88 ec       	ldi	r24, 0xC8	; 200
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	9c 83       	std	Y+4, r25	; 0x04
    1cd4:	8b 83       	std	Y+3, r24	; 0x03
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	f1 f7       	brne	.-4      	; 0x1cda <LCD_VoidInit+0x398>
    1cde:	9c 83       	std	Y+4, r25	; 0x04
    1ce0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	9e 83       	std	Y+6, r25	; 0x06
    1cea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cec:	8d 81       	ldd	r24, Y+5	; 0x05
    1cee:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf0:	00 97       	sbiw	r24, 0x00	; 0
    1cf2:	69 f7       	brne	.-38     	; 0x1cce <LCD_VoidInit+0x38c>
    1cf4:	14 c0       	rjmp	.+40     	; 0x1d1e <LCD_VoidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf8:	78 85       	ldd	r23, Y+8	; 0x08
    1cfa:	89 85       	ldd	r24, Y+9	; 0x09
    1cfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	9e 83       	std	Y+6, r25	; 0x06
    1d08:	8d 83       	std	Y+5, r24	; 0x05
    1d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0e:	9a 83       	std	Y+2, r25	; 0x02
    1d10:	89 83       	std	Y+1, r24	; 0x01
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
    1d14:	9a 81       	ldd	r25, Y+2	; 0x02
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	f1 f7       	brne	.-4      	; 0x1d16 <LCD_VoidInit+0x3d4>
    1d1a:	9a 83       	std	Y+2, r25	; 0x02
    1d1c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	
	
}
    1d1e:	e8 96       	adiw	r28, 0x38	; 56
    1d20:	0f b6       	in	r0, 0x3f	; 63
    1d22:	f8 94       	cli
    1d24:	de bf       	out	0x3e, r29	; 62
    1d26:	0f be       	out	0x3f, r0	; 63
    1d28:	cd bf       	out	0x3d, r28	; 61
    1d2a:	cf 91       	pop	r28
    1d2c:	df 91       	pop	r29
    1d2e:	08 95       	ret

00001d30 <LCD_VoidFullName>:
void LCD_VoidFullName(u8 string[]) 
{
    1d30:	df 93       	push	r29
    1d32:	cf 93       	push	r28
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    1d38:	61 97       	sbiw	r28, 0x11	; 17
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	de bf       	out	0x3e, r29	; 62
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	cd bf       	out	0x3d, r28	; 61
    1d44:	99 8b       	std	Y+17, r25	; 0x11
    1d46:	88 8b       	std	Y+16, r24	; 0x10
	u8 i=0; 
    1d48:	1f 86       	std	Y+15, r1	; 0x0f
    1d4a:	80 c0       	rjmp	.+256    	; 0x1e4c <LCD_VoidFullName+0x11c>
	while(string[i]!=0)
	{
		LCD_VoidWriteData(string[i]);
    1d4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d4e:	28 2f       	mov	r18, r24
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	88 89       	ldd	r24, Y+16	; 0x10
    1d54:	99 89       	ldd	r25, Y+17	; 0x11
    1d56:	fc 01       	movw	r30, r24
    1d58:	e2 0f       	add	r30, r18
    1d5a:	f3 1f       	adc	r31, r19
    1d5c:	80 81       	ld	r24, Z
    1d5e:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
		i++;
    1d62:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d64:	8f 5f       	subi	r24, 0xFF	; 255
    1d66:	8f 87       	std	Y+15, r24	; 0x0f
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	a0 e0       	ldi	r26, 0x00	; 0
    1d6e:	b0 e4       	ldi	r27, 0x40	; 64
    1d70:	8b 87       	std	Y+11, r24	; 0x0b
    1d72:	9c 87       	std	Y+12, r25	; 0x0c
    1d74:	ad 87       	std	Y+13, r26	; 0x0d
    1d76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	4a ef       	ldi	r20, 0xFA	; 250
    1d86:	54 e4       	ldi	r21, 0x44	; 68
    1d88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	8f 83       	std	Y+7, r24	; 0x07
    1d92:	98 87       	std	Y+8, r25	; 0x08
    1d94:	a9 87       	std	Y+9, r26	; 0x09
    1d96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d98:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9a:	78 85       	ldd	r23, Y+8	; 0x08
    1d9c:	89 85       	ldd	r24, Y+9	; 0x09
    1d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 e8       	ldi	r20, 0x80	; 128
    1da6:	5f e3       	ldi	r21, 0x3F	; 63
    1da8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dac:	88 23       	and	r24, r24
    1dae:	2c f4       	brge	.+10     	; 0x1dba <LCD_VoidFullName+0x8a>
		__ticks = 1;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	9e 83       	std	Y+6, r25	; 0x06
    1db6:	8d 83       	std	Y+5, r24	; 0x05
    1db8:	3f c0       	rjmp	.+126    	; 0x1e38 <LCD_VoidFullName+0x108>
	else if (__tmp > 65535)
    1dba:	6f 81       	ldd	r22, Y+7	; 0x07
    1dbc:	78 85       	ldd	r23, Y+8	; 0x08
    1dbe:	89 85       	ldd	r24, Y+9	; 0x09
    1dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	3f ef       	ldi	r19, 0xFF	; 255
    1dc6:	4f e7       	ldi	r20, 0x7F	; 127
    1dc8:	57 e4       	ldi	r21, 0x47	; 71
    1dca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1dce:	18 16       	cp	r1, r24
    1dd0:	4c f5       	brge	.+82     	; 0x1e24 <LCD_VoidFullName+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e2       	ldi	r20, 0x20	; 32
    1de0:	51 e4       	ldi	r21, 0x41	; 65
    1de2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	bc 01       	movw	r22, r24
    1dec:	cd 01       	movw	r24, r26
    1dee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	9e 83       	std	Y+6, r25	; 0x06
    1df8:	8d 83       	std	Y+5, r24	; 0x05
    1dfa:	0f c0       	rjmp	.+30     	; 0x1e1a <LCD_VoidFullName+0xea>
    1dfc:	88 ec       	ldi	r24, 0xC8	; 200
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	9c 83       	std	Y+4, r25	; 0x04
    1e02:	8b 83       	std	Y+3, r24	; 0x03
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	9c 81       	ldd	r25, Y+4	; 0x04
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	f1 f7       	brne	.-4      	; 0x1e08 <LCD_VoidFullName+0xd8>
    1e0c:	9c 83       	std	Y+4, r25	; 0x04
    1e0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e10:	8d 81       	ldd	r24, Y+5	; 0x05
    1e12:	9e 81       	ldd	r25, Y+6	; 0x06
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	9e 83       	std	Y+6, r25	; 0x06
    1e18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	69 f7       	brne	.-38     	; 0x1dfc <LCD_VoidFullName+0xcc>
    1e22:	14 c0       	rjmp	.+40     	; 0x1e4c <LCD_VoidFullName+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e24:	6f 81       	ldd	r22, Y+7	; 0x07
    1e26:	78 85       	ldd	r23, Y+8	; 0x08
    1e28:	89 85       	ldd	r24, Y+9	; 0x09
    1e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	9e 83       	std	Y+6, r25	; 0x06
    1e36:	8d 83       	std	Y+5, r24	; 0x05
    1e38:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3c:	9a 83       	std	Y+2, r25	; 0x02
    1e3e:	89 83       	std	Y+1, r24	; 0x01
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	9a 81       	ldd	r25, Y+2	; 0x02
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	f1 f7       	brne	.-4      	; 0x1e44 <LCD_VoidFullName+0x114>
    1e48:	9a 83       	std	Y+2, r25	; 0x02
    1e4a:	89 83       	std	Y+1, r24	; 0x01
	
}
void LCD_VoidFullName(u8 string[]) 
{
	u8 i=0; 
	while(string[i]!=0)
    1e4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e4e:	28 2f       	mov	r18, r24
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	88 89       	ldd	r24, Y+16	; 0x10
    1e54:	99 89       	ldd	r25, Y+17	; 0x11
    1e56:	fc 01       	movw	r30, r24
    1e58:	e2 0f       	add	r30, r18
    1e5a:	f3 1f       	adc	r31, r19
    1e5c:	80 81       	ld	r24, Z
    1e5e:	88 23       	and	r24, r24
    1e60:	09 f0       	breq	.+2      	; 0x1e64 <LCD_VoidFullName+0x134>
    1e62:	74 cf       	rjmp	.-280    	; 0x1d4c <LCD_VoidFullName+0x1c>
	{
		LCD_VoidWriteData(string[i]);
		i++;
		_delay_ms(2);
	}
}
    1e64:	61 96       	adiw	r28, 0x11	; 17
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	f8 94       	cli
    1e6a:	de bf       	out	0x3e, r29	; 62
    1e6c:	0f be       	out	0x3f, r0	; 63
    1e6e:	cd bf       	out	0x3d, r28	; 61
    1e70:	cf 91       	pop	r28
    1e72:	df 91       	pop	r29
    1e74:	08 95       	ret

00001e76 <LCD_VoidWriteNum>:
void LCD_VoidWriteNum(u16 num)
{
    1e76:	df 93       	push	r29
    1e78:	cf 93       	push	r28
    1e7a:	00 d0       	rcall	.+0      	; 0x1e7c <LCD_VoidWriteNum+0x6>
    1e7c:	00 d0       	rcall	.+0      	; 0x1e7e <LCD_VoidWriteNum+0x8>
    1e7e:	00 d0       	rcall	.+0      	; 0x1e80 <LCD_VoidWriteNum+0xa>
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	9e 83       	std	Y+6, r25	; 0x06
    1e86:	8d 83       	std	Y+5, r24	; 0x05
	u16 rev=0,x=0;
    1e88:	1c 82       	std	Y+4, r1	; 0x04
    1e8a:	1b 82       	std	Y+3, r1	; 0x03
    1e8c:	1a 82       	std	Y+2, r1	; 0x02
    1e8e:	19 82       	std	Y+1, r1	; 0x01
    1e90:	22 c0       	rjmp	.+68     	; 0x1ed6 <LCD_VoidWriteNum+0x60>
	while(num!=0)
	{
		rev=rev*10+(num%10);
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	9c 81       	ldd	r25, Y+4	; 0x04
    1e96:	9c 01       	movw	r18, r24
    1e98:	22 0f       	add	r18, r18
    1e9a:	33 1f       	adc	r19, r19
    1e9c:	c9 01       	movw	r24, r18
    1e9e:	88 0f       	add	r24, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	88 0f       	add	r24, r24
    1ea4:	99 1f       	adc	r25, r25
    1ea6:	f9 01       	movw	r30, r18
    1ea8:	e8 0f       	add	r30, r24
    1eaa:	f9 1f       	adc	r31, r25
    1eac:	8d 81       	ldd	r24, Y+5	; 0x05
    1eae:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb0:	2a e0       	ldi	r18, 0x0A	; 10
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	b9 01       	movw	r22, r18
    1eb6:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <__udivmodhi4>
    1eba:	8e 0f       	add	r24, r30
    1ebc:	9f 1f       	adc	r25, r31
    1ebe:	9c 83       	std	Y+4, r25	; 0x04
    1ec0:	8b 83       	std	Y+3, r24	; 0x03
		num=num/10;
    1ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec6:	2a e0       	ldi	r18, 0x0A	; 10
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	b9 01       	movw	r22, r18
    1ecc:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <__udivmodhi4>
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	9e 83       	std	Y+6, r25	; 0x06
    1ed4:	8d 83       	std	Y+5, r24	; 0x05
	}
}
void LCD_VoidWriteNum(u16 num)
{
	u16 rev=0,x=0;
	while(num!=0)
    1ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eda:	00 97       	sbiw	r24, 0x00	; 0
    1edc:	d1 f6       	brne	.-76     	; 0x1e92 <LCD_VoidWriteNum+0x1c>
    1ede:	17 c0       	rjmp	.+46     	; 0x1f0e <LCD_VoidWriteNum+0x98>
		rev=rev*10+(num%10);
		num=num/10;
	}
	while(rev!=0)
	{
		x=rev%10;
    1ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee4:	2a e0       	ldi	r18, 0x0A	; 10
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	b9 01       	movw	r22, r18
    1eea:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <__udivmodhi4>
    1eee:	9a 83       	std	Y+2, r25	; 0x02
    1ef0:	89 83       	std	Y+1, r24	; 0x01
		rev=rev/10;
    1ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef6:	2a e0       	ldi	r18, 0x0A	; 10
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	b9 01       	movw	r22, r18
    1efc:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <__udivmodhi4>
    1f00:	cb 01       	movw	r24, r22
    1f02:	9c 83       	std	Y+4, r25	; 0x04
    1f04:	8b 83       	std	Y+3, r24	; 0x03
		LCD_VoidWriteData(x+48);
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	80 5d       	subi	r24, 0xD0	; 208
    1f0a:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
	while(num!=0)
	{
		rev=rev*10+(num%10);
		num=num/10;
	}
	while(rev!=0)
    1f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f10:	9c 81       	ldd	r25, Y+4	; 0x04
    1f12:	00 97       	sbiw	r24, 0x00	; 0
    1f14:	29 f7       	brne	.-54     	; 0x1ee0 <LCD_VoidWriteNum+0x6a>
	{
		x=rev%10;
		rev=rev/10;
		LCD_VoidWriteData(x+48);
	}
}
    1f16:	26 96       	adiw	r28, 0x06	; 6
    1f18:	0f b6       	in	r0, 0x3f	; 63
    1f1a:	f8 94       	cli
    1f1c:	de bf       	out	0x3e, r29	; 62
    1f1e:	0f be       	out	0x3f, r0	; 63
    1f20:	cd bf       	out	0x3d, r28	; 61
    1f22:	cf 91       	pop	r28
    1f24:	df 91       	pop	r29
    1f26:	08 95       	ret

00001f28 <LCD_VoidSetCursor>:
void LCD_VoidSetCursor(u8 row, u8 column)
{
    1f28:	df 93       	push	r29
    1f2a:	cf 93       	push	r28
    1f2c:	00 d0       	rcall	.+0      	; 0x1f2e <LCD_VoidSetCursor+0x6>
    1f2e:	cd b7       	in	r28, 0x3d	; 61
    1f30:	de b7       	in	r29, 0x3e	; 62
    1f32:	89 83       	std	Y+1, r24	; 0x01
    1f34:	6a 83       	std	Y+2, r22	; 0x02
	if(0==row)
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	88 23       	and	r24, r24
    1f3a:	29 f4       	brne	.+10     	; 0x1f46 <LCD_VoidSetCursor+0x1e>
	{
		LCD_VoidWriteCommend(128+column);
    1f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3e:	80 58       	subi	r24, 0x80	; 128
    1f40:	0e 94 81 0a 	call	0x1502	; 0x1502 <LCD_VoidWriteCommend>
    1f44:	07 c0       	rjmp	.+14     	; 0x1f54 <LCD_VoidSetCursor+0x2c>
	}else if(1==row)
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	81 30       	cpi	r24, 0x01	; 1
    1f4a:	21 f4       	brne	.+8      	; 0x1f54 <LCD_VoidSetCursor+0x2c>
	{
		LCD_VoidWriteCommend(128+64+column);
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	80 54       	subi	r24, 0x40	; 64
    1f50:	0e 94 81 0a 	call	0x1502	; 0x1502 <LCD_VoidWriteCommend>
	}
}
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <main>:
#include"BIT_Math.h"
#include"LCD_Interface.h"
#include"KEYPAD_Interface.h"
#include"CALC_Interface.h"
void main(void)
{
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
    1f66:	e3 97       	sbiw	r28, 0x33	; 51
    1f68:	0f b6       	in	r0, 0x3f	; 63
    1f6a:	f8 94       	cli
    1f6c:	de bf       	out	0x3e, r29	; 62
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	cd bf       	out	0x3d, r28	; 61
	LCD_VoidInit();
    1f72:	0e 94 a1 0c 	call	0x1942	; 0x1942 <LCD_VoidInit>
	KEYPAD_VoidInit();
    1f76:	0e 94 aa 09 	call	0x1354	; 0x1354 <KEYPAD_VoidInit>
while(1)
{
	u8 x=0,y=0,z=0;
    1f7a:	19 8e       	std	Y+25, r1	; 0x19
    1f7c:	18 8e       	std	Y+24, r1	; 0x18
    1f7e:	1f 8a       	std	Y+23, r1	; 0x17
	u32 bit_bit=0, total_decimal_number=0;
    1f80:	1e 8a       	std	Y+22, r1	; 0x16
    1f82:	1d 8a       	std	Y+21, r1	; 0x15
    1f84:	1c 8a       	std	Y+20, r1	; 0x14
    1f86:	1b 8a       	std	Y+19, r1	; 0x13
	u8 i=0;
    1f88:	1a 8a       	std	Y+18, r1	; 0x12
	u8 num_dec=0;
    1f8a:	19 8a       	std	Y+17, r1	; 0x11
	u16 total_number=0;
    1f8c:	18 8a       	std	Y+16, r1	; 0x10
    1f8e:	1f 86       	std	Y+15, r1	; 0x0f
	u16 bit_total_number;
	/*Hex to Decimal variables*/
	u8 HEX_bit=0;
    1f90:	1c 86       	std	Y+12, r1	; 0x0c
	u8 Count_up_hex=0;
    1f92:	1b 86       	std	Y+11, r1	; 0x0b
	u8 Count_down_hex=0;
    1f94:	1a 86       	std	Y+10, r1	; 0x0a
	u16 Hex_1[]={0};
    1f96:	1b 8e       	std	Y+27, r1	; 0x1b
    1f98:	1a 8e       	std	Y+26, r1	; 0x1a
	u16 Hex_2[]={0};
    1f9a:	1d 8e       	std	Y+29, r1	; 0x1d
    1f9c:	1c 8e       	std	Y+28, r1	; 0x1c
	u8 Count_down_max;
	u16 total_hex_number=1;
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	98 87       	std	Y+8, r25	; 0x08
    1fa4:	8f 83       	std	Y+7, r24	; 0x07
	u16 total_number_decimal=0;
    1fa6:	1e 82       	std	Y+6, r1	; 0x06
    1fa8:	1d 82       	std	Y+5, r1	; 0x05
	/*                                */
	LCD_VoidWriteCommend(1);
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	0e 94 81 0a 	call	0x1502	; 0x1502 <LCD_VoidWriteCommend>
	LCD_VoidSetCursor(0,0);
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	60 e0       	ldi	r22, 0x00	; 0
    1fb4:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
	LCD_VoidWriteNum(1);
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <LCD_VoidWriteNum>
	LCD_VoidFullName("DEC");
    1fbe:	80 e6       	ldi	r24, 0x60	; 96
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <LCD_VoidFullName>
	LCD_VoidWriteData(' ');
    1fc6:	80 e2       	ldi	r24, 0x20	; 32
    1fc8:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
	LCD_VoidWriteNum(2);
    1fcc:	82 e0       	ldi	r24, 0x02	; 2
    1fce:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <LCD_VoidWriteNum>
	LCD_VoidFullName("BIN");
    1fd2:	84 e6       	ldi	r24, 0x64	; 100
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <LCD_VoidFullName>
	LCD_VoidWriteData(' ');
    1fda:	80 e2       	ldi	r24, 0x20	; 32
    1fdc:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
	LCD_VoidWriteNum(3);
    1fe0:	83 e0       	ldi	r24, 0x03	; 3
    1fe2:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <LCD_VoidWriteNum>
	LCD_VoidFullName("HEX");
    1fe6:	88 e6       	ldi	r24, 0x68	; 104
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <LCD_VoidFullName>
	LCD_VoidSetCursor(1,0);
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	60 e0       	ldi	r22, 0x00	; 0
    1ff2:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
    1ff6:	33 c0       	rjmp	.+102    	; 0x205e <main+0x100>
	while(x!=15)
			{
				x=KEYPAD_VoidGetNumber();
    1ff8:	0e 94 b9 09 	call	0x1372	; 0x1372 <KEYPAD_VoidGetNumber>
    1ffc:	89 8f       	std	Y+25, r24	; 0x19
				if(x!=100 && x!=15)
    1ffe:	89 8d       	ldd	r24, Y+25	; 0x19
    2000:	84 36       	cpi	r24, 0x64	; 100
    2002:	69 f1       	breq	.+90     	; 0x205e <main+0x100>
    2004:	89 8d       	ldd	r24, Y+25	; 0x19
    2006:	8f 30       	cpi	r24, 0x0F	; 15
    2008:	51 f1       	breq	.+84     	; 0x205e <main+0x100>
				{
					switch(x)
    200a:	89 8d       	ldd	r24, Y+25	; 0x19
    200c:	28 2f       	mov	r18, r24
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	3b ab       	std	Y+51, r19	; 0x33
    2012:	2a ab       	std	Y+50, r18	; 0x32
    2014:	4a a9       	ldd	r20, Y+50	; 0x32
    2016:	5b a9       	ldd	r21, Y+51	; 0x33
    2018:	42 30       	cpi	r20, 0x02	; 2
    201a:	51 05       	cpc	r21, r1
    201c:	81 f0       	breq	.+32     	; 0x203e <main+0xe0>
    201e:	8a a9       	ldd	r24, Y+50	; 0x32
    2020:	9b a9       	ldd	r25, Y+51	; 0x33
    2022:	83 30       	cpi	r24, 0x03	; 3
    2024:	91 05       	cpc	r25, r1
    2026:	89 f0       	breq	.+34     	; 0x204a <main+0xec>
    2028:	2a a9       	ldd	r18, Y+50	; 0x32
    202a:	3b a9       	ldd	r19, Y+51	; 0x33
    202c:	21 30       	cpi	r18, 0x01	; 1
    202e:	31 05       	cpc	r19, r1
    2030:	91 f4       	brne	.+36     	; 0x2056 <main+0xf8>
					{
					case 1: LCD_VoidWriteNum(x); y=x; break;
    2032:	89 8d       	ldd	r24, Y+25	; 0x19
    2034:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <LCD_VoidWriteNum>
    2038:	89 8d       	ldd	r24, Y+25	; 0x19
    203a:	88 8f       	std	Y+24, r24	; 0x18
    203c:	10 c0       	rjmp	.+32     	; 0x205e <main+0x100>
					case 2: LCD_VoidWriteNum(x); y=x; break;
    203e:	89 8d       	ldd	r24, Y+25	; 0x19
    2040:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <LCD_VoidWriteNum>
    2044:	89 8d       	ldd	r24, Y+25	; 0x19
    2046:	88 8f       	std	Y+24, r24	; 0x18
    2048:	0a c0       	rjmp	.+20     	; 0x205e <main+0x100>
					case 3: LCD_VoidWriteNum(x); y=x; break;
    204a:	89 8d       	ldd	r24, Y+25	; 0x19
    204c:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <LCD_VoidWriteNum>
    2050:	89 8d       	ldd	r24, Y+25	; 0x19
    2052:	88 8f       	std	Y+24, r24	; 0x18
    2054:	04 c0       	rjmp	.+8      	; 0x205e <main+0x100>
					default: LCD_VoidFullName("Wrong"); break;
    2056:	8c e6       	ldi	r24, 0x6C	; 108
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <LCD_VoidFullName>
	LCD_VoidFullName("BIN");
	LCD_VoidWriteData(' ');
	LCD_VoidWriteNum(3);
	LCD_VoidFullName("HEX");
	LCD_VoidSetCursor(1,0);
	while(x!=15)
    205e:	89 8d       	ldd	r24, Y+25	; 0x19
    2060:	8f 30       	cpi	r24, 0x0F	; 15
    2062:	51 f6       	brne	.-108    	; 0x1ff8 <main+0x9a>
					}

				}

			}
			LCD_VoidWriteCommend(1);
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	0e 94 81 0a 	call	0x1502	; 0x1502 <LCD_VoidWriteCommend>
	if(y==1)
    206a:	88 8d       	ldd	r24, Y+24	; 0x18
    206c:	81 30       	cpi	r24, 0x01	; 1
    206e:	09 f0       	breq	.+2      	; 0x2072 <main+0x114>
    2070:	00 c2       	rjmp	.+1024   	; 0x2472 <main+0x514>
	{
				LCD_VoidSetCursor(0,0);
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	60 e0       	ldi	r22, 0x00	; 0
    2076:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
				LCD_VoidWriteNum(1);
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <LCD_VoidWriteNum>
				LCD_VoidFullName("DEC>>Bin");
    2080:	82 e7       	ldi	r24, 0x72	; 114
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <LCD_VoidFullName>
				LCD_VoidSetCursor(1,0);
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	60 e0       	ldi	r22, 0x00	; 0
    208c:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
				LCD_VoidWriteNum(2);
    2090:	82 e0       	ldi	r24, 0x02	; 2
    2092:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <LCD_VoidWriteNum>
				LCD_VoidFullName("Dec>>Hex");
    2096:	8b e7       	ldi	r24, 0x7B	; 123
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <LCD_VoidFullName>
				LCD_VoidSetCursor(1,9);
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	69 e0       	ldi	r22, 0x09	; 9
    20a2:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
    20a6:	24 c0       	rjmp	.+72     	; 0x20f0 <main+0x192>
				while(z!=15)
				{
					z=KEYPAD_VoidGetNumber();
    20a8:	0e 94 b9 09 	call	0x1372	; 0x1372 <KEYPAD_VoidGetNumber>
    20ac:	8f 8b       	std	Y+23, r24	; 0x17
					if(z!=100 && z!=15)
    20ae:	8f 89       	ldd	r24, Y+23	; 0x17
    20b0:	84 36       	cpi	r24, 0x64	; 100
    20b2:	c1 f0       	breq	.+48     	; 0x20e4 <main+0x186>
    20b4:	8f 89       	ldd	r24, Y+23	; 0x17
    20b6:	8f 30       	cpi	r24, 0x0F	; 15
    20b8:	a9 f0       	breq	.+42     	; 0x20e4 <main+0x186>
					{
						switch(z)
    20ba:	8f 89       	ldd	r24, Y+23	; 0x17
    20bc:	48 2f       	mov	r20, r24
    20be:	50 e0       	ldi	r21, 0x00	; 0
    20c0:	59 ab       	std	Y+49, r21	; 0x31
    20c2:	48 ab       	std	Y+48, r20	; 0x30
    20c4:	88 a9       	ldd	r24, Y+48	; 0x30
    20c6:	99 a9       	ldd	r25, Y+49	; 0x31
    20c8:	81 30       	cpi	r24, 0x01	; 1
    20ca:	91 05       	cpc	r25, r1
    20cc:	31 f0       	breq	.+12     	; 0x20da <main+0x17c>
    20ce:	28 a9       	ldd	r18, Y+48	; 0x30
    20d0:	39 a9       	ldd	r19, Y+49	; 0x31
    20d2:	22 30       	cpi	r18, 0x02	; 2
    20d4:	31 05       	cpc	r19, r1
    20d6:	21 f0       	breq	.+8      	; 0x20e0 <main+0x182>
    20d8:	05 c0       	rjmp	.+10     	; 0x20e4 <main+0x186>
						{
							case 1: num_dec=z; break;
    20da:	8f 89       	ldd	r24, Y+23	; 0x17
    20dc:	89 8b       	std	Y+17, r24	; 0x11
    20de:	02 c0       	rjmp	.+4      	; 0x20e4 <main+0x186>
							case 2: num_dec=z; break;
    20e0:	8f 89       	ldd	r24, Y+23	; 0x17
    20e2:	89 8b       	std	Y+17, r24	; 0x11
						}
					}
					if(z==1 || z==2)
    20e4:	8f 89       	ldd	r24, Y+23	; 0x17
    20e6:	81 30       	cpi	r24, 0x01	; 1
    20e8:	31 f0       	breq	.+12     	; 0x20f6 <main+0x198>
    20ea:	8f 89       	ldd	r24, Y+23	; 0x17
    20ec:	82 30       	cpi	r24, 0x02	; 2
    20ee:	19 f0       	breq	.+6      	; 0x20f6 <main+0x198>
				LCD_VoidFullName("DEC>>Bin");
				LCD_VoidSetCursor(1,0);
				LCD_VoidWriteNum(2);
				LCD_VoidFullName("Dec>>Hex");
				LCD_VoidSetCursor(1,9);
				while(z!=15)
    20f0:	8f 89       	ldd	r24, Y+23	; 0x17
    20f2:	8f 30       	cpi	r24, 0x0F	; 15
    20f4:	c9 f6       	brne	.-78     	; 0x20a8 <main+0x14a>
					if(z==1 || z==2)
					{
						break;
					}
				}
			LCD_VoidWriteCommend(1);
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	0e 94 81 0a 	call	0x1502	; 0x1502 <LCD_VoidWriteCommend>
			switch(num_dec)
    20fc:	89 89       	ldd	r24, Y+17	; 0x11
    20fe:	48 2f       	mov	r20, r24
    2100:	50 e0       	ldi	r21, 0x00	; 0
    2102:	5f a7       	std	Y+47, r21	; 0x2f
    2104:	4e a7       	std	Y+46, r20	; 0x2e
    2106:	8e a5       	ldd	r24, Y+46	; 0x2e
    2108:	9f a5       	ldd	r25, Y+47	; 0x2f
    210a:	81 30       	cpi	r24, 0x01	; 1
    210c:	91 05       	cpc	r25, r1
    210e:	39 f0       	breq	.+14     	; 0x211e <main+0x1c0>
    2110:	2e a5       	ldd	r18, Y+46	; 0x2e
    2112:	3f a5       	ldd	r19, Y+47	; 0x2f
    2114:	22 30       	cpi	r18, 0x02	; 2
    2116:	31 05       	cpc	r19, r1
    2118:	09 f4       	brne	.+2      	; 0x211c <main+0x1be>
    211a:	54 c0       	rjmp	.+168    	; 0x21c4 <main+0x266>
    211c:	2e cf       	rjmp	.-420    	; 0x1f7a <main+0x1c>
		{
			case 1:
			{
				z=100;
    211e:	84 e6       	ldi	r24, 0x64	; 100
    2120:	8f 8b       	std	Y+23, r24	; 0x17
				LCD_VoidSetCursor(0,0);
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	60 e0       	ldi	r22, 0x00	; 0
    2126:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
				LCD_VoidFullName("DEC:");
    212a:	84 e8       	ldi	r24, 0x84	; 132
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <LCD_VoidFullName>
				LCD_VoidSetCursor(1,0);
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	60 e0       	ldi	r22, 0x00	; 0
    2136:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
				LCD_VoidFullName("BIN:");
    213a:	89 e8       	ldi	r24, 0x89	; 137
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <LCD_VoidFullName>
				LCD_VoidSetCursor(0,4);
    2142:	80 e0       	ldi	r24, 0x00	; 0
    2144:	64 e0       	ldi	r22, 0x04	; 4
    2146:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
    214a:	26 c0       	rjmp	.+76     	; 0x2198 <main+0x23a>
				while(z!=15)
				{
					z=KEYPAD_VoidGetNumber();
    214c:	0e 94 b9 09 	call	0x1372	; 0x1372 <KEYPAD_VoidGetNumber>
    2150:	8f 8b       	std	Y+23, r24	; 0x17
					if(z!=100 && z!=15)
    2152:	8f 89       	ldd	r24, Y+23	; 0x17
    2154:	84 36       	cpi	r24, 0x64	; 100
    2156:	01 f1       	breq	.+64     	; 0x2198 <main+0x23a>
    2158:	8f 89       	ldd	r24, Y+23	; 0x17
    215a:	8f 30       	cpi	r24, 0x0F	; 15
    215c:	e9 f0       	breq	.+58     	; 0x2198 <main+0x23a>
					{
						if(z==0)
    215e:	8f 89       	ldd	r24, Y+23	; 0x17
    2160:	88 23       	and	r24, r24
    2162:	21 f4       	brne	.+8      	; 0x216c <main+0x20e>
						{
						LCD_VoidWriteData(48);
    2164:	80 e3       	ldi	r24, 0x30	; 48
    2166:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
    216a:	03 c0       	rjmp	.+6      	; 0x2172 <main+0x214>
						}else
						{
						LCD_VoidWriteNum(z);
    216c:	8f 89       	ldd	r24, Y+23	; 0x17
    216e:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <LCD_VoidWriteNum>
						}
						total_number=(total_number*10)+z;
    2172:	8f 85       	ldd	r24, Y+15	; 0x0f
    2174:	98 89       	ldd	r25, Y+16	; 0x10
    2176:	9c 01       	movw	r18, r24
    2178:	22 0f       	add	r18, r18
    217a:	33 1f       	adc	r19, r19
    217c:	c9 01       	movw	r24, r18
    217e:	88 0f       	add	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	88 0f       	add	r24, r24
    2184:	99 1f       	adc	r25, r25
    2186:	28 0f       	add	r18, r24
    2188:	39 1f       	adc	r19, r25
    218a:	8f 89       	ldd	r24, Y+23	; 0x17
    218c:	88 2f       	mov	r24, r24
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	82 0f       	add	r24, r18
    2192:	93 1f       	adc	r25, r19
    2194:	98 8b       	std	Y+16, r25	; 0x10
    2196:	8f 87       	std	Y+15, r24	; 0x0f
				LCD_VoidSetCursor(0,0);
				LCD_VoidFullName("DEC:");
				LCD_VoidSetCursor(1,0);
				LCD_VoidFullName("BIN:");
				LCD_VoidSetCursor(0,4);
				while(z!=15)
    2198:	8f 89       	ldd	r24, Y+23	; 0x17
    219a:	8f 30       	cpi	r24, 0x0F	; 15
    219c:	b9 f6       	brne	.-82     	; 0x214c <main+0x1ee>
						}
						total_number=(total_number*10)+z;
					}

				}
				LCD_VoidSetCursor(1,4);
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	64 e0       	ldi	r22, 0x04	; 4
    21a2:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
				CALC_DecToBin(total_number);
    21a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21a8:	98 89       	ldd	r25, Y+16	; 0x10
    21aa:	0e 94 9b 05 	call	0xb36	; 0xb36 <CALC_DecToBin>
    21ae:	06 c0       	rjmp	.+12     	; 0x21bc <main+0x25e>
				while(z!=14)
				{
					z=KEYPAD_VoidGetNumber();
    21b0:	0e 94 b9 09 	call	0x1372	; 0x1372 <KEYPAD_VoidGetNumber>
    21b4:	8f 8b       	std	Y+23, r24	; 0x17
					x=100;
    21b6:	84 e6       	ldi	r24, 0x64	; 100
    21b8:	89 8f       	std	Y+25, r24	; 0x19
					y=0;
    21ba:	18 8e       	std	Y+24, r1	; 0x18
					}

				}
				LCD_VoidSetCursor(1,4);
				CALC_DecToBin(total_number);
				while(z!=14)
    21bc:	8f 89       	ldd	r24, Y+23	; 0x17
    21be:	8e 30       	cpi	r24, 0x0E	; 14
    21c0:	b9 f7       	brne	.-18     	; 0x21b0 <main+0x252>
    21c2:	db ce       	rjmp	.-586    	; 0x1f7a <main+0x1c>
				break;

			}
			case 2:
			{
				z=100;
    21c4:	84 e6       	ldi	r24, 0x64	; 100
    21c6:	8f 8b       	std	Y+23, r24	; 0x17
				LCD_VoidSetCursor(0,0);
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	60 e0       	ldi	r22, 0x00	; 0
    21cc:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
				LCD_VoidFullName("DEC:");
    21d0:	84 e8       	ldi	r24, 0x84	; 132
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <LCD_VoidFullName>
				LCD_VoidSetCursor(1,0);
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	60 e0       	ldi	r22, 0x00	; 0
    21dc:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
				LCD_VoidFullName("HEX:");
    21e0:	8e e8       	ldi	r24, 0x8E	; 142
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <LCD_VoidFullName>
				LCD_VoidSetCursor(0,4);
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	64 e0       	ldi	r22, 0x04	; 4
    21ec:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
    21f0:	26 c0       	rjmp	.+76     	; 0x223e <main+0x2e0>
				while(z!=15)
				{
					z=KEYPAD_VoidGetNumber();
    21f2:	0e 94 b9 09 	call	0x1372	; 0x1372 <KEYPAD_VoidGetNumber>
    21f6:	8f 8b       	std	Y+23, r24	; 0x17
					if(z!=100 && z!=15)
    21f8:	8f 89       	ldd	r24, Y+23	; 0x17
    21fa:	84 36       	cpi	r24, 0x64	; 100
    21fc:	01 f1       	breq	.+64     	; 0x223e <main+0x2e0>
    21fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2200:	8f 30       	cpi	r24, 0x0F	; 15
    2202:	e9 f0       	breq	.+58     	; 0x223e <main+0x2e0>
					{
						if(z==0)
    2204:	8f 89       	ldd	r24, Y+23	; 0x17
    2206:	88 23       	and	r24, r24
    2208:	21 f4       	brne	.+8      	; 0x2212 <main+0x2b4>
						{
						LCD_VoidWriteData(48);
    220a:	80 e3       	ldi	r24, 0x30	; 48
    220c:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
    2210:	03 c0       	rjmp	.+6      	; 0x2218 <main+0x2ba>
						}else
						{
						LCD_VoidWriteNum(z);
    2212:	8f 89       	ldd	r24, Y+23	; 0x17
    2214:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <LCD_VoidWriteNum>
						}
						total_number=(total_number*10)+z;
    2218:	8f 85       	ldd	r24, Y+15	; 0x0f
    221a:	98 89       	ldd	r25, Y+16	; 0x10
    221c:	9c 01       	movw	r18, r24
    221e:	22 0f       	add	r18, r18
    2220:	33 1f       	adc	r19, r19
    2222:	c9 01       	movw	r24, r18
    2224:	88 0f       	add	r24, r24
    2226:	99 1f       	adc	r25, r25
    2228:	88 0f       	add	r24, r24
    222a:	99 1f       	adc	r25, r25
    222c:	28 0f       	add	r18, r24
    222e:	39 1f       	adc	r19, r25
    2230:	8f 89       	ldd	r24, Y+23	; 0x17
    2232:	88 2f       	mov	r24, r24
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	82 0f       	add	r24, r18
    2238:	93 1f       	adc	r25, r19
    223a:	98 8b       	std	Y+16, r25	; 0x10
    223c:	8f 87       	std	Y+15, r24	; 0x0f
				LCD_VoidSetCursor(0,0);
				LCD_VoidFullName("DEC:");
				LCD_VoidSetCursor(1,0);
				LCD_VoidFullName("HEX:");
				LCD_VoidSetCursor(0,4);
				while(z!=15)
    223e:	8f 89       	ldd	r24, Y+23	; 0x17
    2240:	8f 30       	cpi	r24, 0x0F	; 15
    2242:	b9 f6       	brne	.-82     	; 0x21f2 <main+0x294>
    2244:	20 c0       	rjmp	.+64     	; 0x2286 <main+0x328>
						total_number=(total_number*10)+z;
					}
				}
				while(total_number!=0)
				{
					HEX_bit=total_number%16;
    2246:	8f 85       	ldd	r24, Y+15	; 0x0f
    2248:	8f 70       	andi	r24, 0x0F	; 15
    224a:	8c 87       	std	Y+12, r24	; 0x0c
					total_number=total_number/16;
    224c:	8f 85       	ldd	r24, Y+15	; 0x0f
    224e:	98 89       	ldd	r25, Y+16	; 0x10
    2250:	92 95       	swap	r25
    2252:	82 95       	swap	r24
    2254:	8f 70       	andi	r24, 0x0F	; 15
    2256:	89 27       	eor	r24, r25
    2258:	9f 70       	andi	r25, 0x0F	; 15
    225a:	89 27       	eor	r24, r25
    225c:	98 8b       	std	Y+16, r25	; 0x10
    225e:	8f 87       	std	Y+15, r24	; 0x0f
					Hex_1[Count_down_hex]=HEX_bit;
    2260:	8a 85       	ldd	r24, Y+10	; 0x0a
    2262:	28 2f       	mov	r18, r24
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	8c 85       	ldd	r24, Y+12	; 0x0c
    2268:	48 2f       	mov	r20, r24
    226a:	50 e0       	ldi	r21, 0x00	; 0
    226c:	22 0f       	add	r18, r18
    226e:	33 1f       	adc	r19, r19
    2270:	ce 01       	movw	r24, r28
    2272:	01 96       	adiw	r24, 0x01	; 1
    2274:	82 0f       	add	r24, r18
    2276:	93 1f       	adc	r25, r19
    2278:	fc 01       	movw	r30, r24
    227a:	79 96       	adiw	r30, 0x19	; 25
    227c:	51 83       	std	Z+1, r21	; 0x01
    227e:	40 83       	st	Z, r20
					Count_down_hex++;
    2280:	8a 85       	ldd	r24, Y+10	; 0x0a
    2282:	8f 5f       	subi	r24, 0xFF	; 255
    2284:	8a 87       	std	Y+10, r24	; 0x0a
						LCD_VoidWriteNum(z);
						}
						total_number=(total_number*10)+z;
					}
				}
				while(total_number!=0)
    2286:	8f 85       	ldd	r24, Y+15	; 0x0f
    2288:	98 89       	ldd	r25, Y+16	; 0x10
    228a:	00 97       	sbiw	r24, 0x00	; 0
    228c:	e1 f6       	brne	.-72     	; 0x2246 <main+0x2e8>
					HEX_bit=total_number%16;
					total_number=total_number/16;
					Hex_1[Count_down_hex]=HEX_bit;
					Count_down_hex++;
				}
				Count_down_hex--;
    228e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2290:	81 50       	subi	r24, 0x01	; 1
    2292:	8a 87       	std	Y+10, r24	; 0x0a
    2294:	22 c0       	rjmp	.+68     	; 0x22da <main+0x37c>
				while(Count_down_hex>0)
				{
					Hex_2[Count_up_hex]=Hex_1[Count_down_hex];
    2296:	8b 85       	ldd	r24, Y+11	; 0x0b
    2298:	68 2f       	mov	r22, r24
    229a:	70 e0       	ldi	r23, 0x00	; 0
    229c:	8a 85       	ldd	r24, Y+10	; 0x0a
    229e:	88 2f       	mov	r24, r24
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	9c 01       	movw	r18, r24
    22a4:	22 0f       	add	r18, r18
    22a6:	33 1f       	adc	r19, r19
    22a8:	ce 01       	movw	r24, r28
    22aa:	01 96       	adiw	r24, 0x01	; 1
    22ac:	82 0f       	add	r24, r18
    22ae:	93 1f       	adc	r25, r19
    22b0:	fc 01       	movw	r30, r24
    22b2:	79 96       	adiw	r30, 0x19	; 25
    22b4:	40 81       	ld	r20, Z
    22b6:	51 81       	ldd	r21, Z+1	; 0x01
    22b8:	9b 01       	movw	r18, r22
    22ba:	22 0f       	add	r18, r18
    22bc:	33 1f       	adc	r19, r19
    22be:	ce 01       	movw	r24, r28
    22c0:	01 96       	adiw	r24, 0x01	; 1
    22c2:	82 0f       	add	r24, r18
    22c4:	93 1f       	adc	r25, r19
    22c6:	fc 01       	movw	r30, r24
    22c8:	7b 96       	adiw	r30, 0x1b	; 27
    22ca:	51 83       	std	Z+1, r21	; 0x01
    22cc:	40 83       	st	Z, r20
					Count_down_hex--;
    22ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    22d0:	81 50       	subi	r24, 0x01	; 1
    22d2:	8a 87       	std	Y+10, r24	; 0x0a
					Count_up_hex++;
    22d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    22d6:	8f 5f       	subi	r24, 0xFF	; 255
    22d8:	8b 87       	std	Y+11, r24	; 0x0b
					total_number=total_number/16;
					Hex_1[Count_down_hex]=HEX_bit;
					Count_down_hex++;
				}
				Count_down_hex--;
				while(Count_down_hex>0)
    22da:	8a 85       	ldd	r24, Y+10	; 0x0a
    22dc:	88 23       	and	r24, r24
    22de:	d9 f6       	brne	.-74     	; 0x2296 <main+0x338>
				{
					Hex_2[Count_up_hex]=Hex_1[Count_down_hex];
					Count_down_hex--;
					Count_up_hex++;
				}
				Hex_2[Count_up_hex]=Hex_1[Count_down_hex];
    22e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    22e2:	68 2f       	mov	r22, r24
    22e4:	70 e0       	ldi	r23, 0x00	; 0
    22e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    22e8:	88 2f       	mov	r24, r24
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	9c 01       	movw	r18, r24
    22ee:	22 0f       	add	r18, r18
    22f0:	33 1f       	adc	r19, r19
    22f2:	ce 01       	movw	r24, r28
    22f4:	01 96       	adiw	r24, 0x01	; 1
    22f6:	82 0f       	add	r24, r18
    22f8:	93 1f       	adc	r25, r19
    22fa:	fc 01       	movw	r30, r24
    22fc:	79 96       	adiw	r30, 0x19	; 25
    22fe:	40 81       	ld	r20, Z
    2300:	51 81       	ldd	r21, Z+1	; 0x01
    2302:	9b 01       	movw	r18, r22
    2304:	22 0f       	add	r18, r18
    2306:	33 1f       	adc	r19, r19
    2308:	ce 01       	movw	r24, r28
    230a:	01 96       	adiw	r24, 0x01	; 1
    230c:	82 0f       	add	r24, r18
    230e:	93 1f       	adc	r25, r19
    2310:	fc 01       	movw	r30, r24
    2312:	7b 96       	adiw	r30, 0x1b	; 27
    2314:	51 83       	std	Z+1, r21	; 0x01
    2316:	40 83       	st	Z, r20
				LCD_VoidSetCursor(1,4);
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	64 e0       	ldi	r22, 0x04	; 4
    231c:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
    2320:	98 c0       	rjmp	.+304    	; 0x2452 <main+0x4f4>
				while(Count_down_hex<=Count_up_hex)
				{
					if(Hex_2[Count_down_hex]>=10 && Hex_2[Count_down_hex]<=15)
    2322:	8a 85       	ldd	r24, Y+10	; 0x0a
    2324:	88 2f       	mov	r24, r24
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	9c 01       	movw	r18, r24
    232a:	22 0f       	add	r18, r18
    232c:	33 1f       	adc	r19, r19
    232e:	ce 01       	movw	r24, r28
    2330:	01 96       	adiw	r24, 0x01	; 1
    2332:	82 0f       	add	r24, r18
    2334:	93 1f       	adc	r25, r19
    2336:	fc 01       	movw	r30, r24
    2338:	7b 96       	adiw	r30, 0x1b	; 27
    233a:	80 81       	ld	r24, Z
    233c:	91 81       	ldd	r25, Z+1	; 0x01
    233e:	8a 30       	cpi	r24, 0x0A	; 10
    2340:	91 05       	cpc	r25, r1
    2342:	08 f4       	brcc	.+2      	; 0x2346 <main+0x3e8>
    2344:	5f c0       	rjmp	.+190    	; 0x2404 <main+0x4a6>
    2346:	8a 85       	ldd	r24, Y+10	; 0x0a
    2348:	88 2f       	mov	r24, r24
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	9c 01       	movw	r18, r24
    234e:	22 0f       	add	r18, r18
    2350:	33 1f       	adc	r19, r19
    2352:	ce 01       	movw	r24, r28
    2354:	01 96       	adiw	r24, 0x01	; 1
    2356:	82 0f       	add	r24, r18
    2358:	93 1f       	adc	r25, r19
    235a:	fc 01       	movw	r30, r24
    235c:	7b 96       	adiw	r30, 0x1b	; 27
    235e:	80 81       	ld	r24, Z
    2360:	91 81       	ldd	r25, Z+1	; 0x01
    2362:	80 31       	cpi	r24, 0x10	; 16
    2364:	91 05       	cpc	r25, r1
    2366:	08 f0       	brcs	.+2      	; 0x236a <main+0x40c>
    2368:	4d c0       	rjmp	.+154    	; 0x2404 <main+0x4a6>
					{
						switch(Hex_2[Count_down_hex])
    236a:	8a 85       	ldd	r24, Y+10	; 0x0a
    236c:	88 2f       	mov	r24, r24
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	9c 01       	movw	r18, r24
    2372:	22 0f       	add	r18, r18
    2374:	33 1f       	adc	r19, r19
    2376:	ce 01       	movw	r24, r28
    2378:	01 96       	adiw	r24, 0x01	; 1
    237a:	82 0f       	add	r24, r18
    237c:	93 1f       	adc	r25, r19
    237e:	fc 01       	movw	r30, r24
    2380:	7b 96       	adiw	r30, 0x1b	; 27
    2382:	40 81       	ld	r20, Z
    2384:	51 81       	ldd	r21, Z+1	; 0x01
    2386:	5d a7       	std	Y+45, r21	; 0x2d
    2388:	4c a7       	std	Y+44, r20	; 0x2c
    238a:	8c a5       	ldd	r24, Y+44	; 0x2c
    238c:	9d a5       	ldd	r25, Y+45	; 0x2d
    238e:	8c 30       	cpi	r24, 0x0C	; 12
    2390:	91 05       	cpc	r25, r1
    2392:	41 f1       	breq	.+80     	; 0x23e4 <main+0x486>
    2394:	2c a5       	ldd	r18, Y+44	; 0x2c
    2396:	3d a5       	ldd	r19, Y+45	; 0x2d
    2398:	2d 30       	cpi	r18, 0x0D	; 13
    239a:	31 05       	cpc	r19, r1
    239c:	58 f4       	brcc	.+22     	; 0x23b4 <main+0x456>
    239e:	4c a5       	ldd	r20, Y+44	; 0x2c
    23a0:	5d a5       	ldd	r21, Y+45	; 0x2d
    23a2:	4a 30       	cpi	r20, 0x0A	; 10
    23a4:	51 05       	cpc	r21, r1
    23a6:	b1 f0       	breq	.+44     	; 0x23d4 <main+0x476>
    23a8:	8c a5       	ldd	r24, Y+44	; 0x2c
    23aa:	9d a5       	ldd	r25, Y+45	; 0x2d
    23ac:	8b 30       	cpi	r24, 0x0B	; 11
    23ae:	91 05       	cpc	r25, r1
    23b0:	a9 f0       	breq	.+42     	; 0x23dc <main+0x47e>
    23b2:	4c c0       	rjmp	.+152    	; 0x244c <main+0x4ee>
    23b4:	2c a5       	ldd	r18, Y+44	; 0x2c
    23b6:	3d a5       	ldd	r19, Y+45	; 0x2d
    23b8:	2e 30       	cpi	r18, 0x0E	; 14
    23ba:	31 05       	cpc	r19, r1
    23bc:	d9 f0       	breq	.+54     	; 0x23f4 <main+0x496>
    23be:	4c a5       	ldd	r20, Y+44	; 0x2c
    23c0:	5d a5       	ldd	r21, Y+45	; 0x2d
    23c2:	4e 30       	cpi	r20, 0x0E	; 14
    23c4:	51 05       	cpc	r21, r1
    23c6:	90 f0       	brcs	.+36     	; 0x23ec <main+0x48e>
    23c8:	8c a5       	ldd	r24, Y+44	; 0x2c
    23ca:	9d a5       	ldd	r25, Y+45	; 0x2d
    23cc:	8f 30       	cpi	r24, 0x0F	; 15
    23ce:	91 05       	cpc	r25, r1
    23d0:	a9 f0       	breq	.+42     	; 0x23fc <main+0x49e>
    23d2:	3c c0       	rjmp	.+120    	; 0x244c <main+0x4ee>
						{
							case 10: LCD_VoidWriteData('A'); break;
    23d4:	81 e4       	ldi	r24, 0x41	; 65
    23d6:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
    23da:	38 c0       	rjmp	.+112    	; 0x244c <main+0x4ee>
							case 11: LCD_VoidWriteData('B'); break;
    23dc:	82 e4       	ldi	r24, 0x42	; 66
    23de:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
    23e2:	34 c0       	rjmp	.+104    	; 0x244c <main+0x4ee>
							case 12: LCD_VoidWriteData('C'); break;
    23e4:	83 e4       	ldi	r24, 0x43	; 67
    23e6:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
    23ea:	30 c0       	rjmp	.+96     	; 0x244c <main+0x4ee>
							case 13: LCD_VoidWriteData('D'); break;
    23ec:	84 e4       	ldi	r24, 0x44	; 68
    23ee:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
    23f2:	2c c0       	rjmp	.+88     	; 0x244c <main+0x4ee>
							case 14: LCD_VoidWriteData('E'); break;
    23f4:	85 e4       	ldi	r24, 0x45	; 69
    23f6:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
    23fa:	28 c0       	rjmp	.+80     	; 0x244c <main+0x4ee>
							case 15: LCD_VoidWriteData('F'); break;
    23fc:	86 e4       	ldi	r24, 0x46	; 70
    23fe:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
    2402:	24 c0       	rjmp	.+72     	; 0x244c <main+0x4ee>
						}

					}else
					{
						if(Hex_2[Count_down_hex]==0)
    2404:	8a 85       	ldd	r24, Y+10	; 0x0a
    2406:	88 2f       	mov	r24, r24
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	9c 01       	movw	r18, r24
    240c:	22 0f       	add	r18, r18
    240e:	33 1f       	adc	r19, r19
    2410:	ce 01       	movw	r24, r28
    2412:	01 96       	adiw	r24, 0x01	; 1
    2414:	82 0f       	add	r24, r18
    2416:	93 1f       	adc	r25, r19
    2418:	fc 01       	movw	r30, r24
    241a:	7b 96       	adiw	r30, 0x1b	; 27
    241c:	80 81       	ld	r24, Z
    241e:	91 81       	ldd	r25, Z+1	; 0x01
    2420:	00 97       	sbiw	r24, 0x00	; 0
    2422:	21 f4       	brne	.+8      	; 0x242c <main+0x4ce>
						 {
							LCD_VoidWriteData(48);
    2424:	80 e3       	ldi	r24, 0x30	; 48
    2426:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
    242a:	10 c0       	rjmp	.+32     	; 0x244c <main+0x4ee>

						 }else
						 	 {
							 	 LCD_VoidWriteNum(Hex_2[Count_down_hex]);
    242c:	8a 85       	ldd	r24, Y+10	; 0x0a
    242e:	88 2f       	mov	r24, r24
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	9c 01       	movw	r18, r24
    2434:	22 0f       	add	r18, r18
    2436:	33 1f       	adc	r19, r19
    2438:	ce 01       	movw	r24, r28
    243a:	01 96       	adiw	r24, 0x01	; 1
    243c:	82 0f       	add	r24, r18
    243e:	93 1f       	adc	r25, r19
    2440:	fc 01       	movw	r30, r24
    2442:	7b 96       	adiw	r30, 0x1b	; 27
    2444:	80 81       	ld	r24, Z
    2446:	91 81       	ldd	r25, Z+1	; 0x01
    2448:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <LCD_VoidWriteNum>
						 	 }
					}
						Count_down_hex++;
    244c:	8a 85       	ldd	r24, Y+10	; 0x0a
    244e:	8f 5f       	subi	r24, 0xFF	; 255
    2450:	8a 87       	std	Y+10, r24	; 0x0a
					Count_down_hex--;
					Count_up_hex++;
				}
				Hex_2[Count_up_hex]=Hex_1[Count_down_hex];
				LCD_VoidSetCursor(1,4);
				while(Count_down_hex<=Count_up_hex)
    2452:	9a 85       	ldd	r25, Y+10	; 0x0a
    2454:	8b 85       	ldd	r24, Y+11	; 0x0b
    2456:	89 17       	cp	r24, r25
    2458:	08 f0       	brcs	.+2      	; 0x245c <main+0x4fe>
    245a:	63 cf       	rjmp	.-314    	; 0x2322 <main+0x3c4>
    245c:	06 c0       	rjmp	.+12     	; 0x246a <main+0x50c>
						Count_down_hex++;
					}

				while(z!=14)
				{
					z=KEYPAD_VoidGetNumber();
    245e:	0e 94 b9 09 	call	0x1372	; 0x1372 <KEYPAD_VoidGetNumber>
    2462:	8f 8b       	std	Y+23, r24	; 0x17
					x=100;
    2464:	84 e6       	ldi	r24, 0x64	; 100
    2466:	89 8f       	std	Y+25, r24	; 0x19
					y=0;
    2468:	18 8e       	std	Y+24, r1	; 0x18
						 	 }
					}
						Count_down_hex++;
					}

				while(z!=14)
    246a:	8f 89       	ldd	r24, Y+23	; 0x17
    246c:	8e 30       	cpi	r24, 0x0E	; 14
    246e:	b9 f7       	brne	.-18     	; 0x245e <main+0x500>
    2470:	84 cd       	rjmp	.-1272   	; 0x1f7a <main+0x1c>
				}
				break;

			}
		}
	}else if(y==2)
    2472:	88 8d       	ldd	r24, Y+24	; 0x18
    2474:	82 30       	cpi	r24, 0x02	; 2
    2476:	09 f0       	breq	.+2      	; 0x247a <main+0x51c>
    2478:	30 c2       	rjmp	.+1120   	; 0x28da <main+0x97c>
	{
	LCD_VoidSetCursor(0,0);
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	60 e0       	ldi	r22, 0x00	; 0
    247e:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
	LCD_VoidWriteNum(1);
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <LCD_VoidWriteNum>
	LCD_VoidFullName("BIN>DEC");
    2488:	83 e9       	ldi	r24, 0x93	; 147
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <LCD_VoidFullName>
	LCD_VoidSetCursor(1,0);
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	60 e0       	ldi	r22, 0x00	; 0
    2494:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
	LCD_VoidWriteNum(2);
    2498:	82 e0       	ldi	r24, 0x02	; 2
    249a:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <LCD_VoidWriteNum>
	LCD_VoidFullName("BIN>Hex");
    249e:	8b e9       	ldi	r24, 0x9B	; 155
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <LCD_VoidFullName>
	LCD_VoidSetCursor(1,9);
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	69 e0       	ldi	r22, 0x09	; 9
    24aa:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
    24ae:	24 c0       	rjmp	.+72     	; 0x24f8 <main+0x59a>
	while(z!=15)
	{
		z=KEYPAD_VoidGetNumber();
    24b0:	0e 94 b9 09 	call	0x1372	; 0x1372 <KEYPAD_VoidGetNumber>
    24b4:	8f 8b       	std	Y+23, r24	; 0x17
		if(z!=100 && z!=15)
    24b6:	8f 89       	ldd	r24, Y+23	; 0x17
    24b8:	84 36       	cpi	r24, 0x64	; 100
    24ba:	c1 f0       	breq	.+48     	; 0x24ec <main+0x58e>
    24bc:	8f 89       	ldd	r24, Y+23	; 0x17
    24be:	8f 30       	cpi	r24, 0x0F	; 15
    24c0:	a9 f0       	breq	.+42     	; 0x24ec <main+0x58e>
		{
			switch(z)
    24c2:	8f 89       	ldd	r24, Y+23	; 0x17
    24c4:	28 2f       	mov	r18, r24
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	3b a7       	std	Y+43, r19	; 0x2b
    24ca:	2a a7       	std	Y+42, r18	; 0x2a
    24cc:	4a a5       	ldd	r20, Y+42	; 0x2a
    24ce:	5b a5       	ldd	r21, Y+43	; 0x2b
    24d0:	41 30       	cpi	r20, 0x01	; 1
    24d2:	51 05       	cpc	r21, r1
    24d4:	31 f0       	breq	.+12     	; 0x24e2 <main+0x584>
    24d6:	8a a5       	ldd	r24, Y+42	; 0x2a
    24d8:	9b a5       	ldd	r25, Y+43	; 0x2b
    24da:	82 30       	cpi	r24, 0x02	; 2
    24dc:	91 05       	cpc	r25, r1
    24de:	21 f0       	breq	.+8      	; 0x24e8 <main+0x58a>
    24e0:	05 c0       	rjmp	.+10     	; 0x24ec <main+0x58e>
			{
				case 1: num_dec=z; break;
    24e2:	8f 89       	ldd	r24, Y+23	; 0x17
    24e4:	89 8b       	std	Y+17, r24	; 0x11
    24e6:	02 c0       	rjmp	.+4      	; 0x24ec <main+0x58e>
				case 2: num_dec=z; break;
    24e8:	8f 89       	ldd	r24, Y+23	; 0x17
    24ea:	89 8b       	std	Y+17, r24	; 0x11
			}
		}
		if(z==1 || z==2)
    24ec:	8f 89       	ldd	r24, Y+23	; 0x17
    24ee:	81 30       	cpi	r24, 0x01	; 1
    24f0:	31 f0       	breq	.+12     	; 0x24fe <main+0x5a0>
    24f2:	8f 89       	ldd	r24, Y+23	; 0x17
    24f4:	82 30       	cpi	r24, 0x02	; 2
    24f6:	19 f0       	breq	.+6      	; 0x24fe <main+0x5a0>
	LCD_VoidFullName("BIN>DEC");
	LCD_VoidSetCursor(1,0);
	LCD_VoidWriteNum(2);
	LCD_VoidFullName("BIN>Hex");
	LCD_VoidSetCursor(1,9);
	while(z!=15)
    24f8:	8f 89       	ldd	r24, Y+23	; 0x17
    24fa:	8f 30       	cpi	r24, 0x0F	; 15
    24fc:	c9 f6       	brne	.-78     	; 0x24b0 <main+0x552>
		if(z==1 || z==2)
		{
			break;
		}
	}
	LCD_VoidWriteCommend(1);
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	0e 94 81 0a 	call	0x1502	; 0x1502 <LCD_VoidWriteCommend>
	switch(num_dec)
    2504:	89 89       	ldd	r24, Y+17	; 0x11
    2506:	28 2f       	mov	r18, r24
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	39 a7       	std	Y+41, r19	; 0x29
    250c:	28 a7       	std	Y+40, r18	; 0x28
    250e:	48 a5       	ldd	r20, Y+40	; 0x28
    2510:	59 a5       	ldd	r21, Y+41	; 0x29
    2512:	41 30       	cpi	r20, 0x01	; 1
    2514:	51 05       	cpc	r21, r1
    2516:	39 f0       	breq	.+14     	; 0x2526 <main+0x5c8>
    2518:	88 a5       	ldd	r24, Y+40	; 0x28
    251a:	99 a5       	ldd	r25, Y+41	; 0x29
    251c:	82 30       	cpi	r24, 0x02	; 2
    251e:	91 05       	cpc	r25, r1
    2520:	09 f4       	brne	.+2      	; 0x2524 <main+0x5c6>
    2522:	7e c0       	rjmp	.+252    	; 0x2620 <main+0x6c2>
    2524:	2a cd       	rjmp	.-1452   	; 0x1f7a <main+0x1c>
	{
			case 1:
			{
				z=100;
    2526:	84 e6       	ldi	r24, 0x64	; 100
    2528:	8f 8b       	std	Y+23, r24	; 0x17
				u8 j=11;
    252a:	8b e0       	ldi	r24, 0x0B	; 11
    252c:	8c 83       	std	Y+4, r24	; 0x04
				LCD_VoidSetCursor(0,0);
    252e:	80 e0       	ldi	r24, 0x00	; 0
    2530:	60 e0       	ldi	r22, 0x00	; 0
    2532:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
				LCD_VoidFullName("BIN:");
    2536:	89 e8       	ldi	r24, 0x89	; 137
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <LCD_VoidFullName>
				LCD_VoidSetCursor(1,0);
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	60 e0       	ldi	r22, 0x00	; 0
    2542:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
				LCD_VoidFullName("DEC:");
    2546:	84 e8       	ldi	r24, 0x84	; 132
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <LCD_VoidFullName>
				LCD_VoidSetCursor(0,4);
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	64 e0       	ldi	r22, 0x04	; 4
    2552:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
    2556:	2d c0       	rjmp	.+90     	; 0x25b2 <main+0x654>
				while(z!=15)
				{
					z=KEYPAD_VoidGetNumber();
    2558:	0e 94 b9 09 	call	0x1372	; 0x1372 <KEYPAD_VoidGetNumber>
    255c:	8f 8b       	std	Y+23, r24	; 0x17
					if(z!=100 && z!=15)
    255e:	8f 89       	ldd	r24, Y+23	; 0x17
    2560:	84 36       	cpi	r24, 0x64	; 100
    2562:	39 f1       	breq	.+78     	; 0x25b2 <main+0x654>
    2564:	8f 89       	ldd	r24, Y+23	; 0x17
    2566:	8f 30       	cpi	r24, 0x0F	; 15
    2568:	21 f1       	breq	.+72     	; 0x25b2 <main+0x654>
					{
						LCD_VoidSetCursor(0,j);
    256a:	80 e0       	ldi	r24, 0x00	; 0
    256c:	6c 81       	ldd	r22, Y+4	; 0x04
    256e:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
						if(z==0)
    2572:	8f 89       	ldd	r24, Y+23	; 0x17
    2574:	88 23       	and	r24, r24
    2576:	39 f4       	brne	.+14     	; 0x2586 <main+0x628>
						{
							LCD_VoidWriteData(48);
    2578:	80 e3       	ldi	r24, 0x30	; 48
    257a:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
							j=j-1;
    257e:	8c 81       	ldd	r24, Y+4	; 0x04
    2580:	81 50       	subi	r24, 0x01	; 1
    2582:	8c 83       	std	Y+4, r24	; 0x04
    2584:	09 c0       	rjmp	.+18     	; 0x2598 <main+0x63a>
						}else if(z==1)
    2586:	8f 89       	ldd	r24, Y+23	; 0x17
    2588:	81 30       	cpi	r24, 0x01	; 1
    258a:	31 f4       	brne	.+12     	; 0x2598 <main+0x63a>
						{
							LCD_VoidWriteNum(z);
    258c:	8f 89       	ldd	r24, Y+23	; 0x17
    258e:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <LCD_VoidWriteNum>
							j=j-1;
    2592:	8c 81       	ldd	r24, Y+4	; 0x04
    2594:	81 50       	subi	r24, 0x01	; 1
    2596:	8c 83       	std	Y+4, r24	; 0x04
						}
						bit_bit=CALC_BinToDec(z);
    2598:	8f 89       	ldd	r24, Y+23	; 0x17
    259a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <CALC_BinToDec>
    259e:	9e 8b       	std	Y+22, r25	; 0x16
    25a0:	8d 8b       	std	Y+21, r24	; 0x15
						total_decimal_number=total_decimal_number + bit_bit;
    25a2:	2b 89       	ldd	r18, Y+19	; 0x13
    25a4:	3c 89       	ldd	r19, Y+20	; 0x14
    25a6:	8d 89       	ldd	r24, Y+21	; 0x15
    25a8:	9e 89       	ldd	r25, Y+22	; 0x16
    25aa:	82 0f       	add	r24, r18
    25ac:	93 1f       	adc	r25, r19
    25ae:	9c 8b       	std	Y+20, r25	; 0x14
    25b0:	8b 8b       	std	Y+19, r24	; 0x13
				LCD_VoidSetCursor(0,0);
				LCD_VoidFullName("BIN:");
				LCD_VoidSetCursor(1,0);
				LCD_VoidFullName("DEC:");
				LCD_VoidSetCursor(0,4);
				while(z!=15)
    25b2:	8f 89       	ldd	r24, Y+23	; 0x17
    25b4:	8f 30       	cpi	r24, 0x0F	; 15
    25b6:	81 f6       	brne	.-96     	; 0x2558 <main+0x5fa>
						bit_bit=CALC_BinToDec(z);
						total_decimal_number=total_decimal_number + bit_bit;
					}

				}
				LCD_VoidSetCursor(1,4);
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	64 e0       	ldi	r22, 0x04	; 4
    25bc:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
				if(total_decimal_number%10==0)
    25c0:	8b 89       	ldd	r24, Y+19	; 0x13
    25c2:	9c 89       	ldd	r25, Y+20	; 0x14
    25c4:	2a e0       	ldi	r18, 0x0A	; 10
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	b9 01       	movw	r22, r18
    25ca:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <__udivmodhi4>
    25ce:	00 97       	sbiw	r24, 0x00	; 0
    25d0:	d9 f4       	brne	.+54     	; 0x2608 <main+0x6aa>
				{
					LCD_VoidWriteNum(total_decimal_number);
    25d2:	8b 89       	ldd	r24, Y+19	; 0x13
    25d4:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <LCD_VoidWriteNum>
    25d8:	0d c0       	rjmp	.+26     	; 0x25f4 <main+0x696>
					while(total_decimal_number%10==0)
					{
						LCD_VoidWriteData(48);
    25da:	80 e3       	ldi	r24, 0x30	; 48
    25dc:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
						total_decimal_number=total_decimal_number/10;
    25e0:	8b 89       	ldd	r24, Y+19	; 0x13
    25e2:	9c 89       	ldd	r25, Y+20	; 0x14
    25e4:	2a e0       	ldi	r18, 0x0A	; 10
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	b9 01       	movw	r22, r18
    25ea:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <__udivmodhi4>
    25ee:	cb 01       	movw	r24, r22
    25f0:	9c 8b       	std	Y+20, r25	; 0x14
    25f2:	8b 8b       	std	Y+19, r24	; 0x13
				}
				LCD_VoidSetCursor(1,4);
				if(total_decimal_number%10==0)
				{
					LCD_VoidWriteNum(total_decimal_number);
					while(total_decimal_number%10==0)
    25f4:	8b 89       	ldd	r24, Y+19	; 0x13
    25f6:	9c 89       	ldd	r25, Y+20	; 0x14
    25f8:	2a e0       	ldi	r18, 0x0A	; 10
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	b9 01       	movw	r22, r18
    25fe:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <__udivmodhi4>
    2602:	00 97       	sbiw	r24, 0x00	; 0
    2604:	51 f3       	breq	.-44     	; 0x25da <main+0x67c>
    2606:	03 c0       	rjmp	.+6      	; 0x260e <main+0x6b0>
						total_decimal_number=total_decimal_number/10;

					}
				}else
				{
					LCD_VoidWriteNum(total_decimal_number);
    2608:	8b 89       	ldd	r24, Y+19	; 0x13
    260a:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <LCD_VoidWriteNum>
				}

				z=0;
    260e:	1f 8a       	std	Y+23, r1	; 0x17
    2610:	03 c0       	rjmp	.+6      	; 0x2618 <main+0x6ba>
				while(z!=14)
				{
					z=KEYPAD_VoidGetNumber();
    2612:	0e 94 b9 09 	call	0x1372	; 0x1372 <KEYPAD_VoidGetNumber>
    2616:	8f 8b       	std	Y+23, r24	; 0x17
				{
					LCD_VoidWriteNum(total_decimal_number);
				}

				z=0;
				while(z!=14)
    2618:	8f 89       	ldd	r24, Y+23	; 0x17
    261a:	8e 30       	cpi	r24, 0x0E	; 14
    261c:	d1 f7       	brne	.-12     	; 0x2612 <main+0x6b4>
    261e:	ad cc       	rjmp	.-1702   	; 0x1f7a <main+0x1c>
				}
				break;
			}
			case 2:
			{
				z=100;
    2620:	84 e6       	ldi	r24, 0x64	; 100
    2622:	8f 8b       	std	Y+23, r24	; 0x17
				u8 j=11;
    2624:	8b e0       	ldi	r24, 0x0B	; 11
    2626:	8b 83       	std	Y+3, r24	; 0x03
				LCD_VoidSetCursor(0,0);
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	60 e0       	ldi	r22, 0x00	; 0
    262c:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
				LCD_VoidFullName("BIN:");
    2630:	89 e8       	ldi	r24, 0x89	; 137
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <LCD_VoidFullName>
				LCD_VoidSetCursor(1,0);
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	60 e0       	ldi	r22, 0x00	; 0
    263c:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
				LCD_VoidFullName("HEX:");
    2640:	8e e8       	ldi	r24, 0x8E	; 142
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <LCD_VoidFullName>
				LCD_VoidSetCursor(0,4);
    2648:	80 e0       	ldi	r24, 0x00	; 0
    264a:	64 e0       	ldi	r22, 0x04	; 4
    264c:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
    2650:	2d c0       	rjmp	.+90     	; 0x26ac <main+0x74e>
				while(z!=15)
					{
						z=KEYPAD_VoidGetNumber();
    2652:	0e 94 b9 09 	call	0x1372	; 0x1372 <KEYPAD_VoidGetNumber>
    2656:	8f 8b       	std	Y+23, r24	; 0x17
						if(z!=100 && z!=15)
    2658:	8f 89       	ldd	r24, Y+23	; 0x17
    265a:	84 36       	cpi	r24, 0x64	; 100
    265c:	39 f1       	breq	.+78     	; 0x26ac <main+0x74e>
    265e:	8f 89       	ldd	r24, Y+23	; 0x17
    2660:	8f 30       	cpi	r24, 0x0F	; 15
    2662:	21 f1       	breq	.+72     	; 0x26ac <main+0x74e>
						{
							LCD_VoidSetCursor(0,j);
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	6b 81       	ldd	r22, Y+3	; 0x03
    2668:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
							if(z==0)
    266c:	8f 89       	ldd	r24, Y+23	; 0x17
    266e:	88 23       	and	r24, r24
    2670:	39 f4       	brne	.+14     	; 0x2680 <main+0x722>
								{
									LCD_VoidWriteData(48);
    2672:	80 e3       	ldi	r24, 0x30	; 48
    2674:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
									j=j-1;
    2678:	8b 81       	ldd	r24, Y+3	; 0x03
    267a:	81 50       	subi	r24, 0x01	; 1
    267c:	8b 83       	std	Y+3, r24	; 0x03
    267e:	09 c0       	rjmp	.+18     	; 0x2692 <main+0x734>
								}else if(z==1)
    2680:	8f 89       	ldd	r24, Y+23	; 0x17
    2682:	81 30       	cpi	r24, 0x01	; 1
    2684:	31 f4       	brne	.+12     	; 0x2692 <main+0x734>
								{
									LCD_VoidWriteNum(z);
    2686:	8f 89       	ldd	r24, Y+23	; 0x17
    2688:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <LCD_VoidWriteNum>
									j=j-1;
    268c:	8b 81       	ldd	r24, Y+3	; 0x03
    268e:	81 50       	subi	r24, 0x01	; 1
    2690:	8b 83       	std	Y+3, r24	; 0x03
								}
							bit_bit=CALC_BinToDec(z);
    2692:	8f 89       	ldd	r24, Y+23	; 0x17
    2694:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <CALC_BinToDec>
    2698:	9e 8b       	std	Y+22, r25	; 0x16
    269a:	8d 8b       	std	Y+21, r24	; 0x15
							total_decimal_number=total_decimal_number + bit_bit;
    269c:	2b 89       	ldd	r18, Y+19	; 0x13
    269e:	3c 89       	ldd	r19, Y+20	; 0x14
    26a0:	8d 89       	ldd	r24, Y+21	; 0x15
    26a2:	9e 89       	ldd	r25, Y+22	; 0x16
    26a4:	82 0f       	add	r24, r18
    26a6:	93 1f       	adc	r25, r19
    26a8:	9c 8b       	std	Y+20, r25	; 0x14
    26aa:	8b 8b       	std	Y+19, r24	; 0x13
				LCD_VoidSetCursor(0,0);
				LCD_VoidFullName("BIN:");
				LCD_VoidSetCursor(1,0);
				LCD_VoidFullName("HEX:");
				LCD_VoidSetCursor(0,4);
				while(z!=15)
    26ac:	8f 89       	ldd	r24, Y+23	; 0x17
    26ae:	8f 30       	cpi	r24, 0x0F	; 15
    26b0:	81 f6       	brne	.-96     	; 0x2652 <main+0x6f4>
    26b2:	20 c0       	rjmp	.+64     	; 0x26f4 <main+0x796>
						}

					}
				while(total_decimal_number!=0)
				{
					HEX_bit=total_decimal_number%16;
    26b4:	8b 89       	ldd	r24, Y+19	; 0x13
    26b6:	8f 70       	andi	r24, 0x0F	; 15
    26b8:	8c 87       	std	Y+12, r24	; 0x0c
					total_decimal_number=total_decimal_number/16;
    26ba:	8b 89       	ldd	r24, Y+19	; 0x13
    26bc:	9c 89       	ldd	r25, Y+20	; 0x14
    26be:	92 95       	swap	r25
    26c0:	82 95       	swap	r24
    26c2:	8f 70       	andi	r24, 0x0F	; 15
    26c4:	89 27       	eor	r24, r25
    26c6:	9f 70       	andi	r25, 0x0F	; 15
    26c8:	89 27       	eor	r24, r25
    26ca:	9c 8b       	std	Y+20, r25	; 0x14
    26cc:	8b 8b       	std	Y+19, r24	; 0x13
					Hex_1[Count_down_hex]=HEX_bit;
    26ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    26d0:	28 2f       	mov	r18, r24
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    26d6:	48 2f       	mov	r20, r24
    26d8:	50 e0       	ldi	r21, 0x00	; 0
    26da:	22 0f       	add	r18, r18
    26dc:	33 1f       	adc	r19, r19
    26de:	ce 01       	movw	r24, r28
    26e0:	01 96       	adiw	r24, 0x01	; 1
    26e2:	82 0f       	add	r24, r18
    26e4:	93 1f       	adc	r25, r19
    26e6:	fc 01       	movw	r30, r24
    26e8:	79 96       	adiw	r30, 0x19	; 25
    26ea:	51 83       	std	Z+1, r21	; 0x01
    26ec:	40 83       	st	Z, r20
					Count_down_hex++;
    26ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    26f0:	8f 5f       	subi	r24, 0xFF	; 255
    26f2:	8a 87       	std	Y+10, r24	; 0x0a
							bit_bit=CALC_BinToDec(z);
							total_decimal_number=total_decimal_number + bit_bit;
						}

					}
				while(total_decimal_number!=0)
    26f4:	8b 89       	ldd	r24, Y+19	; 0x13
    26f6:	9c 89       	ldd	r25, Y+20	; 0x14
    26f8:	00 97       	sbiw	r24, 0x00	; 0
    26fa:	e1 f6       	brne	.-72     	; 0x26b4 <main+0x756>
					HEX_bit=total_decimal_number%16;
					total_decimal_number=total_decimal_number/16;
					Hex_1[Count_down_hex]=HEX_bit;
					Count_down_hex++;
				}
				Count_down_hex--;
    26fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    26fe:	81 50       	subi	r24, 0x01	; 1
    2700:	8a 87       	std	Y+10, r24	; 0x0a
    2702:	22 c0       	rjmp	.+68     	; 0x2748 <main+0x7ea>
				while(Count_down_hex>0)
				{
					Hex_2[Count_up_hex]=Hex_1[Count_down_hex];
    2704:	8b 85       	ldd	r24, Y+11	; 0x0b
    2706:	68 2f       	mov	r22, r24
    2708:	70 e0       	ldi	r23, 0x00	; 0
    270a:	8a 85       	ldd	r24, Y+10	; 0x0a
    270c:	88 2f       	mov	r24, r24
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	9c 01       	movw	r18, r24
    2712:	22 0f       	add	r18, r18
    2714:	33 1f       	adc	r19, r19
    2716:	ce 01       	movw	r24, r28
    2718:	01 96       	adiw	r24, 0x01	; 1
    271a:	82 0f       	add	r24, r18
    271c:	93 1f       	adc	r25, r19
    271e:	fc 01       	movw	r30, r24
    2720:	79 96       	adiw	r30, 0x19	; 25
    2722:	40 81       	ld	r20, Z
    2724:	51 81       	ldd	r21, Z+1	; 0x01
    2726:	9b 01       	movw	r18, r22
    2728:	22 0f       	add	r18, r18
    272a:	33 1f       	adc	r19, r19
    272c:	ce 01       	movw	r24, r28
    272e:	01 96       	adiw	r24, 0x01	; 1
    2730:	82 0f       	add	r24, r18
    2732:	93 1f       	adc	r25, r19
    2734:	fc 01       	movw	r30, r24
    2736:	7b 96       	adiw	r30, 0x1b	; 27
    2738:	51 83       	std	Z+1, r21	; 0x01
    273a:	40 83       	st	Z, r20
					Count_down_hex--;
    273c:	8a 85       	ldd	r24, Y+10	; 0x0a
    273e:	81 50       	subi	r24, 0x01	; 1
    2740:	8a 87       	std	Y+10, r24	; 0x0a
					Count_up_hex++;
    2742:	8b 85       	ldd	r24, Y+11	; 0x0b
    2744:	8f 5f       	subi	r24, 0xFF	; 255
    2746:	8b 87       	std	Y+11, r24	; 0x0b
					total_decimal_number=total_decimal_number/16;
					Hex_1[Count_down_hex]=HEX_bit;
					Count_down_hex++;
				}
				Count_down_hex--;
				while(Count_down_hex>0)
    2748:	8a 85       	ldd	r24, Y+10	; 0x0a
    274a:	88 23       	and	r24, r24
    274c:	d9 f6       	brne	.-74     	; 0x2704 <main+0x7a6>
				{
					Hex_2[Count_up_hex]=Hex_1[Count_down_hex];
					Count_down_hex--;
					Count_up_hex++;
				}
				Hex_2[Count_up_hex]=Hex_1[Count_down_hex];
    274e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2750:	68 2f       	mov	r22, r24
    2752:	70 e0       	ldi	r23, 0x00	; 0
    2754:	8a 85       	ldd	r24, Y+10	; 0x0a
    2756:	88 2f       	mov	r24, r24
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	9c 01       	movw	r18, r24
    275c:	22 0f       	add	r18, r18
    275e:	33 1f       	adc	r19, r19
    2760:	ce 01       	movw	r24, r28
    2762:	01 96       	adiw	r24, 0x01	; 1
    2764:	82 0f       	add	r24, r18
    2766:	93 1f       	adc	r25, r19
    2768:	fc 01       	movw	r30, r24
    276a:	79 96       	adiw	r30, 0x19	; 25
    276c:	40 81       	ld	r20, Z
    276e:	51 81       	ldd	r21, Z+1	; 0x01
    2770:	9b 01       	movw	r18, r22
    2772:	22 0f       	add	r18, r18
    2774:	33 1f       	adc	r19, r19
    2776:	ce 01       	movw	r24, r28
    2778:	01 96       	adiw	r24, 0x01	; 1
    277a:	82 0f       	add	r24, r18
    277c:	93 1f       	adc	r25, r19
    277e:	fc 01       	movw	r30, r24
    2780:	7b 96       	adiw	r30, 0x1b	; 27
    2782:	51 83       	std	Z+1, r21	; 0x01
    2784:	40 83       	st	Z, r20
				LCD_VoidSetCursor(1,4);
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	64 e0       	ldi	r22, 0x04	; 4
    278a:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
    278e:	98 c0       	rjmp	.+304    	; 0x28c0 <main+0x962>
				while(Count_down_hex<=Count_up_hex)
				{
					if(Hex_2[Count_down_hex]>=10 && Hex_2[Count_down_hex]<=15)
    2790:	8a 85       	ldd	r24, Y+10	; 0x0a
    2792:	88 2f       	mov	r24, r24
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	9c 01       	movw	r18, r24
    2798:	22 0f       	add	r18, r18
    279a:	33 1f       	adc	r19, r19
    279c:	ce 01       	movw	r24, r28
    279e:	01 96       	adiw	r24, 0x01	; 1
    27a0:	82 0f       	add	r24, r18
    27a2:	93 1f       	adc	r25, r19
    27a4:	fc 01       	movw	r30, r24
    27a6:	7b 96       	adiw	r30, 0x1b	; 27
    27a8:	80 81       	ld	r24, Z
    27aa:	91 81       	ldd	r25, Z+1	; 0x01
    27ac:	8a 30       	cpi	r24, 0x0A	; 10
    27ae:	91 05       	cpc	r25, r1
    27b0:	08 f4       	brcc	.+2      	; 0x27b4 <main+0x856>
    27b2:	5f c0       	rjmp	.+190    	; 0x2872 <main+0x914>
    27b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    27b6:	88 2f       	mov	r24, r24
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	9c 01       	movw	r18, r24
    27bc:	22 0f       	add	r18, r18
    27be:	33 1f       	adc	r19, r19
    27c0:	ce 01       	movw	r24, r28
    27c2:	01 96       	adiw	r24, 0x01	; 1
    27c4:	82 0f       	add	r24, r18
    27c6:	93 1f       	adc	r25, r19
    27c8:	fc 01       	movw	r30, r24
    27ca:	7b 96       	adiw	r30, 0x1b	; 27
    27cc:	80 81       	ld	r24, Z
    27ce:	91 81       	ldd	r25, Z+1	; 0x01
    27d0:	80 31       	cpi	r24, 0x10	; 16
    27d2:	91 05       	cpc	r25, r1
    27d4:	08 f0       	brcs	.+2      	; 0x27d8 <main+0x87a>
    27d6:	4d c0       	rjmp	.+154    	; 0x2872 <main+0x914>
					{
						switch(Hex_2[Count_down_hex])
    27d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    27da:	88 2f       	mov	r24, r24
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	9c 01       	movw	r18, r24
    27e0:	22 0f       	add	r18, r18
    27e2:	33 1f       	adc	r19, r19
    27e4:	ce 01       	movw	r24, r28
    27e6:	01 96       	adiw	r24, 0x01	; 1
    27e8:	82 0f       	add	r24, r18
    27ea:	93 1f       	adc	r25, r19
    27ec:	fc 01       	movw	r30, r24
    27ee:	7b 96       	adiw	r30, 0x1b	; 27
    27f0:	20 81       	ld	r18, Z
    27f2:	31 81       	ldd	r19, Z+1	; 0x01
    27f4:	3f a3       	std	Y+39, r19	; 0x27
    27f6:	2e a3       	std	Y+38, r18	; 0x26
    27f8:	4e a1       	ldd	r20, Y+38	; 0x26
    27fa:	5f a1       	ldd	r21, Y+39	; 0x27
    27fc:	4c 30       	cpi	r20, 0x0C	; 12
    27fe:	51 05       	cpc	r21, r1
    2800:	41 f1       	breq	.+80     	; 0x2852 <main+0x8f4>
    2802:	8e a1       	ldd	r24, Y+38	; 0x26
    2804:	9f a1       	ldd	r25, Y+39	; 0x27
    2806:	8d 30       	cpi	r24, 0x0D	; 13
    2808:	91 05       	cpc	r25, r1
    280a:	58 f4       	brcc	.+22     	; 0x2822 <main+0x8c4>
    280c:	2e a1       	ldd	r18, Y+38	; 0x26
    280e:	3f a1       	ldd	r19, Y+39	; 0x27
    2810:	2a 30       	cpi	r18, 0x0A	; 10
    2812:	31 05       	cpc	r19, r1
    2814:	b1 f0       	breq	.+44     	; 0x2842 <main+0x8e4>
    2816:	4e a1       	ldd	r20, Y+38	; 0x26
    2818:	5f a1       	ldd	r21, Y+39	; 0x27
    281a:	4b 30       	cpi	r20, 0x0B	; 11
    281c:	51 05       	cpc	r21, r1
    281e:	a9 f0       	breq	.+42     	; 0x284a <main+0x8ec>
    2820:	4c c0       	rjmp	.+152    	; 0x28ba <main+0x95c>
    2822:	8e a1       	ldd	r24, Y+38	; 0x26
    2824:	9f a1       	ldd	r25, Y+39	; 0x27
    2826:	8e 30       	cpi	r24, 0x0E	; 14
    2828:	91 05       	cpc	r25, r1
    282a:	d9 f0       	breq	.+54     	; 0x2862 <main+0x904>
    282c:	2e a1       	ldd	r18, Y+38	; 0x26
    282e:	3f a1       	ldd	r19, Y+39	; 0x27
    2830:	2e 30       	cpi	r18, 0x0E	; 14
    2832:	31 05       	cpc	r19, r1
    2834:	90 f0       	brcs	.+36     	; 0x285a <main+0x8fc>
    2836:	4e a1       	ldd	r20, Y+38	; 0x26
    2838:	5f a1       	ldd	r21, Y+39	; 0x27
    283a:	4f 30       	cpi	r20, 0x0F	; 15
    283c:	51 05       	cpc	r21, r1
    283e:	a9 f0       	breq	.+42     	; 0x286a <main+0x90c>
    2840:	3c c0       	rjmp	.+120    	; 0x28ba <main+0x95c>
						{
							case 10: LCD_VoidWriteData('A'); break;
    2842:	81 e4       	ldi	r24, 0x41	; 65
    2844:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
    2848:	38 c0       	rjmp	.+112    	; 0x28ba <main+0x95c>
							case 11: LCD_VoidWriteData('B'); break;
    284a:	82 e4       	ldi	r24, 0x42	; 66
    284c:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
    2850:	34 c0       	rjmp	.+104    	; 0x28ba <main+0x95c>
							case 12: LCD_VoidWriteData('C'); break;
    2852:	83 e4       	ldi	r24, 0x43	; 67
    2854:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
    2858:	30 c0       	rjmp	.+96     	; 0x28ba <main+0x95c>
							case 13: LCD_VoidWriteData('D'); break;
    285a:	84 e4       	ldi	r24, 0x44	; 68
    285c:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
    2860:	2c c0       	rjmp	.+88     	; 0x28ba <main+0x95c>
							case 14: LCD_VoidWriteData('E'); break;
    2862:	85 e4       	ldi	r24, 0x45	; 69
    2864:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
    2868:	28 c0       	rjmp	.+80     	; 0x28ba <main+0x95c>
							case 15: LCD_VoidWriteData('F'); break;
    286a:	86 e4       	ldi	r24, 0x46	; 70
    286c:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
    2870:	24 c0       	rjmp	.+72     	; 0x28ba <main+0x95c>
						}

					}else
					{
						if(Hex_2[Count_down_hex]==0)
    2872:	8a 85       	ldd	r24, Y+10	; 0x0a
    2874:	88 2f       	mov	r24, r24
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	9c 01       	movw	r18, r24
    287a:	22 0f       	add	r18, r18
    287c:	33 1f       	adc	r19, r19
    287e:	ce 01       	movw	r24, r28
    2880:	01 96       	adiw	r24, 0x01	; 1
    2882:	82 0f       	add	r24, r18
    2884:	93 1f       	adc	r25, r19
    2886:	fc 01       	movw	r30, r24
    2888:	7b 96       	adiw	r30, 0x1b	; 27
    288a:	80 81       	ld	r24, Z
    288c:	91 81       	ldd	r25, Z+1	; 0x01
    288e:	00 97       	sbiw	r24, 0x00	; 0
    2890:	21 f4       	brne	.+8      	; 0x289a <main+0x93c>
						 {
							LCD_VoidWriteData(48);
    2892:	80 e3       	ldi	r24, 0x30	; 48
    2894:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
    2898:	10 c0       	rjmp	.+32     	; 0x28ba <main+0x95c>

						  }else
							{
								LCD_VoidWriteNum(Hex_2[Count_down_hex]);
    289a:	8a 85       	ldd	r24, Y+10	; 0x0a
    289c:	88 2f       	mov	r24, r24
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	9c 01       	movw	r18, r24
    28a2:	22 0f       	add	r18, r18
    28a4:	33 1f       	adc	r19, r19
    28a6:	ce 01       	movw	r24, r28
    28a8:	01 96       	adiw	r24, 0x01	; 1
    28aa:	82 0f       	add	r24, r18
    28ac:	93 1f       	adc	r25, r19
    28ae:	fc 01       	movw	r30, r24
    28b0:	7b 96       	adiw	r30, 0x1b	; 27
    28b2:	80 81       	ld	r24, Z
    28b4:	91 81       	ldd	r25, Z+1	; 0x01
    28b6:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <LCD_VoidWriteNum>
							}

					}
					Count_down_hex++;
    28ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    28bc:	8f 5f       	subi	r24, 0xFF	; 255
    28be:	8a 87       	std	Y+10, r24	; 0x0a
					Count_down_hex--;
					Count_up_hex++;
				}
				Hex_2[Count_up_hex]=Hex_1[Count_down_hex];
				LCD_VoidSetCursor(1,4);
				while(Count_down_hex<=Count_up_hex)
    28c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    28c4:	89 17       	cp	r24, r25
    28c6:	08 f0       	brcs	.+2      	; 0x28ca <main+0x96c>
    28c8:	63 cf       	rjmp	.-314    	; 0x2790 <main+0x832>
    28ca:	03 c0       	rjmp	.+6      	; 0x28d2 <main+0x974>
					}
					Count_down_hex++;
				}
				while(z!=14)
				{
					z=KEYPAD_VoidGetNumber();
    28cc:	0e 94 b9 09 	call	0x1372	; 0x1372 <KEYPAD_VoidGetNumber>
    28d0:	8f 8b       	std	Y+23, r24	; 0x17
							}

					}
					Count_down_hex++;
				}
				while(z!=14)
    28d2:	8f 89       	ldd	r24, Y+23	; 0x17
    28d4:	8e 30       	cpi	r24, 0x0E	; 14
    28d6:	d1 f7       	brne	.-12     	; 0x28cc <main+0x96e>
    28d8:	50 cb       	rjmp	.-2400   	; 0x1f7a <main+0x1c>

	}
	}

	/* change from Hex to binary or decimal*/
	else if(y==3)
    28da:	88 8d       	ldd	r24, Y+24	; 0x18
    28dc:	83 30       	cpi	r24, 0x03	; 3
    28de:	09 f0       	breq	.+2      	; 0x28e2 <main+0x984>
    28e0:	4c cb       	rjmp	.-2408   	; 0x1f7a <main+0x1c>
	{
			LCD_VoidSetCursor(0,0);
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	60 e0       	ldi	r22, 0x00	; 0
    28e6:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
			LCD_VoidWriteNum(1);
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <LCD_VoidWriteNum>
			LCD_VoidFullName("HEX>DEC");
    28f0:	83 ea       	ldi	r24, 0xA3	; 163
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <LCD_VoidFullName>
			LCD_VoidSetCursor(1,0);
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	60 e0       	ldi	r22, 0x00	; 0
    28fc:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
			LCD_VoidWriteNum(2);
    2900:	82 e0       	ldi	r24, 0x02	; 2
    2902:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <LCD_VoidWriteNum>
			LCD_VoidFullName("HEX>BIN");
    2906:	8b ea       	ldi	r24, 0xAB	; 171
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <LCD_VoidFullName>
			LCD_VoidSetCursor(1,9);
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	69 e0       	ldi	r22, 0x09	; 9
    2912:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
    2916:	24 c0       	rjmp	.+72     	; 0x2960 <main+0xa02>
			while(z!=15)
			{
				z=KEYPAD_VoidGetNumber();
    2918:	0e 94 b9 09 	call	0x1372	; 0x1372 <KEYPAD_VoidGetNumber>
    291c:	8f 8b       	std	Y+23, r24	; 0x17
				if(z!=100 && z!=15)
    291e:	8f 89       	ldd	r24, Y+23	; 0x17
    2920:	84 36       	cpi	r24, 0x64	; 100
    2922:	c1 f0       	breq	.+48     	; 0x2954 <main+0x9f6>
    2924:	8f 89       	ldd	r24, Y+23	; 0x17
    2926:	8f 30       	cpi	r24, 0x0F	; 15
    2928:	a9 f0       	breq	.+42     	; 0x2954 <main+0x9f6>
				{
					switch(z)
    292a:	8f 89       	ldd	r24, Y+23	; 0x17
    292c:	28 2f       	mov	r18, r24
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	3d a3       	std	Y+37, r19	; 0x25
    2932:	2c a3       	std	Y+36, r18	; 0x24
    2934:	4c a1       	ldd	r20, Y+36	; 0x24
    2936:	5d a1       	ldd	r21, Y+37	; 0x25
    2938:	41 30       	cpi	r20, 0x01	; 1
    293a:	51 05       	cpc	r21, r1
    293c:	31 f0       	breq	.+12     	; 0x294a <main+0x9ec>
    293e:	8c a1       	ldd	r24, Y+36	; 0x24
    2940:	9d a1       	ldd	r25, Y+37	; 0x25
    2942:	82 30       	cpi	r24, 0x02	; 2
    2944:	91 05       	cpc	r25, r1
    2946:	21 f0       	breq	.+8      	; 0x2950 <main+0x9f2>
    2948:	05 c0       	rjmp	.+10     	; 0x2954 <main+0x9f6>
					{
						case 1: num_dec=z; break;
    294a:	8f 89       	ldd	r24, Y+23	; 0x17
    294c:	89 8b       	std	Y+17, r24	; 0x11
    294e:	02 c0       	rjmp	.+4      	; 0x2954 <main+0x9f6>
						case 2: num_dec=z; break;
    2950:	8f 89       	ldd	r24, Y+23	; 0x17
    2952:	89 8b       	std	Y+17, r24	; 0x11
					}
				}
				if(z==1 || z==2)
    2954:	8f 89       	ldd	r24, Y+23	; 0x17
    2956:	81 30       	cpi	r24, 0x01	; 1
    2958:	31 f0       	breq	.+12     	; 0x2966 <main+0xa08>
    295a:	8f 89       	ldd	r24, Y+23	; 0x17
    295c:	82 30       	cpi	r24, 0x02	; 2
    295e:	19 f0       	breq	.+6      	; 0x2966 <main+0xa08>
			LCD_VoidFullName("HEX>DEC");
			LCD_VoidSetCursor(1,0);
			LCD_VoidWriteNum(2);
			LCD_VoidFullName("HEX>BIN");
			LCD_VoidSetCursor(1,9);
			while(z!=15)
    2960:	8f 89       	ldd	r24, Y+23	; 0x17
    2962:	8f 30       	cpi	r24, 0x0F	; 15
    2964:	c9 f6       	brne	.-78     	; 0x2918 <main+0x9ba>
				if(z==1 || z==2)
				{
					break;
				}
			}
			LCD_VoidWriteCommend(1);
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	0e 94 81 0a 	call	0x1502	; 0x1502 <LCD_VoidWriteCommend>
			switch(num_dec)
    296c:	89 89       	ldd	r24, Y+17	; 0x11
    296e:	28 2f       	mov	r18, r24
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	3b a3       	std	Y+35, r19	; 0x23
    2974:	2a a3       	std	Y+34, r18	; 0x22
    2976:	4a a1       	ldd	r20, Y+34	; 0x22
    2978:	5b a1       	ldd	r21, Y+35	; 0x23
    297a:	41 30       	cpi	r20, 0x01	; 1
    297c:	51 05       	cpc	r21, r1
    297e:	39 f0       	breq	.+14     	; 0x298e <main+0xa30>
    2980:	8a a1       	ldd	r24, Y+34	; 0x22
    2982:	9b a1       	ldd	r25, Y+35	; 0x23
    2984:	82 30       	cpi	r24, 0x02	; 2
    2986:	91 05       	cpc	r25, r1
    2988:	09 f4       	brne	.+2      	; 0x298c <main+0xa2e>
    298a:	7f c1       	rjmp	.+766    	; 0x2c8a <main+0xd2c>
    298c:	f6 ca       	rjmp	.-2580   	; 0x1f7a <main+0x1c>
			{
			case 1:
				{
					LCD_VoidSetCursor(0,0);
    298e:	80 e0       	ldi	r24, 0x00	; 0
    2990:	60 e0       	ldi	r22, 0x00	; 0
    2992:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
					LCD_VoidFullName("HEX:");
    2996:	8e e8       	ldi	r24, 0x8E	; 142
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <LCD_VoidFullName>
					LCD_VoidSetCursor(1,0);
    299e:	81 e0       	ldi	r24, 0x01	; 1
    29a0:	60 e0       	ldi	r22, 0x00	; 0
    29a2:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
					LCD_VoidFullName("DEC:");
    29a6:	84 e8       	ldi	r24, 0x84	; 132
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <LCD_VoidFullName>
					LCD_VoidSetCursor(0,4);
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	64 e0       	ldi	r22, 0x04	; 4
    29b2:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
    29b6:	a2 c0       	rjmp	.+324    	; 0x2afc <main+0xb9e>
					while(z!=16)
					{
						z=KEYPAD_VoidGetNumber();
    29b8:	0e 94 b9 09 	call	0x1372	; 0x1372 <KEYPAD_VoidGetNumber>
    29bc:	8f 8b       	std	Y+23, r24	; 0x17
						if(z==15)
    29be:	8f 89       	ldd	r24, Y+23	; 0x17
    29c0:	8f 30       	cpi	r24, 0x0F	; 15
    29c2:	21 f4       	brne	.+8      	; 0x29cc <main+0xa6e>
						{
							z=z+1;
    29c4:	8f 89       	ldd	r24, Y+23	; 0x17
    29c6:	8f 5f       	subi	r24, 0xFF	; 255
    29c8:	8f 8b       	std	Y+23, r24	; 0x17
    29ca:	98 c0       	rjmp	.+304    	; 0x2afc <main+0xb9e>
						}else if(z!= 16 && z!=100)
    29cc:	8f 89       	ldd	r24, Y+23	; 0x17
    29ce:	80 31       	cpi	r24, 0x10	; 16
    29d0:	09 f4       	brne	.+2      	; 0x29d4 <main+0xa76>
    29d2:	94 c0       	rjmp	.+296    	; 0x2afc <main+0xb9e>
    29d4:	8f 89       	ldd	r24, Y+23	; 0x17
    29d6:	84 36       	cpi	r24, 0x64	; 100
    29d8:	09 f4       	brne	.+2      	; 0x29dc <main+0xa7e>
    29da:	90 c0       	rjmp	.+288    	; 0x2afc <main+0xb9e>
						   {
							if(z==13)
    29dc:	8f 89       	ldd	r24, Y+23	; 0x17
    29de:	8d 30       	cpi	r24, 0x0D	; 13
    29e0:	09 f0       	breq	.+2      	; 0x29e4 <main+0xa86>
    29e2:	6c c0       	rjmp	.+216    	; 0x2abc <main+0xb5e>
    29e4:	62 c0       	rjmp	.+196    	; 0x2aaa <main+0xb4c>
							{
								while(z==13 || z==100)
								{
									z=KEYPAD_VoidGetNumber();
    29e6:	0e 94 b9 09 	call	0x1372	; 0x1372 <KEYPAD_VoidGetNumber>
    29ea:	8f 8b       	std	Y+23, r24	; 0x17
									switch(z)
    29ec:	8f 89       	ldd	r24, Y+23	; 0x17
    29ee:	28 2f       	mov	r18, r24
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	39 a3       	std	Y+33, r19	; 0x21
    29f4:	28 a3       	std	Y+32, r18	; 0x20
    29f6:	48 a1       	ldd	r20, Y+32	; 0x20
    29f8:	59 a1       	ldd	r21, Y+33	; 0x21
    29fa:	43 30       	cpi	r20, 0x03	; 3
    29fc:	51 05       	cpc	r21, r1
    29fe:	61 f1       	breq	.+88     	; 0x2a58 <main+0xafa>
    2a00:	88 a1       	ldd	r24, Y+32	; 0x20
    2a02:	99 a1       	ldd	r25, Y+33	; 0x21
    2a04:	84 30       	cpi	r24, 0x04	; 4
    2a06:	91 05       	cpc	r25, r1
    2a08:	5c f4       	brge	.+22     	; 0x2a20 <main+0xac2>
    2a0a:	28 a1       	ldd	r18, Y+32	; 0x20
    2a0c:	39 a1       	ldd	r19, Y+33	; 0x21
    2a0e:	21 30       	cpi	r18, 0x01	; 1
    2a10:	31 05       	cpc	r19, r1
    2a12:	b1 f0       	breq	.+44     	; 0x2a40 <main+0xae2>
    2a14:	48 a1       	ldd	r20, Y+32	; 0x20
    2a16:	59 a1       	ldd	r21, Y+33	; 0x21
    2a18:	42 30       	cpi	r20, 0x02	; 2
    2a1a:	51 05       	cpc	r21, r1
    2a1c:	b9 f0       	breq	.+46     	; 0x2a4c <main+0xaee>
    2a1e:	33 c0       	rjmp	.+102    	; 0x2a86 <main+0xb28>
    2a20:	88 a1       	ldd	r24, Y+32	; 0x20
    2a22:	99 a1       	ldd	r25, Y+33	; 0x21
    2a24:	85 30       	cpi	r24, 0x05	; 5
    2a26:	91 05       	cpc	r25, r1
    2a28:	19 f1       	breq	.+70     	; 0x2a70 <main+0xb12>
    2a2a:	28 a1       	ldd	r18, Y+32	; 0x20
    2a2c:	39 a1       	ldd	r19, Y+33	; 0x21
    2a2e:	25 30       	cpi	r18, 0x05	; 5
    2a30:	31 05       	cpc	r19, r1
    2a32:	c4 f0       	brlt	.+48     	; 0x2a64 <main+0xb06>
    2a34:	48 a1       	ldd	r20, Y+32	; 0x20
    2a36:	59 a1       	ldd	r21, Y+33	; 0x21
    2a38:	46 30       	cpi	r20, 0x06	; 6
    2a3a:	51 05       	cpc	r21, r1
    2a3c:	f9 f0       	breq	.+62     	; 0x2a7c <main+0xb1e>
    2a3e:	23 c0       	rjmp	.+70     	; 0x2a86 <main+0xb28>
									{
									case 1: LCD_VoidWriteData('A'); z=10; break;
    2a40:	81 e4       	ldi	r24, 0x41	; 65
    2a42:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
    2a46:	8a e0       	ldi	r24, 0x0A	; 10
    2a48:	8f 8b       	std	Y+23, r24	; 0x17
    2a4a:	1d c0       	rjmp	.+58     	; 0x2a86 <main+0xb28>
									case 2: LCD_VoidWriteData('B'); z=11; break;
    2a4c:	82 e4       	ldi	r24, 0x42	; 66
    2a4e:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
    2a52:	8b e0       	ldi	r24, 0x0B	; 11
    2a54:	8f 8b       	std	Y+23, r24	; 0x17
    2a56:	17 c0       	rjmp	.+46     	; 0x2a86 <main+0xb28>
									case 3: LCD_VoidWriteData('C'); z=12; break;
    2a58:	83 e4       	ldi	r24, 0x43	; 67
    2a5a:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
    2a5e:	8c e0       	ldi	r24, 0x0C	; 12
    2a60:	8f 8b       	std	Y+23, r24	; 0x17
    2a62:	11 c0       	rjmp	.+34     	; 0x2a86 <main+0xb28>
									case 4: LCD_VoidWriteData('D'); z=13; break;
    2a64:	84 e4       	ldi	r24, 0x44	; 68
    2a66:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
    2a6a:	8d e0       	ldi	r24, 0x0D	; 13
    2a6c:	8f 8b       	std	Y+23, r24	; 0x17
    2a6e:	0b c0       	rjmp	.+22     	; 0x2a86 <main+0xb28>
									case 5: LCD_VoidWriteData('E'); z=14; break;
    2a70:	85 e4       	ldi	r24, 0x45	; 69
    2a72:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
    2a76:	8e e0       	ldi	r24, 0x0E	; 14
    2a78:	8f 8b       	std	Y+23, r24	; 0x17
    2a7a:	05 c0       	rjmp	.+10     	; 0x2a86 <main+0xb28>
									case 6: LCD_VoidWriteData('F'); z=15; break;
    2a7c:	86 e4       	ldi	r24, 0x46	; 70
    2a7e:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
    2a82:	8f e0       	ldi	r24, 0x0F	; 15
    2a84:	8f 8b       	std	Y+23, r24	; 0x17
								    }
									if(z==10||z==11||z==12||z==13||z==14||z==15)
    2a86:	8f 89       	ldd	r24, Y+23	; 0x17
    2a88:	8a 30       	cpi	r24, 0x0A	; 10
    2a8a:	29 f1       	breq	.+74     	; 0x2ad6 <main+0xb78>
    2a8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a8e:	8b 30       	cpi	r24, 0x0B	; 11
    2a90:	11 f1       	breq	.+68     	; 0x2ad6 <main+0xb78>
    2a92:	8f 89       	ldd	r24, Y+23	; 0x17
    2a94:	8c 30       	cpi	r24, 0x0C	; 12
    2a96:	f9 f0       	breq	.+62     	; 0x2ad6 <main+0xb78>
    2a98:	8f 89       	ldd	r24, Y+23	; 0x17
    2a9a:	8d 30       	cpi	r24, 0x0D	; 13
    2a9c:	e1 f0       	breq	.+56     	; 0x2ad6 <main+0xb78>
    2a9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa0:	8e 30       	cpi	r24, 0x0E	; 14
    2aa2:	c9 f0       	breq	.+50     	; 0x2ad6 <main+0xb78>
    2aa4:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa6:	8f 30       	cpi	r24, 0x0F	; 15
    2aa8:	b1 f0       	breq	.+44     	; 0x2ad6 <main+0xb78>
							z=z+1;
						}else if(z!= 16 && z!=100)
						   {
							if(z==13)
							{
								while(z==13 || z==100)
    2aaa:	8f 89       	ldd	r24, Y+23	; 0x17
    2aac:	8d 30       	cpi	r24, 0x0D	; 13
    2aae:	09 f4       	brne	.+2      	; 0x2ab2 <main+0xb54>
    2ab0:	9a cf       	rjmp	.-204    	; 0x29e6 <main+0xa88>
    2ab2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ab4:	84 36       	cpi	r24, 0x64	; 100
    2ab6:	09 f4       	brne	.+2      	; 0x2aba <main+0xb5c>
    2ab8:	96 cf       	rjmp	.-212    	; 0x29e6 <main+0xa88>
    2aba:	0d c0       	rjmp	.+26     	; 0x2ad6 <main+0xb78>
									if(z==10||z==11||z==12||z==13||z==14||z==15)
									{
										break;
									}
								}
							}else if(z<10)
    2abc:	8f 89       	ldd	r24, Y+23	; 0x17
    2abe:	8a 30       	cpi	r24, 0x0A	; 10
    2ac0:	50 f4       	brcc	.+20     	; 0x2ad6 <main+0xb78>
							{
								if(z==0)
    2ac2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac4:	88 23       	and	r24, r24
    2ac6:	21 f4       	brne	.+8      	; 0x2ad0 <main+0xb72>
								{
									LCD_VoidWriteData(48);
    2ac8:	80 e3       	ldi	r24, 0x30	; 48
    2aca:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
    2ace:	03 c0       	rjmp	.+6      	; 0x2ad6 <main+0xb78>
								}else
								{
									LCD_VoidWriteNum(z);
    2ad0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ad2:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <LCD_VoidWriteNum>
								}

							}
							Hex_1[Count_down_hex]=z;
    2ad6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ad8:	28 2f       	mov	r18, r24
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	8f 89       	ldd	r24, Y+23	; 0x17
    2ade:	48 2f       	mov	r20, r24
    2ae0:	50 e0       	ldi	r21, 0x00	; 0
    2ae2:	22 0f       	add	r18, r18
    2ae4:	33 1f       	adc	r19, r19
    2ae6:	ce 01       	movw	r24, r28
    2ae8:	01 96       	adiw	r24, 0x01	; 1
    2aea:	82 0f       	add	r24, r18
    2aec:	93 1f       	adc	r25, r19
    2aee:	fc 01       	movw	r30, r24
    2af0:	79 96       	adiw	r30, 0x19	; 25
    2af2:	51 83       	std	Z+1, r21	; 0x01
    2af4:	40 83       	st	Z, r20
							Count_down_hex++;
    2af6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2af8:	8f 5f       	subi	r24, 0xFF	; 255
    2afa:	8a 87       	std	Y+10, r24	; 0x0a
					LCD_VoidSetCursor(0,0);
					LCD_VoidFullName("HEX:");
					LCD_VoidSetCursor(1,0);
					LCD_VoidFullName("DEC:");
					LCD_VoidSetCursor(0,4);
					while(z!=16)
    2afc:	8f 89       	ldd	r24, Y+23	; 0x17
    2afe:	80 31       	cpi	r24, 0x10	; 16
    2b00:	09 f0       	breq	.+2      	; 0x2b04 <main+0xba6>
    2b02:	5a cf       	rjmp	.-332    	; 0x29b8 <main+0xa5a>
							Hex_1[Count_down_hex]=z;
							Count_down_hex++;
						}

					}
					Count_down_hex--;
    2b04:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b06:	81 50       	subi	r24, 0x01	; 1
    2b08:	8a 87       	std	Y+10, r24	; 0x0a
					Count_down_max=Count_down_hex;
    2b0a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b0c:	89 87       	std	Y+9, r24	; 0x09
    2b0e:	22 c0       	rjmp	.+68     	; 0x2b54 <main+0xbf6>
					while(Count_up_hex<Count_down_max)
					{
						Hex_2[Count_up_hex]=Hex_1[Count_down_hex];
    2b10:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b12:	68 2f       	mov	r22, r24
    2b14:	70 e0       	ldi	r23, 0x00	; 0
    2b16:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b18:	88 2f       	mov	r24, r24
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	9c 01       	movw	r18, r24
    2b1e:	22 0f       	add	r18, r18
    2b20:	33 1f       	adc	r19, r19
    2b22:	ce 01       	movw	r24, r28
    2b24:	01 96       	adiw	r24, 0x01	; 1
    2b26:	82 0f       	add	r24, r18
    2b28:	93 1f       	adc	r25, r19
    2b2a:	fc 01       	movw	r30, r24
    2b2c:	79 96       	adiw	r30, 0x19	; 25
    2b2e:	40 81       	ld	r20, Z
    2b30:	51 81       	ldd	r21, Z+1	; 0x01
    2b32:	9b 01       	movw	r18, r22
    2b34:	22 0f       	add	r18, r18
    2b36:	33 1f       	adc	r19, r19
    2b38:	ce 01       	movw	r24, r28
    2b3a:	01 96       	adiw	r24, 0x01	; 1
    2b3c:	82 0f       	add	r24, r18
    2b3e:	93 1f       	adc	r25, r19
    2b40:	fc 01       	movw	r30, r24
    2b42:	7b 96       	adiw	r30, 0x1b	; 27
    2b44:	51 83       	std	Z+1, r21	; 0x01
    2b46:	40 83       	st	Z, r20
						Count_up_hex++;
    2b48:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b4a:	8f 5f       	subi	r24, 0xFF	; 255
    2b4c:	8b 87       	std	Y+11, r24	; 0x0b
						Count_down_hex--;
    2b4e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b50:	81 50       	subi	r24, 0x01	; 1
    2b52:	8a 87       	std	Y+10, r24	; 0x0a
						}

					}
					Count_down_hex--;
					Count_down_max=Count_down_hex;
					while(Count_up_hex<Count_down_max)
    2b54:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b56:	89 85       	ldd	r24, Y+9	; 0x09
    2b58:	98 17       	cp	r25, r24
    2b5a:	d0 f2       	brcs	.-76     	; 0x2b10 <main+0xbb2>
					{
						Hex_2[Count_up_hex]=Hex_1[Count_down_hex];
						Count_up_hex++;
						Count_down_hex--;
					}
					Hex_2[Count_up_hex]=Hex_1[Count_down_hex];
    2b5c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b5e:	68 2f       	mov	r22, r24
    2b60:	70 e0       	ldi	r23, 0x00	; 0
    2b62:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b64:	88 2f       	mov	r24, r24
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	9c 01       	movw	r18, r24
    2b6a:	22 0f       	add	r18, r18
    2b6c:	33 1f       	adc	r19, r19
    2b6e:	ce 01       	movw	r24, r28
    2b70:	01 96       	adiw	r24, 0x01	; 1
    2b72:	82 0f       	add	r24, r18
    2b74:	93 1f       	adc	r25, r19
    2b76:	fc 01       	movw	r30, r24
    2b78:	79 96       	adiw	r30, 0x19	; 25
    2b7a:	40 81       	ld	r20, Z
    2b7c:	51 81       	ldd	r21, Z+1	; 0x01
    2b7e:	9b 01       	movw	r18, r22
    2b80:	22 0f       	add	r18, r18
    2b82:	33 1f       	adc	r19, r19
    2b84:	ce 01       	movw	r24, r28
    2b86:	01 96       	adiw	r24, 0x01	; 1
    2b88:	82 0f       	add	r24, r18
    2b8a:	93 1f       	adc	r25, r19
    2b8c:	fc 01       	movw	r30, r24
    2b8e:	7b 96       	adiw	r30, 0x1b	; 27
    2b90:	51 83       	std	Z+1, r21	; 0x01
    2b92:	40 83       	st	Z, r20
    2b94:	42 c0       	rjmp	.+132    	; 0x2c1a <main+0xcbc>
					while(Count_down_hex<=Count_down_max)
					{
						for(u8 s=0;s<Count_up_hex;s++)
    2b96:	1a 82       	std	Y+2, r1	; 0x02
    2b98:	0d c0       	rjmp	.+26     	; 0x2bb4 <main+0xc56>
						{

								total_hex_number=total_hex_number*16;
    2b9a:	8f 81       	ldd	r24, Y+7	; 0x07
    2b9c:	98 85       	ldd	r25, Y+8	; 0x08
    2b9e:	82 95       	swap	r24
    2ba0:	92 95       	swap	r25
    2ba2:	90 7f       	andi	r25, 0xF0	; 240
    2ba4:	98 27       	eor	r25, r24
    2ba6:	80 7f       	andi	r24, 0xF0	; 240
    2ba8:	98 27       	eor	r25, r24
    2baa:	98 87       	std	Y+8, r25	; 0x08
    2bac:	8f 83       	std	Y+7, r24	; 0x07
						Count_down_hex--;
					}
					Hex_2[Count_up_hex]=Hex_1[Count_down_hex];
					while(Count_down_hex<=Count_down_max)
					{
						for(u8 s=0;s<Count_up_hex;s++)
    2bae:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb0:	8f 5f       	subi	r24, 0xFF	; 255
    2bb2:	8a 83       	std	Y+2, r24	; 0x02
    2bb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb6:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bb8:	98 17       	cp	r25, r24
    2bba:	78 f3       	brcs	.-34     	; 0x2b9a <main+0xc3c>
						{

								total_hex_number=total_hex_number*16;
						}
						if(Count_up_hex==0)
    2bbc:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bbe:	88 23       	and	r24, r24
    2bc0:	21 f4       	brne	.+8      	; 0x2bca <main+0xc6c>
						{
							total_hex_number=1;
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	98 87       	std	Y+8, r25	; 0x08
    2bc8:	8f 83       	std	Y+7, r24	; 0x07
						}
						total_number_decimal=Hex_2[Count_up_hex]*total_hex_number+total_number_decimal;
    2bca:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bcc:	88 2f       	mov	r24, r24
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	9c 01       	movw	r18, r24
    2bd2:	22 0f       	add	r18, r18
    2bd4:	33 1f       	adc	r19, r19
    2bd6:	ce 01       	movw	r24, r28
    2bd8:	01 96       	adiw	r24, 0x01	; 1
    2bda:	82 0f       	add	r24, r18
    2bdc:	93 1f       	adc	r25, r19
    2bde:	fc 01       	movw	r30, r24
    2be0:	7b 96       	adiw	r30, 0x1b	; 27
    2be2:	20 81       	ld	r18, Z
    2be4:	31 81       	ldd	r19, Z+1	; 0x01
    2be6:	8f 81       	ldd	r24, Y+7	; 0x07
    2be8:	98 85       	ldd	r25, Y+8	; 0x08
    2bea:	a9 01       	movw	r20, r18
    2bec:	48 9f       	mul	r20, r24
    2bee:	90 01       	movw	r18, r0
    2bf0:	49 9f       	mul	r20, r25
    2bf2:	30 0d       	add	r19, r0
    2bf4:	58 9f       	mul	r21, r24
    2bf6:	30 0d       	add	r19, r0
    2bf8:	11 24       	eor	r1, r1
    2bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    2bfc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bfe:	82 0f       	add	r24, r18
    2c00:	93 1f       	adc	r25, r19
    2c02:	9e 83       	std	Y+6, r25	; 0x06
    2c04:	8d 83       	std	Y+5, r24	; 0x05
						total_hex_number=1;
    2c06:	81 e0       	ldi	r24, 0x01	; 1
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	98 87       	std	Y+8, r25	; 0x08
    2c0c:	8f 83       	std	Y+7, r24	; 0x07
						Count_down_hex++;
    2c0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c10:	8f 5f       	subi	r24, 0xFF	; 255
    2c12:	8a 87       	std	Y+10, r24	; 0x0a
						Count_up_hex--;
    2c14:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c16:	81 50       	subi	r24, 0x01	; 1
    2c18:	8b 87       	std	Y+11, r24	; 0x0b
						Hex_2[Count_up_hex]=Hex_1[Count_down_hex];
						Count_up_hex++;
						Count_down_hex--;
					}
					Hex_2[Count_up_hex]=Hex_1[Count_down_hex];
					while(Count_down_hex<=Count_down_max)
    2c1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c1c:	89 85       	ldd	r24, Y+9	; 0x09
    2c1e:	89 17       	cp	r24, r25
    2c20:	08 f0       	brcs	.+2      	; 0x2c24 <main+0xcc6>
    2c22:	b9 cf       	rjmp	.-142    	; 0x2b96 <main+0xc38>
						total_number_decimal=Hex_2[Count_up_hex]*total_hex_number+total_number_decimal;
						total_hex_number=1;
						Count_down_hex++;
						Count_up_hex--;
					}
					LCD_VoidSetCursor(1,4);
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	64 e0       	ldi	r22, 0x04	; 4
    2c28:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
					if(total_number_decimal%10==0)
    2c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c30:	2a e0       	ldi	r18, 0x0A	; 10
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	b9 01       	movw	r22, r18
    2c36:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <__udivmodhi4>
    2c3a:	00 97       	sbiw	r24, 0x00	; 0
    2c3c:	d9 f4       	brne	.+54     	; 0x2c74 <main+0xd16>
					{
						LCD_VoidWriteNum(total_number_decimal);
    2c3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c40:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <LCD_VoidWriteNum>
    2c44:	0d c0       	rjmp	.+26     	; 0x2c60 <main+0xd02>
						while(total_number_decimal%10==0)
						{
							LCD_VoidWriteData(48);
    2c46:	80 e3       	ldi	r24, 0x30	; 48
    2c48:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
							total_number_decimal=total_number_decimal/10;
    2c4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c50:	2a e0       	ldi	r18, 0x0A	; 10
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	b9 01       	movw	r22, r18
    2c56:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <__udivmodhi4>
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	9e 83       	std	Y+6, r25	; 0x06
    2c5e:	8d 83       	std	Y+5, r24	; 0x05
					}
					LCD_VoidSetCursor(1,4);
					if(total_number_decimal%10==0)
					{
						LCD_VoidWriteNum(total_number_decimal);
						while(total_number_decimal%10==0)
    2c60:	8d 81       	ldd	r24, Y+5	; 0x05
    2c62:	9e 81       	ldd	r25, Y+6	; 0x06
    2c64:	2a e0       	ldi	r18, 0x0A	; 10
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	b9 01       	movw	r22, r18
    2c6a:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <__udivmodhi4>
    2c6e:	00 97       	sbiw	r24, 0x00	; 0
    2c70:	51 f3       	breq	.-44     	; 0x2c46 <main+0xce8>
    2c72:	07 c0       	rjmp	.+14     	; 0x2c82 <main+0xd24>
							total_number_decimal=total_number_decimal/10;
						}

					}else
					{
						LCD_VoidWriteNum(total_number_decimal);
    2c74:	8d 81       	ldd	r24, Y+5	; 0x05
    2c76:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <LCD_VoidWriteNum>
    2c7a:	03 c0       	rjmp	.+6      	; 0x2c82 <main+0xd24>
					}
					while(z!=14)
					{
						z=KEYPAD_VoidGetNumber();
    2c7c:	0e 94 b9 09 	call	0x1372	; 0x1372 <KEYPAD_VoidGetNumber>
    2c80:	8f 8b       	std	Y+23, r24	; 0x17

					}else
					{
						LCD_VoidWriteNum(total_number_decimal);
					}
					while(z!=14)
    2c82:	8f 89       	ldd	r24, Y+23	; 0x17
    2c84:	8e 30       	cpi	r24, 0x0E	; 14
    2c86:	d1 f7       	brne	.-12     	; 0x2c7c <main+0xd1e>
    2c88:	78 c9       	rjmp	.-3344   	; 0x1f7a <main+0x1c>
					}
					break;
				}
			case 2:
			{
				LCD_VoidSetCursor(0,0);
    2c8a:	80 e0       	ldi	r24, 0x00	; 0
    2c8c:	60 e0       	ldi	r22, 0x00	; 0
    2c8e:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
				LCD_VoidFullName("HEX:");
    2c92:	8e e8       	ldi	r24, 0x8E	; 142
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <LCD_VoidFullName>
				LCD_VoidSetCursor(1,0);
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	60 e0       	ldi	r22, 0x00	; 0
    2c9e:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
				LCD_VoidFullName("BIN:");
    2ca2:	89 e8       	ldi	r24, 0x89	; 137
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <LCD_VoidFullName>
				LCD_VoidSetCursor(0,4);
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	64 e0       	ldi	r22, 0x04	; 4
    2cae:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
    2cb2:	a2 c0       	rjmp	.+324    	; 0x2df8 <main+0xe9a>
				while(z!=16)
				{
					z=KEYPAD_VoidGetNumber();
    2cb4:	0e 94 b9 09 	call	0x1372	; 0x1372 <KEYPAD_VoidGetNumber>
    2cb8:	8f 8b       	std	Y+23, r24	; 0x17
					if(z==15)
    2cba:	8f 89       	ldd	r24, Y+23	; 0x17
    2cbc:	8f 30       	cpi	r24, 0x0F	; 15
    2cbe:	21 f4       	brne	.+8      	; 0x2cc8 <main+0xd6a>
					{
						z=z+1;
    2cc0:	8f 89       	ldd	r24, Y+23	; 0x17
    2cc2:	8f 5f       	subi	r24, 0xFF	; 255
    2cc4:	8f 8b       	std	Y+23, r24	; 0x17
    2cc6:	98 c0       	rjmp	.+304    	; 0x2df8 <main+0xe9a>
					}else if(z!= 16 && z!=100)
    2cc8:	8f 89       	ldd	r24, Y+23	; 0x17
    2cca:	80 31       	cpi	r24, 0x10	; 16
    2ccc:	09 f4       	brne	.+2      	; 0x2cd0 <main+0xd72>
    2cce:	94 c0       	rjmp	.+296    	; 0x2df8 <main+0xe9a>
    2cd0:	8f 89       	ldd	r24, Y+23	; 0x17
    2cd2:	84 36       	cpi	r24, 0x64	; 100
    2cd4:	09 f4       	brne	.+2      	; 0x2cd8 <main+0xd7a>
    2cd6:	90 c0       	rjmp	.+288    	; 0x2df8 <main+0xe9a>
					   {
						if(z==13)
    2cd8:	8f 89       	ldd	r24, Y+23	; 0x17
    2cda:	8d 30       	cpi	r24, 0x0D	; 13
    2cdc:	09 f0       	breq	.+2      	; 0x2ce0 <main+0xd82>
    2cde:	6c c0       	rjmp	.+216    	; 0x2db8 <main+0xe5a>
    2ce0:	62 c0       	rjmp	.+196    	; 0x2da6 <main+0xe48>
						{
							while(z==13 || z==100)
							{
								z=KEYPAD_VoidGetNumber();
    2ce2:	0e 94 b9 09 	call	0x1372	; 0x1372 <KEYPAD_VoidGetNumber>
    2ce6:	8f 8b       	std	Y+23, r24	; 0x17
								switch(z)
    2ce8:	8f 89       	ldd	r24, Y+23	; 0x17
    2cea:	28 2f       	mov	r18, r24
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	3f 8f       	std	Y+31, r19	; 0x1f
    2cf0:	2e 8f       	std	Y+30, r18	; 0x1e
    2cf2:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2cf4:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2cf6:	43 30       	cpi	r20, 0x03	; 3
    2cf8:	51 05       	cpc	r21, r1
    2cfa:	61 f1       	breq	.+88     	; 0x2d54 <main+0xdf6>
    2cfc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2cfe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2d00:	84 30       	cpi	r24, 0x04	; 4
    2d02:	91 05       	cpc	r25, r1
    2d04:	5c f4       	brge	.+22     	; 0x2d1c <main+0xdbe>
    2d06:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2d08:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2d0a:	21 30       	cpi	r18, 0x01	; 1
    2d0c:	31 05       	cpc	r19, r1
    2d0e:	b1 f0       	breq	.+44     	; 0x2d3c <main+0xdde>
    2d10:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2d12:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2d14:	42 30       	cpi	r20, 0x02	; 2
    2d16:	51 05       	cpc	r21, r1
    2d18:	b9 f0       	breq	.+46     	; 0x2d48 <main+0xdea>
    2d1a:	33 c0       	rjmp	.+102    	; 0x2d82 <main+0xe24>
    2d1c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d1e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2d20:	85 30       	cpi	r24, 0x05	; 5
    2d22:	91 05       	cpc	r25, r1
    2d24:	19 f1       	breq	.+70     	; 0x2d6c <main+0xe0e>
    2d26:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2d28:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2d2a:	25 30       	cpi	r18, 0x05	; 5
    2d2c:	31 05       	cpc	r19, r1
    2d2e:	c4 f0       	brlt	.+48     	; 0x2d60 <main+0xe02>
    2d30:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2d32:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2d34:	46 30       	cpi	r20, 0x06	; 6
    2d36:	51 05       	cpc	r21, r1
    2d38:	f9 f0       	breq	.+62     	; 0x2d78 <main+0xe1a>
    2d3a:	23 c0       	rjmp	.+70     	; 0x2d82 <main+0xe24>
								{
								case 1: LCD_VoidWriteData('A'); z=10; break;
    2d3c:	81 e4       	ldi	r24, 0x41	; 65
    2d3e:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
    2d42:	8a e0       	ldi	r24, 0x0A	; 10
    2d44:	8f 8b       	std	Y+23, r24	; 0x17
    2d46:	1d c0       	rjmp	.+58     	; 0x2d82 <main+0xe24>
								case 2: LCD_VoidWriteData('B'); z=11; break;
    2d48:	82 e4       	ldi	r24, 0x42	; 66
    2d4a:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
    2d4e:	8b e0       	ldi	r24, 0x0B	; 11
    2d50:	8f 8b       	std	Y+23, r24	; 0x17
    2d52:	17 c0       	rjmp	.+46     	; 0x2d82 <main+0xe24>
								case 3: LCD_VoidWriteData('C'); z=12; break;
    2d54:	83 e4       	ldi	r24, 0x43	; 67
    2d56:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
    2d5a:	8c e0       	ldi	r24, 0x0C	; 12
    2d5c:	8f 8b       	std	Y+23, r24	; 0x17
    2d5e:	11 c0       	rjmp	.+34     	; 0x2d82 <main+0xe24>
								case 4: LCD_VoidWriteData('D'); z=13; break;
    2d60:	84 e4       	ldi	r24, 0x44	; 68
    2d62:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
    2d66:	8d e0       	ldi	r24, 0x0D	; 13
    2d68:	8f 8b       	std	Y+23, r24	; 0x17
    2d6a:	0b c0       	rjmp	.+22     	; 0x2d82 <main+0xe24>
								case 5: LCD_VoidWriteData('E'); z=14; break;
    2d6c:	85 e4       	ldi	r24, 0x45	; 69
    2d6e:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
    2d72:	8e e0       	ldi	r24, 0x0E	; 14
    2d74:	8f 8b       	std	Y+23, r24	; 0x17
    2d76:	05 c0       	rjmp	.+10     	; 0x2d82 <main+0xe24>
								case 6: LCD_VoidWriteData('F'); z=15; break;
    2d78:	86 e4       	ldi	r24, 0x46	; 70
    2d7a:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
    2d7e:	8f e0       	ldi	r24, 0x0F	; 15
    2d80:	8f 8b       	std	Y+23, r24	; 0x17
							    }
								if(z==10||z==11||z==12||z==13||z==14||z==15)
    2d82:	8f 89       	ldd	r24, Y+23	; 0x17
    2d84:	8a 30       	cpi	r24, 0x0A	; 10
    2d86:	29 f1       	breq	.+74     	; 0x2dd2 <main+0xe74>
    2d88:	8f 89       	ldd	r24, Y+23	; 0x17
    2d8a:	8b 30       	cpi	r24, 0x0B	; 11
    2d8c:	11 f1       	breq	.+68     	; 0x2dd2 <main+0xe74>
    2d8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d90:	8c 30       	cpi	r24, 0x0C	; 12
    2d92:	f9 f0       	breq	.+62     	; 0x2dd2 <main+0xe74>
    2d94:	8f 89       	ldd	r24, Y+23	; 0x17
    2d96:	8d 30       	cpi	r24, 0x0D	; 13
    2d98:	e1 f0       	breq	.+56     	; 0x2dd2 <main+0xe74>
    2d9a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d9c:	8e 30       	cpi	r24, 0x0E	; 14
    2d9e:	c9 f0       	breq	.+50     	; 0x2dd2 <main+0xe74>
    2da0:	8f 89       	ldd	r24, Y+23	; 0x17
    2da2:	8f 30       	cpi	r24, 0x0F	; 15
    2da4:	b1 f0       	breq	.+44     	; 0x2dd2 <main+0xe74>
						z=z+1;
					}else if(z!= 16 && z!=100)
					   {
						if(z==13)
						{
							while(z==13 || z==100)
    2da6:	8f 89       	ldd	r24, Y+23	; 0x17
    2da8:	8d 30       	cpi	r24, 0x0D	; 13
    2daa:	09 f4       	brne	.+2      	; 0x2dae <main+0xe50>
    2dac:	9a cf       	rjmp	.-204    	; 0x2ce2 <main+0xd84>
    2dae:	8f 89       	ldd	r24, Y+23	; 0x17
    2db0:	84 36       	cpi	r24, 0x64	; 100
    2db2:	09 f4       	brne	.+2      	; 0x2db6 <main+0xe58>
    2db4:	96 cf       	rjmp	.-212    	; 0x2ce2 <main+0xd84>
    2db6:	0d c0       	rjmp	.+26     	; 0x2dd2 <main+0xe74>
								if(z==10||z==11||z==12||z==13||z==14||z==15)
								{
									break;
								}
							}
						}else if(z<10)
    2db8:	8f 89       	ldd	r24, Y+23	; 0x17
    2dba:	8a 30       	cpi	r24, 0x0A	; 10
    2dbc:	50 f4       	brcc	.+20     	; 0x2dd2 <main+0xe74>
						{
							if(z==0)
    2dbe:	8f 89       	ldd	r24, Y+23	; 0x17
    2dc0:	88 23       	and	r24, r24
    2dc2:	21 f4       	brne	.+8      	; 0x2dcc <main+0xe6e>
							{
								LCD_VoidWriteData(48);
    2dc4:	80 e3       	ldi	r24, 0x30	; 48
    2dc6:	0e 94 91 0b 	call	0x1722	; 0x1722 <LCD_VoidWriteData>
    2dca:	03 c0       	rjmp	.+6      	; 0x2dd2 <main+0xe74>
							}else
							{
								LCD_VoidWriteNum(z);
    2dcc:	8f 89       	ldd	r24, Y+23	; 0x17
    2dce:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <LCD_VoidWriteNum>
							}

						}
						Hex_1[Count_down_hex]=z;
    2dd2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2dd4:	28 2f       	mov	r18, r24
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	8f 89       	ldd	r24, Y+23	; 0x17
    2dda:	48 2f       	mov	r20, r24
    2ddc:	50 e0       	ldi	r21, 0x00	; 0
    2dde:	22 0f       	add	r18, r18
    2de0:	33 1f       	adc	r19, r19
    2de2:	ce 01       	movw	r24, r28
    2de4:	01 96       	adiw	r24, 0x01	; 1
    2de6:	82 0f       	add	r24, r18
    2de8:	93 1f       	adc	r25, r19
    2dea:	fc 01       	movw	r30, r24
    2dec:	79 96       	adiw	r30, 0x19	; 25
    2dee:	51 83       	std	Z+1, r21	; 0x01
    2df0:	40 83       	st	Z, r20
						Count_down_hex++;
    2df2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2df4:	8f 5f       	subi	r24, 0xFF	; 255
    2df6:	8a 87       	std	Y+10, r24	; 0x0a
				LCD_VoidSetCursor(0,0);
				LCD_VoidFullName("HEX:");
				LCD_VoidSetCursor(1,0);
				LCD_VoidFullName("BIN:");
				LCD_VoidSetCursor(0,4);
				while(z!=16)
    2df8:	8f 89       	ldd	r24, Y+23	; 0x17
    2dfa:	80 31       	cpi	r24, 0x10	; 16
    2dfc:	09 f0       	breq	.+2      	; 0x2e00 <main+0xea2>
    2dfe:	5a cf       	rjmp	.-332    	; 0x2cb4 <main+0xd56>
						Hex_1[Count_down_hex]=z;
						Count_down_hex++;
					}

				}
				Count_down_hex--;
    2e00:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e02:	81 50       	subi	r24, 0x01	; 1
    2e04:	8a 87       	std	Y+10, r24	; 0x0a
				Count_down_max=Count_down_hex;
    2e06:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e08:	89 87       	std	Y+9, r24	; 0x09
    2e0a:	22 c0       	rjmp	.+68     	; 0x2e50 <main+0xef2>
				while(Count_up_hex<Count_down_max)
				{
					Hex_2[Count_up_hex]=Hex_1[Count_down_hex];
    2e0c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e0e:	68 2f       	mov	r22, r24
    2e10:	70 e0       	ldi	r23, 0x00	; 0
    2e12:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e14:	88 2f       	mov	r24, r24
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	9c 01       	movw	r18, r24
    2e1a:	22 0f       	add	r18, r18
    2e1c:	33 1f       	adc	r19, r19
    2e1e:	ce 01       	movw	r24, r28
    2e20:	01 96       	adiw	r24, 0x01	; 1
    2e22:	82 0f       	add	r24, r18
    2e24:	93 1f       	adc	r25, r19
    2e26:	fc 01       	movw	r30, r24
    2e28:	79 96       	adiw	r30, 0x19	; 25
    2e2a:	40 81       	ld	r20, Z
    2e2c:	51 81       	ldd	r21, Z+1	; 0x01
    2e2e:	9b 01       	movw	r18, r22
    2e30:	22 0f       	add	r18, r18
    2e32:	33 1f       	adc	r19, r19
    2e34:	ce 01       	movw	r24, r28
    2e36:	01 96       	adiw	r24, 0x01	; 1
    2e38:	82 0f       	add	r24, r18
    2e3a:	93 1f       	adc	r25, r19
    2e3c:	fc 01       	movw	r30, r24
    2e3e:	7b 96       	adiw	r30, 0x1b	; 27
    2e40:	51 83       	std	Z+1, r21	; 0x01
    2e42:	40 83       	st	Z, r20
					Count_up_hex++;
    2e44:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e46:	8f 5f       	subi	r24, 0xFF	; 255
    2e48:	8b 87       	std	Y+11, r24	; 0x0b
					Count_down_hex--;
    2e4a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e4c:	81 50       	subi	r24, 0x01	; 1
    2e4e:	8a 87       	std	Y+10, r24	; 0x0a
					}

				}
				Count_down_hex--;
				Count_down_max=Count_down_hex;
				while(Count_up_hex<Count_down_max)
    2e50:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e52:	89 85       	ldd	r24, Y+9	; 0x09
    2e54:	98 17       	cp	r25, r24
    2e56:	d0 f2       	brcs	.-76     	; 0x2e0c <main+0xeae>
				{
					Hex_2[Count_up_hex]=Hex_1[Count_down_hex];
					Count_up_hex++;
					Count_down_hex--;
				}
				Hex_2[Count_up_hex]=Hex_1[Count_down_hex];
    2e58:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e5a:	68 2f       	mov	r22, r24
    2e5c:	70 e0       	ldi	r23, 0x00	; 0
    2e5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e60:	88 2f       	mov	r24, r24
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	9c 01       	movw	r18, r24
    2e66:	22 0f       	add	r18, r18
    2e68:	33 1f       	adc	r19, r19
    2e6a:	ce 01       	movw	r24, r28
    2e6c:	01 96       	adiw	r24, 0x01	; 1
    2e6e:	82 0f       	add	r24, r18
    2e70:	93 1f       	adc	r25, r19
    2e72:	fc 01       	movw	r30, r24
    2e74:	79 96       	adiw	r30, 0x19	; 25
    2e76:	40 81       	ld	r20, Z
    2e78:	51 81       	ldd	r21, Z+1	; 0x01
    2e7a:	9b 01       	movw	r18, r22
    2e7c:	22 0f       	add	r18, r18
    2e7e:	33 1f       	adc	r19, r19
    2e80:	ce 01       	movw	r24, r28
    2e82:	01 96       	adiw	r24, 0x01	; 1
    2e84:	82 0f       	add	r24, r18
    2e86:	93 1f       	adc	r25, r19
    2e88:	fc 01       	movw	r30, r24
    2e8a:	7b 96       	adiw	r30, 0x1b	; 27
    2e8c:	51 83       	std	Z+1, r21	; 0x01
    2e8e:	40 83       	st	Z, r20
    2e90:	42 c0       	rjmp	.+132    	; 0x2f16 <main+0xfb8>
				while(Count_down_hex<=Count_down_max)
				{
					for(u8 s=0;s<Count_up_hex;s++)
    2e92:	19 82       	std	Y+1, r1	; 0x01
    2e94:	0d c0       	rjmp	.+26     	; 0x2eb0 <main+0xf52>
					{

							total_hex_number=total_hex_number*16;
    2e96:	8f 81       	ldd	r24, Y+7	; 0x07
    2e98:	98 85       	ldd	r25, Y+8	; 0x08
    2e9a:	82 95       	swap	r24
    2e9c:	92 95       	swap	r25
    2e9e:	90 7f       	andi	r25, 0xF0	; 240
    2ea0:	98 27       	eor	r25, r24
    2ea2:	80 7f       	andi	r24, 0xF0	; 240
    2ea4:	98 27       	eor	r25, r24
    2ea6:	98 87       	std	Y+8, r25	; 0x08
    2ea8:	8f 83       	std	Y+7, r24	; 0x07
					Count_down_hex--;
				}
				Hex_2[Count_up_hex]=Hex_1[Count_down_hex];
				while(Count_down_hex<=Count_down_max)
				{
					for(u8 s=0;s<Count_up_hex;s++)
    2eaa:	89 81       	ldd	r24, Y+1	; 0x01
    2eac:	8f 5f       	subi	r24, 0xFF	; 255
    2eae:	89 83       	std	Y+1, r24	; 0x01
    2eb0:	99 81       	ldd	r25, Y+1	; 0x01
    2eb2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2eb4:	98 17       	cp	r25, r24
    2eb6:	78 f3       	brcs	.-34     	; 0x2e96 <main+0xf38>
					{

							total_hex_number=total_hex_number*16;
					}
					if(Count_up_hex==0)
    2eb8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2eba:	88 23       	and	r24, r24
    2ebc:	21 f4       	brne	.+8      	; 0x2ec6 <main+0xf68>
					{
						total_hex_number=1;
    2ebe:	81 e0       	ldi	r24, 0x01	; 1
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	98 87       	std	Y+8, r25	; 0x08
    2ec4:	8f 83       	std	Y+7, r24	; 0x07
					}
					total_number_decimal=Hex_2[Count_up_hex]*total_hex_number+total_number_decimal;
    2ec6:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ec8:	88 2f       	mov	r24, r24
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	9c 01       	movw	r18, r24
    2ece:	22 0f       	add	r18, r18
    2ed0:	33 1f       	adc	r19, r19
    2ed2:	ce 01       	movw	r24, r28
    2ed4:	01 96       	adiw	r24, 0x01	; 1
    2ed6:	82 0f       	add	r24, r18
    2ed8:	93 1f       	adc	r25, r19
    2eda:	fc 01       	movw	r30, r24
    2edc:	7b 96       	adiw	r30, 0x1b	; 27
    2ede:	20 81       	ld	r18, Z
    2ee0:	31 81       	ldd	r19, Z+1	; 0x01
    2ee2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ee4:	98 85       	ldd	r25, Y+8	; 0x08
    2ee6:	a9 01       	movw	r20, r18
    2ee8:	48 9f       	mul	r20, r24
    2eea:	90 01       	movw	r18, r0
    2eec:	49 9f       	mul	r20, r25
    2eee:	30 0d       	add	r19, r0
    2ef0:	58 9f       	mul	r21, r24
    2ef2:	30 0d       	add	r19, r0
    2ef4:	11 24       	eor	r1, r1
    2ef6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef8:	9e 81       	ldd	r25, Y+6	; 0x06
    2efa:	82 0f       	add	r24, r18
    2efc:	93 1f       	adc	r25, r19
    2efe:	9e 83       	std	Y+6, r25	; 0x06
    2f00:	8d 83       	std	Y+5, r24	; 0x05
					total_hex_number=1;
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	98 87       	std	Y+8, r25	; 0x08
    2f08:	8f 83       	std	Y+7, r24	; 0x07
					Count_down_hex++;
    2f0a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f0c:	8f 5f       	subi	r24, 0xFF	; 255
    2f0e:	8a 87       	std	Y+10, r24	; 0x0a
					Count_up_hex--;
    2f10:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f12:	81 50       	subi	r24, 0x01	; 1
    2f14:	8b 87       	std	Y+11, r24	; 0x0b
					Hex_2[Count_up_hex]=Hex_1[Count_down_hex];
					Count_up_hex++;
					Count_down_hex--;
				}
				Hex_2[Count_up_hex]=Hex_1[Count_down_hex];
				while(Count_down_hex<=Count_down_max)
    2f16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f18:	89 85       	ldd	r24, Y+9	; 0x09
    2f1a:	89 17       	cp	r24, r25
    2f1c:	08 f0       	brcs	.+2      	; 0x2f20 <main+0xfc2>
    2f1e:	b9 cf       	rjmp	.-142    	; 0x2e92 <main+0xf34>
					total_number_decimal=Hex_2[Count_up_hex]*total_hex_number+total_number_decimal;
					total_hex_number=1;
					Count_down_hex++;
					Count_up_hex--;
				}
				LCD_VoidSetCursor(1,4);
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	64 e0       	ldi	r22, 0x04	; 4
    2f24:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_VoidSetCursor>
				CALC_DecToBin(total_number_decimal);
    2f28:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f2c:	0e 94 9b 05 	call	0xb36	; 0xb36 <CALC_DecToBin>
    2f30:	03 c0       	rjmp	.+6      	; 0x2f38 <main+0xfda>
				while(z!=14)
				{
					z=KEYPAD_VoidGetNumber();
    2f32:	0e 94 b9 09 	call	0x1372	; 0x1372 <KEYPAD_VoidGetNumber>
    2f36:	8f 8b       	std	Y+23, r24	; 0x17
					Count_down_hex++;
					Count_up_hex--;
				}
				LCD_VoidSetCursor(1,4);
				CALC_DecToBin(total_number_decimal);
				while(z!=14)
    2f38:	8f 89       	ldd	r24, Y+23	; 0x17
    2f3a:	8e 30       	cpi	r24, 0x0E	; 14
    2f3c:	d1 f7       	brne	.-12     	; 0x2f32 <main+0xfd4>
    2f3e:	1d c8       	rjmp	.-4038   	; 0x1f7a <main+0x1c>

00002f40 <__udivmodhi4>:
    2f40:	aa 1b       	sub	r26, r26
    2f42:	bb 1b       	sub	r27, r27
    2f44:	51 e1       	ldi	r21, 0x11	; 17
    2f46:	07 c0       	rjmp	.+14     	; 0x2f56 <__udivmodhi4_ep>

00002f48 <__udivmodhi4_loop>:
    2f48:	aa 1f       	adc	r26, r26
    2f4a:	bb 1f       	adc	r27, r27
    2f4c:	a6 17       	cp	r26, r22
    2f4e:	b7 07       	cpc	r27, r23
    2f50:	10 f0       	brcs	.+4      	; 0x2f56 <__udivmodhi4_ep>
    2f52:	a6 1b       	sub	r26, r22
    2f54:	b7 0b       	sbc	r27, r23

00002f56 <__udivmodhi4_ep>:
    2f56:	88 1f       	adc	r24, r24
    2f58:	99 1f       	adc	r25, r25
    2f5a:	5a 95       	dec	r21
    2f5c:	a9 f7       	brne	.-22     	; 0x2f48 <__udivmodhi4_loop>
    2f5e:	80 95       	com	r24
    2f60:	90 95       	com	r25
    2f62:	bc 01       	movw	r22, r24
    2f64:	cd 01       	movw	r24, r26
    2f66:	08 95       	ret

00002f68 <__prologue_saves__>:
    2f68:	2f 92       	push	r2
    2f6a:	3f 92       	push	r3
    2f6c:	4f 92       	push	r4
    2f6e:	5f 92       	push	r5
    2f70:	6f 92       	push	r6
    2f72:	7f 92       	push	r7
    2f74:	8f 92       	push	r8
    2f76:	9f 92       	push	r9
    2f78:	af 92       	push	r10
    2f7a:	bf 92       	push	r11
    2f7c:	cf 92       	push	r12
    2f7e:	df 92       	push	r13
    2f80:	ef 92       	push	r14
    2f82:	ff 92       	push	r15
    2f84:	0f 93       	push	r16
    2f86:	1f 93       	push	r17
    2f88:	cf 93       	push	r28
    2f8a:	df 93       	push	r29
    2f8c:	cd b7       	in	r28, 0x3d	; 61
    2f8e:	de b7       	in	r29, 0x3e	; 62
    2f90:	ca 1b       	sub	r28, r26
    2f92:	db 0b       	sbc	r29, r27
    2f94:	0f b6       	in	r0, 0x3f	; 63
    2f96:	f8 94       	cli
    2f98:	de bf       	out	0x3e, r29	; 62
    2f9a:	0f be       	out	0x3f, r0	; 63
    2f9c:	cd bf       	out	0x3d, r28	; 61
    2f9e:	09 94       	ijmp

00002fa0 <__epilogue_restores__>:
    2fa0:	2a 88       	ldd	r2, Y+18	; 0x12
    2fa2:	39 88       	ldd	r3, Y+17	; 0x11
    2fa4:	48 88       	ldd	r4, Y+16	; 0x10
    2fa6:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fa8:	6e 84       	ldd	r6, Y+14	; 0x0e
    2faa:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fac:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fae:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fb0:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fb2:	b9 84       	ldd	r11, Y+9	; 0x09
    2fb4:	c8 84       	ldd	r12, Y+8	; 0x08
    2fb6:	df 80       	ldd	r13, Y+7	; 0x07
    2fb8:	ee 80       	ldd	r14, Y+6	; 0x06
    2fba:	fd 80       	ldd	r15, Y+5	; 0x05
    2fbc:	0c 81       	ldd	r16, Y+4	; 0x04
    2fbe:	1b 81       	ldd	r17, Y+3	; 0x03
    2fc0:	aa 81       	ldd	r26, Y+2	; 0x02
    2fc2:	b9 81       	ldd	r27, Y+1	; 0x01
    2fc4:	ce 0f       	add	r28, r30
    2fc6:	d1 1d       	adc	r29, r1
    2fc8:	0f b6       	in	r0, 0x3f	; 63
    2fca:	f8 94       	cli
    2fcc:	de bf       	out	0x3e, r29	; 62
    2fce:	0f be       	out	0x3f, r0	; 63
    2fd0:	cd bf       	out	0x3d, r28	; 61
    2fd2:	ed 01       	movw	r28, r26
    2fd4:	08 95       	ret

00002fd6 <_exit>:
    2fd6:	f8 94       	cli

00002fd8 <__stop_program>:
    2fd8:	ff cf       	rjmp	.-2      	; 0x2fd8 <__stop_program>
